
tasiyici1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb44  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000588  0800fce8  0800fce8  00010ce8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010270  08010270  000121e8  2**0
                  CONTENTS
  4 .ARM          00000008  08010270  08010270  00011270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010278  08010278  000121e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010278  08010278  00011278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801027c  0801027c  0001127c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08010280  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006b8  200001e8  08010468  000121e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200008a0  08010468  000128a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001952c  00000000  00000000  00012218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038f2  00000000  00000000  0002b744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  0002f038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000117a  00000000  00000000  000306a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005130  00000000  00000000  0003181a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfb2  00000000  00000000  0003694a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5ee8  00000000  00000000  000538fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f97e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007874  00000000  00000000  000f9828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010109c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fccc 	.word	0x0800fccc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800fccc 	.word	0x0800fccc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <GPS_UART_CallBack>:
{
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
}


void GPS_UART_CallBack(){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
	if (rx_data != '\n' && rx_index < sizeof(rx_buffer)) {
 8000ff8:	4b16      	ldr	r3, [pc, #88]	@ (8001054 <GPS_UART_CallBack+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b0a      	cmp	r3, #10
 8000ffe:	d010      	beq.n	8001022 <GPS_UART_CallBack+0x2e>
 8001000:	4b15      	ldr	r3, [pc, #84]	@ (8001058 <GPS_UART_CallBack+0x64>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	b25b      	sxtb	r3, r3
 8001006:	2b00      	cmp	r3, #0
 8001008:	db0b      	blt.n	8001022 <GPS_UART_CallBack+0x2e>
		rx_buffer[rx_index++] = rx_data;
 800100a:	4b13      	ldr	r3, [pc, #76]	@ (8001058 <GPS_UART_CallBack+0x64>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	1c5a      	adds	r2, r3, #1
 8001010:	b2d1      	uxtb	r1, r2
 8001012:	4a11      	ldr	r2, [pc, #68]	@ (8001058 <GPS_UART_CallBack+0x64>)
 8001014:	7011      	strb	r1, [r2, #0]
 8001016:	461a      	mov	r2, r3
 8001018:	4b0e      	ldr	r3, [pc, #56]	@ (8001054 <GPS_UART_CallBack+0x60>)
 800101a:	7819      	ldrb	r1, [r3, #0]
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <GPS_UART_CallBack+0x68>)
 800101e:	5499      	strb	r1, [r3, r2]
 8001020:	e010      	b.n	8001044 <GPS_UART_CallBack+0x50>
	} else {

		if(GPS_validate((char*) rx_buffer))
 8001022:	480e      	ldr	r0, [pc, #56]	@ (800105c <GPS_UART_CallBack+0x68>)
 8001024:	f000 f81e 	bl	8001064 <GPS_validate>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d002      	beq.n	8001034 <GPS_UART_CallBack+0x40>
			GPS_parse((char*) rx_buffer);
 800102e:	480b      	ldr	r0, [pc, #44]	@ (800105c <GPS_UART_CallBack+0x68>)
 8001030:	f000 f87a 	bl	8001128 <GPS_parse>
		rx_index = 0;
 8001034:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <GPS_UART_CallBack+0x64>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
		memset(rx_buffer, 0, sizeof(rx_buffer));
 800103a:	2280      	movs	r2, #128	@ 0x80
 800103c:	2100      	movs	r1, #0
 800103e:	4807      	ldr	r0, [pc, #28]	@ (800105c <GPS_UART_CallBack+0x68>)
 8001040:	f009 ff0f 	bl	800ae62 <memset>
	}
	HAL_UART_Receive_IT(GPS_USART, &rx_data, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	4903      	ldr	r1, [pc, #12]	@ (8001054 <GPS_UART_CallBack+0x60>)
 8001048:	4805      	ldr	r0, [pc, #20]	@ (8001060 <GPS_UART_CallBack+0x6c>)
 800104a:	f006 ffc6 	bl	8007fda <HAL_UART_Receive_IT>
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000204 	.word	0x20000204
 8001058:	20000288 	.word	0x20000288
 800105c:	20000208 	.word	0x20000208
 8001060:	2000055c 	.word	0x2000055c

08001064 <GPS_validate>:


int GPS_validate(char *nmeastr){
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i=0;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
    calculated_check=0;
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if(nmeastr[i] == '$')
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	2b24      	cmp	r3, #36	@ 0x24
 800107e:	d103      	bne.n	8001088 <GPS_validate+0x24>
        i++;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
    else
        return 0;

    //No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 8001086:	e00c      	b.n	80010a2 <GPS_validate+0x3e>
        return 0;
 8001088:	2300      	movs	r3, #0
 800108a:	e047      	b.n	800111c <GPS_validate+0xb8>
        calculated_check ^= nmeastr[i];// calculate the checksum
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	461a      	mov	r2, r3
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4053      	eors	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        i++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
    while((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75)){
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4413      	add	r3, r2
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d008      	beq.n	80010c0 <GPS_validate+0x5c>
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80010b8:	d002      	beq.n	80010c0 <GPS_validate+0x5c>
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b4a      	cmp	r3, #74	@ 0x4a
 80010be:	dde5      	ble.n	800108c <GPS_validate+0x28>
    }

    if(i >= 75){
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	2b4a      	cmp	r3, #74	@ 0x4a
 80010c4:	dd01      	ble.n	80010ca <GPS_validate+0x66>
        return 0;// the string was too long so return an error
 80010c6:	2300      	movs	r3, #0
 80010c8:	e028      	b.n	800111c <GPS_validate+0xb8>
    }

    if (nmeastr[i] == '*'){
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	4413      	add	r3, r2
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80010d4:	d119      	bne.n	800110a <GPS_validate+0xa6>
        check[0] = nmeastr[i+1];    //put hex chars in check string
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	3301      	adds	r3, #1
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i+2];
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3302      	adds	r3, #2
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0;// no checksum separator found there for invalid

    sprintf(checkcalcstr,"%02X",calculated_check);
 80010f2:	f107 0308 	add.w	r3, r7, #8
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	490a      	ldr	r1, [pc, #40]	@ (8001124 <GPS_validate+0xc0>)
 80010fa:	4618      	mov	r0, r3
 80010fc:	f009 fe22 	bl	800ad44 <siprintf>
    return((checkcalcstr[0] == check[0])
 8001100:	7a3a      	ldrb	r2, [r7, #8]
 8001102:	7b3b      	ldrb	r3, [r7, #12]
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 8001104:	429a      	cmp	r2, r3
 8001106:	d108      	bne.n	800111a <GPS_validate+0xb6>
 8001108:	e001      	b.n	800110e <GPS_validate+0xaa>
        return 0;// no checksum separator found there for invalid
 800110a:	2300      	movs	r3, #0
 800110c:	e006      	b.n	800111c <GPS_validate+0xb8>
        && (checkcalcstr[1] == check[1])) ? 1 : 0 ;
 800110e:	7a7a      	ldrb	r2, [r7, #9]
 8001110:	7b7b      	ldrb	r3, [r7, #13]
 8001112:	429a      	cmp	r2, r3
 8001114:	d101      	bne.n	800111a <GPS_validate+0xb6>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <GPS_validate+0xb8>
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3718      	adds	r7, #24
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	0800fce8 	.word	0x0800fce8

08001128 <GPS_parse>:

void GPS_parse(char *GPSstrParse){
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	@ 0x28
 800112c:	af08      	add	r7, sp, #32
 800112e:	6078      	str	r0, [r7, #4]
    if(!strncmp(GPSstrParse, "$GPGGA", 6)){
 8001130:	2206      	movs	r2, #6
 8001132:	4950      	ldr	r1, [pc, #320]	@ (8001274 <GPS_parse+0x14c>)
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f009 fe9c 	bl	800ae72 <strncmp>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d143      	bne.n	80011c8 <GPS_parse+0xa0>
    	if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.lock, &GPS.satelites, &GPS.hdop, &GPS.msl_altitude, &GPS.msl_units) >= 1){
 8001140:	4b4d      	ldr	r3, [pc, #308]	@ (8001278 <GPS_parse+0x150>)
 8001142:	9307      	str	r3, [sp, #28]
 8001144:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <GPS_parse+0x154>)
 8001146:	9306      	str	r3, [sp, #24]
 8001148:	4b4d      	ldr	r3, [pc, #308]	@ (8001280 <GPS_parse+0x158>)
 800114a:	9305      	str	r3, [sp, #20]
 800114c:	4b4d      	ldr	r3, [pc, #308]	@ (8001284 <GPS_parse+0x15c>)
 800114e:	9304      	str	r3, [sp, #16]
 8001150:	4b4d      	ldr	r3, [pc, #308]	@ (8001288 <GPS_parse+0x160>)
 8001152:	9303      	str	r3, [sp, #12]
 8001154:	4b4d      	ldr	r3, [pc, #308]	@ (800128c <GPS_parse+0x164>)
 8001156:	9302      	str	r3, [sp, #8]
 8001158:	4b4d      	ldr	r3, [pc, #308]	@ (8001290 <GPS_parse+0x168>)
 800115a:	9301      	str	r3, [sp, #4]
 800115c:	4b4d      	ldr	r3, [pc, #308]	@ (8001294 <GPS_parse+0x16c>)
 800115e:	9300      	str	r3, [sp, #0]
 8001160:	4b4d      	ldr	r3, [pc, #308]	@ (8001298 <GPS_parse+0x170>)
 8001162:	4a4e      	ldr	r2, [pc, #312]	@ (800129c <GPS_parse+0x174>)
 8001164:	494e      	ldr	r1, [pc, #312]	@ (80012a0 <GPS_parse+0x178>)
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f009 fe0c 	bl	800ad84 <siscanf>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	dd7c      	ble.n	800126c <GPS_parse+0x144>
    		GPS.dec_latitude = GPS_nmea_to_dec(GPS.nmea_latitude, GPS.ns);
 8001172:	4b4c      	ldr	r3, [pc, #304]	@ (80012a4 <GPS_parse+0x17c>)
 8001174:	edd3 7a04 	vldr	s15, [r3, #16]
 8001178:	4b4a      	ldr	r3, [pc, #296]	@ (80012a4 <GPS_parse+0x17c>)
 800117a:	7e1b      	ldrb	r3, [r3, #24]
 800117c:	4618      	mov	r0, r3
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	f000 f8b9 	bl	80012f8 <GPS_nmea_to_dec>
 8001186:	eef0 7a40 	vmov.f32	s15, s0
 800118a:	4b46      	ldr	r3, [pc, #280]	@ (80012a4 <GPS_parse+0x17c>)
 800118c:	edc3 7a01 	vstr	s15, [r3, #4]
    		GPS.dec_longitude = GPS_nmea_to_dec(GPS.nmea_longitude, GPS.ew);
 8001190:	4b44      	ldr	r3, [pc, #272]	@ (80012a4 <GPS_parse+0x17c>)
 8001192:	edd3 7a03 	vldr	s15, [r3, #12]
 8001196:	4b43      	ldr	r3, [pc, #268]	@ (80012a4 <GPS_parse+0x17c>)
 8001198:	7e5b      	ldrb	r3, [r3, #25]
 800119a:	4618      	mov	r0, r3
 800119c:	eeb0 0a67 	vmov.f32	s0, s15
 80011a0:	f000 f8aa 	bl	80012f8 <GPS_nmea_to_dec>
 80011a4:	eef0 7a40 	vmov.f32	s15, s0
 80011a8:	4b3e      	ldr	r3, [pc, #248]	@ (80012a4 <GPS_parse+0x17c>)
 80011aa:	edc3 7a00 	vstr	s15, [r3]

    		GPS_Latitude = GPS.dec_latitude;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	@ (80012a4 <GPS_parse+0x17c>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4a3d      	ldr	r2, [pc, #244]	@ (80012a8 <GPS_parse+0x180>)
 80011b4:	6013      	str	r3, [r2, #0]
    		GPS_Longitude = GPS.dec_longitude;
 80011b6:	4b3b      	ldr	r3, [pc, #236]	@ (80012a4 <GPS_parse+0x17c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a3c      	ldr	r2, [pc, #240]	@ (80012ac <GPS_parse+0x184>)
 80011bc:	6013      	str	r3, [r2, #0]
			GPS_Altitude = GPS.msl_altitude;
 80011be:	4b39      	ldr	r3, [pc, #228]	@ (80012a4 <GPS_parse+0x17c>)
 80011c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c2:	4a3b      	ldr	r2, [pc, #236]	@ (80012b0 <GPS_parse+0x188>)
 80011c4:	6013      	str	r3, [r2, #0]
    		return;
 80011c6:	e051      	b.n	800126c <GPS_parse+0x144>
    	}
    }
    else if (!strncmp(GPSstrParse, "$GPRMC", 6)){
 80011c8:	2206      	movs	r2, #6
 80011ca:	493a      	ldr	r1, [pc, #232]	@ (80012b4 <GPS_parse+0x18c>)
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f009 fe50 	bl	800ae72 <strncmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d114      	bne.n	8001202 <GPS_parse+0xda>
    	if(sscanf(GPSstrParse, "$GPRMC,%f,%f,%c,%f,%c,%f,%f,%d", &GPS.utc_time, &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.speed_k, &GPS.course_d, &GPS.date) >= 1)
 80011d8:	4b37      	ldr	r3, [pc, #220]	@ (80012b8 <GPS_parse+0x190>)
 80011da:	9305      	str	r3, [sp, #20]
 80011dc:	4b37      	ldr	r3, [pc, #220]	@ (80012bc <GPS_parse+0x194>)
 80011de:	9304      	str	r3, [sp, #16]
 80011e0:	4b37      	ldr	r3, [pc, #220]	@ (80012c0 <GPS_parse+0x198>)
 80011e2:	9303      	str	r3, [sp, #12]
 80011e4:	4b29      	ldr	r3, [pc, #164]	@ (800128c <GPS_parse+0x164>)
 80011e6:	9302      	str	r3, [sp, #8]
 80011e8:	4b29      	ldr	r3, [pc, #164]	@ (8001290 <GPS_parse+0x168>)
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	4b29      	ldr	r3, [pc, #164]	@ (8001294 <GPS_parse+0x16c>)
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	4b29      	ldr	r3, [pc, #164]	@ (8001298 <GPS_parse+0x170>)
 80011f2:	4a2a      	ldr	r2, [pc, #168]	@ (800129c <GPS_parse+0x174>)
 80011f4:	4933      	ldr	r1, [pc, #204]	@ (80012c4 <GPS_parse+0x19c>)
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f009 fdc4 	bl	800ad84 <siscanf>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	e034      	b.n	800126c <GPS_parse+0x144>
    		return;

    }
    else if (!strncmp(GPSstrParse, "$GPGLL", 6)){
 8001202:	2206      	movs	r2, #6
 8001204:	4930      	ldr	r1, [pc, #192]	@ (80012c8 <GPS_parse+0x1a0>)
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f009 fe33 	bl	800ae72 <strncmp>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d110      	bne.n	8001234 <GPS_parse+0x10c>
        if(sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &GPS.nmea_latitude, &GPS.ns, &GPS.nmea_longitude, &GPS.ew, &GPS.utc_time, &GPS.gll_status) >= 1)
 8001212:	4b2e      	ldr	r3, [pc, #184]	@ (80012cc <GPS_parse+0x1a4>)
 8001214:	9303      	str	r3, [sp, #12]
 8001216:	4b21      	ldr	r3, [pc, #132]	@ (800129c <GPS_parse+0x174>)
 8001218:	9302      	str	r3, [sp, #8]
 800121a:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <GPS_parse+0x164>)
 800121c:	9301      	str	r3, [sp, #4]
 800121e:	4b1c      	ldr	r3, [pc, #112]	@ (8001290 <GPS_parse+0x168>)
 8001220:	9300      	str	r3, [sp, #0]
 8001222:	4b1c      	ldr	r3, [pc, #112]	@ (8001294 <GPS_parse+0x16c>)
 8001224:	4a1c      	ldr	r2, [pc, #112]	@ (8001298 <GPS_parse+0x170>)
 8001226:	492a      	ldr	r1, [pc, #168]	@ (80012d0 <GPS_parse+0x1a8>)
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f009 fdab 	bl	800ad84 <siscanf>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	e01b      	b.n	800126c <GPS_parse+0x144>
            return;
    }
    else if (!strncmp(GPSstrParse, "$GPVTG", 6)){
 8001234:	2206      	movs	r2, #6
 8001236:	4927      	ldr	r1, [pc, #156]	@ (80012d4 <GPS_parse+0x1ac>)
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f009 fe1a 	bl	800ae72 <strncmp>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d113      	bne.n	800126c <GPS_parse+0x144>
        if(sscanf(GPSstrParse, "$GPVTG,%f,%c,%f,%c,%f,%c,%f,%c", &GPS.course_t, &GPS.course_t_unit, &GPS.course_m, &GPS.course_m_unit, &GPS.speed_k, &GPS.speed_k_unit, &GPS.speed_km, &GPS.speed_km_unit) >= 1)
 8001244:	4b24      	ldr	r3, [pc, #144]	@ (80012d8 <GPS_parse+0x1b0>)
 8001246:	9305      	str	r3, [sp, #20]
 8001248:	4b24      	ldr	r3, [pc, #144]	@ (80012dc <GPS_parse+0x1b4>)
 800124a:	9304      	str	r3, [sp, #16]
 800124c:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <GPS_parse+0x1b8>)
 800124e:	9303      	str	r3, [sp, #12]
 8001250:	4b1b      	ldr	r3, [pc, #108]	@ (80012c0 <GPS_parse+0x198>)
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <GPS_parse+0x1bc>)
 8001256:	9301      	str	r3, [sp, #4]
 8001258:	4b23      	ldr	r3, [pc, #140]	@ (80012e8 <GPS_parse+0x1c0>)
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	4b23      	ldr	r3, [pc, #140]	@ (80012ec <GPS_parse+0x1c4>)
 800125e:	4a24      	ldr	r2, [pc, #144]	@ (80012f0 <GPS_parse+0x1c8>)
 8001260:	4924      	ldr	r1, [pc, #144]	@ (80012f4 <GPS_parse+0x1cc>)
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f009 fd8e 	bl	800ad84 <siscanf>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
            return;
    }
}
 800126c:	3708      	adds	r7, #8
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	0800fcf0 	.word	0x0800fcf0
 8001278:	200002b8 	.word	0x200002b8
 800127c:	200002b4 	.word	0x200002b4
 8001280:	200002b0 	.word	0x200002b0
 8001284:	200002ac 	.word	0x200002ac
 8001288:	200002a8 	.word	0x200002a8
 800128c:	200002a5 	.word	0x200002a5
 8001290:	20000298 	.word	0x20000298
 8001294:	200002a4 	.word	0x200002a4
 8001298:	2000029c 	.word	0x2000029c
 800129c:	200002a0 	.word	0x200002a0
 80012a0:	0800fcf8 	.word	0x0800fcf8
 80012a4:	2000028c 	.word	0x2000028c
 80012a8:	20000694 	.word	0x20000694
 80012ac:	20000690 	.word	0x20000690
 80012b0:	2000068c 	.word	0x2000068c
 80012b4:	0800fd20 	.word	0x0800fd20
 80012b8:	200002c4 	.word	0x200002c4
 80012bc:	200002c0 	.word	0x200002c0
 80012c0:	200002bc 	.word	0x200002bc
 80012c4:	0800fd28 	.word	0x0800fd28
 80012c8:	0800fd48 	.word	0x0800fd48
 80012cc:	200002c8 	.word	0x200002c8
 80012d0:	0800fd50 	.word	0x0800fd50
 80012d4:	0800fd6c 	.word	0x0800fd6c
 80012d8:	200002e0 	.word	0x200002e0
 80012dc:	200002dc 	.word	0x200002dc
 80012e0:	200002d9 	.word	0x200002d9
 80012e4:	200002d8 	.word	0x200002d8
 80012e8:	200002d4 	.word	0x200002d4
 80012ec:	200002d0 	.word	0x200002d0
 80012f0:	200002cc 	.word	0x200002cc
 80012f4:	0800fd74 	.word	0x0800fd74

080012f8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew) {
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8001302:	4603      	mov	r3, r0
 8001304:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord/100);
 8001306:	ed97 7a01 	vldr	s14, [r7, #4]
 800130a:	eddf 6a20 	vldr	s13, [pc, #128]	@ 800138c <GPS_nmea_to_dec+0x94>
 800130e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001316:	ee17 3a90 	vmov	r3, s15
 800131a:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree*100;
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	2264      	movs	r2, #100	@ 0x64
 8001320:	fb02 f303 	mul.w	r3, r2, r3
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800132c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001330:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001334:	edc7 7a03 	vstr	s15, [r7, #12]
    float dec_deg = minutes / 60;
 8001338:	ed97 7a03 	vldr	s14, [r7, #12]
 800133c:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001390 <GPS_nmea_to_dec+0x98>
 8001340:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001344:	edc7 7a02 	vstr	s15, [r7, #8]
    float decimal = degree + dec_deg;
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001352:	ed97 7a02 	vldr	s14, [r7, #8]
 8001356:	ee77 7a27 	vadd.f32	s15, s14, s15
 800135a:	edc7 7a05 	vstr	s15, [r7, #20]
    if (nsew == 'S' || nsew == 'W') { // return negative
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	2b53      	cmp	r3, #83	@ 0x53
 8001362:	d002      	beq.n	800136a <GPS_nmea_to_dec+0x72>
 8001364:	78fb      	ldrb	r3, [r7, #3]
 8001366:	2b57      	cmp	r3, #87	@ 0x57
 8001368:	d105      	bne.n	8001376 <GPS_nmea_to_dec+0x7e>
        decimal *= -1;
 800136a:	edd7 7a05 	vldr	s15, [r7, #20]
 800136e:	eef1 7a67 	vneg.f32	s15, s15
 8001372:	edc7 7a05 	vstr	s15, [r7, #20]
    }
    return decimal;
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	ee07 3a90 	vmov	s15, r3
}
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	371c      	adds	r7, #28
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	42c80000 	.word	0x42c80000
 8001390:	42700000 	.word	0x42700000

08001394 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	GPS_UART_CallBack();
 800139c:	f7ff fe2a 	bl	8000ff4 <GPS_UART_CallBack>
   // do nothing here
}
 80013a0:	bf00      	nop
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <MS5611_Init>:


/******************************************************************************
         			#### MS5611 FUNCTIONS ####
******************************************************************************/
MS5611_StatusTypeDef MS5611_Init(MS5611_HandleTypeDef *dev){
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	 MS5611_Reset(dev);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f86f 	bl	8001494 <MS5611_Reset>

	 if(HAL_I2C_IsDeviceReady(dev->i2c, dev->I2C_ADDRESS, 1, 1000) != HAL_OK){
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6818      	ldr	r0, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	8899      	ldrh	r1, [r3, #4]
 80013be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c2:	2201      	movs	r2, #1
 80013c4:	f003 fcba 	bl	8004d3c <HAL_I2C_IsDeviceReady>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d000      	beq.n	80013d0 <MS5611_Init+0x28>

			__NOP();
 80013ce:	bf00      	nop

	 }

	MS5611_Get_CalibCoeff(dev);
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f000 f879 	bl	80014c8 <MS5611_Get_CalibCoeff>

	/**
	 * It is calculated average vertical altitude for set to zero our actual altitude
	 */
	if(dev->Ref_Alt_Sel == 'm'){
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 80013dc:	2b6d      	cmp	r3, #109	@ 0x6d
 80013de:	d10c      	bne.n	80013fa <MS5611_Init+0x52>

		dev->FixedAltitude = 0.0; //We set zero at the first time because gets the real place altitude value
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	661a      	str	r2, [r3, #96]	@ 0x60

		dev->FixedAltitude = MS5611_Calc_TemporaryAltitude(dev);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f000 f819 	bl	8001420 <MS5611_Calc_TemporaryAltitude>
 80013ee:	eef0 7a40 	vmov.f32	s15, s0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	edc3 7a18 	vstr	s15, [r3, #96]	@ 0x60
 80013f8:	e008      	b.n	800140c <MS5611_Init+0x64>

		 }
		 else if(dev->Ref_Alt_Sel == 'M'){
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3064 	ldrb.w	r3, [r3, #100]	@ 0x64
 8001400:	2b4d      	cmp	r3, #77	@ 0x4d
 8001402:	d103      	bne.n	800140c <MS5611_Init+0x64>

			 dev->FixedAltitude = 0.0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f04f 0200 	mov.w	r2, #0
 800140a:	661a      	str	r2, [r3, #96]	@ 0x60

		 }
	/**
	 * In the beginning, variables that record the amounts of change are reset for security measures
	 */
	MS5611_ResetRef_DeltaVal(dev);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fcd9 	bl	8001dc4 <MS5611_ResetRef_DeltaVal>

	return MS5611_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	0000      	movs	r0, r0
	...

08001420 <MS5611_Calc_TemporaryAltitude>:

float MS5611_Calc_TemporaryAltitude(MS5611_HandleTypeDef *dev){
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]

	 float tempAltitude = 0;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]

	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	e01d      	b.n	8001470 <MS5611_Calc_TemporaryAltitude+0x50>

		 MS5611_Read_ActVal(dev);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f000 fc5b 	bl	8001cf0 <MS5611_Read_ActVal>
		 tempAltitude = (float)(tempAltitude + (float)(MS5611_Altitude * 0.05));
 800143a:	4b15      	ldr	r3, [pc, #84]	@ (8001490 <MS5611_Calc_TemporaryAltitude+0x70>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f88a 	bl	8000558 <__aeabi_f2d>
 8001444:	a310      	add	r3, pc, #64	@ (adr r3, 8001488 <MS5611_Calc_TemporaryAltitude+0x68>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8dd 	bl	8000608 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fbcf 	bl	8000bf8 <__aeabi_d2f>
 800145a:	ee07 0a10 	vmov	s14, r0
 800145e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001462:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001466:	edc7 7a03 	vstr	s15, [r7, #12]
	 for(int cnt = 0 ; cnt < 20 ; cnt++){
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	3301      	adds	r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2b13      	cmp	r3, #19
 8001474:	ddde      	ble.n	8001434 <MS5611_Calc_TemporaryAltitude+0x14>

	  }

	 return tempAltitude;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	ee07 3a90 	vmov	s15, r3

}
 800147c:	eeb0 0a67 	vmov.f32	s0, s15
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	9999999a 	.word	0x9999999a
 800148c:	3fa99999 	.word	0x3fa99999
 8001490:	20000678 	.word	0x20000678

08001494 <MS5611_Reset>:
void MS5611_Reset(MS5611_HandleTypeDef *dev){
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af04      	add	r7, sp, #16
 800149a:	6078      	str	r0, [r7, #4]

	HAL_I2C_Mem_Write(dev->i2c, dev->I2C_ADDRESS, dev->I2C_ADDRESS, 1, &ResetCom, 1, 1000);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8899      	ldrh	r1, [r3, #4]
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	889a      	ldrh	r2, [r3, #4]
 80014a8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ac:	9302      	str	r3, [sp, #8]
 80014ae:	2301      	movs	r3, #1
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	4b04      	ldr	r3, [pc, #16]	@ (80014c4 <MS5611_Reset+0x30>)
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2301      	movs	r3, #1
 80014b8:	f003 fb46 	bl	8004b48 <HAL_I2C_Mem_Write>

}
 80014bc:	bf00      	nop
 80014be:	3708      	adds	r7, #8
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000002 	.word	0x20000002

080014c8 <MS5611_Get_CalibCoeff>:


void MS5611_Get_CalibCoeff(MS5611_HandleTypeDef *dev){
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08e      	sub	sp, #56	@ 0x38
 80014cc:	af02      	add	r7, sp, #8
 80014ce:	6078      	str	r0, [r7, #4]

	uint8_t CalibCoefAddrss[7] = {0xA2, //C1
 80014d0:	4a8c      	ldr	r2, [pc, #560]	@ (8001704 <MS5611_Get_CalibCoeff+0x23c>)
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014da:	6018      	str	r0, [r3, #0]
 80014dc:	3304      	adds	r3, #4
 80014de:	8019      	strh	r1, [r3, #0]
 80014e0:	3302      	adds	r3, #2
 80014e2:	0c0a      	lsrs	r2, r1, #16
 80014e4:	701a      	strb	r2, [r3, #0]
								  0xA8, //C4
								  0xAA, //C5
								  0xAC, //C6
								  0xAE}; /*! The last address is for CRC*/

	uint8_t TempryCalibCoefVal[2] = {0};	/*! Temporary buffer that gets two complement of each calibration coefficient*/
 80014e6:	2300      	movs	r3, #0
 80014e8:	83bb      	strh	r3, [r7, #28]
	uint8_t CalibCoefVal[14] = {0};			/*! Stable buffer that collects all complements of calibration coefficients*/
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	811a      	strh	r2, [r3, #8]
	uint8_t cnt = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f


	for(cnt = 0; cnt <= 6 ; cnt++){
 8001500:	2300      	movs	r3, #0
 8001502:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001506:	e03b      	b.n	8001580 <MS5611_Get_CalibCoeff+0xb8>

		HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &CalibCoefAddrss[cnt], 1, 1000);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	8899      	ldrh	r1, [r3, #4]
 8001510:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001514:	f107 0220 	add.w	r2, r7, #32
 8001518:	441a      	add	r2, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	2301      	movs	r3, #1
 8001522:	f002 ffe1 	bl	80044e8 <HAL_I2C_Master_Transmit>

				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001526:	2300      	movs	r3, #0
 8001528:	62bb      	str	r3, [r7, #40]	@ 0x28
 800152a:	e010      	b.n	800154e <MS5611_Get_CalibCoeff+0x86>

					HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &TempryCalibCoefVal[cnt_2], 2, 1000);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	8899      	ldrh	r1, [r3, #4]
 8001534:	f107 021c 	add.w	r2, r7, #28
 8001538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800153a:	441a      	add	r2, r3
 800153c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	2302      	movs	r3, #2
 8001544:	f003 f8ce 	bl	80046e4 <HAL_I2C_Master_Receive>
				for(int cnt_2 = 0; cnt_2 <= 1 ; cnt_2++){
 8001548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800154a:	3301      	adds	r3, #1
 800154c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	2b01      	cmp	r3, #1
 8001552:	ddeb      	ble.n	800152c <MS5611_Get_CalibCoeff+0x64>

				}

		CalibCoefVal[(cnt*2)]   = TempryCalibCoefVal[0];
 8001554:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	7f3a      	ldrb	r2, [r7, #28]
 800155c:	3330      	adds	r3, #48	@ 0x30
 800155e:	443b      	add	r3, r7
 8001560:	f803 2c24 	strb.w	r2, [r3, #-36]
		CalibCoefVal[(cnt*2+1)] = TempryCalibCoefVal[1];
 8001564:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	3301      	adds	r3, #1
 800156c:	7f7a      	ldrb	r2, [r7, #29]
 800156e:	3330      	adds	r3, #48	@ 0x30
 8001570:	443b      	add	r3, r7
 8001572:	f803 2c24 	strb.w	r2, [r3, #-36]
	for(cnt = 0; cnt <= 6 ; cnt++){
 8001576:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800157a:	3301      	adds	r3, #1
 800157c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001580:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001584:	2b06      	cmp	r3, #6
 8001586:	d9bf      	bls.n	8001508 <MS5611_Get_CalibCoeff+0x40>

	}

	cnt = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/*! Complements of each calibration coefficient consists MSB and LSB bits*/
	dev->Clb_Cf.C1  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2; // uint16_t <== |MSB_C1|LSB_C1|
 800158e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001592:	3330      	adds	r3, #48	@ 0x30
 8001594:	443b      	add	r3, r7
 8001596:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	b21a      	sxth	r2, r3
 800159e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015a2:	3301      	adds	r3, #1
 80015a4:	3330      	adds	r3, #48	@ 0x30
 80015a6:	443b      	add	r3, r7
 80015a8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	b21b      	sxth	r3, r3
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	80da      	strh	r2, [r3, #6]
 80015b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015bc:	3302      	adds	r3, #2
 80015be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C2  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80015c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015c6:	3330      	adds	r3, #48	@ 0x30
 80015c8:	443b      	add	r3, r7
 80015ca:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	b21a      	sxth	r2, r3
 80015d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015d6:	3301      	adds	r3, #1
 80015d8:	3330      	adds	r3, #48	@ 0x30
 80015da:	443b      	add	r3, r7
 80015dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b21b      	sxth	r3, r3
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	811a      	strh	r2, [r3, #8]
 80015ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015f0:	3302      	adds	r3, #2
 80015f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C3  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80015f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015fa:	3330      	adds	r3, #48	@ 0x30
 80015fc:	443b      	add	r3, r7
 80015fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001602:	021b      	lsls	r3, r3, #8
 8001604:	b21a      	sxth	r2, r3
 8001606:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800160a:	3301      	adds	r3, #1
 800160c:	3330      	adds	r3, #48	@ 0x30
 800160e:	443b      	add	r3, r7
 8001610:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001614:	b21b      	sxth	r3, r3
 8001616:	4313      	orrs	r3, r2
 8001618:	b21b      	sxth	r3, r3
 800161a:	b29a      	uxth	r2, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	815a      	strh	r2, [r3, #10]
 8001620:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001624:	3302      	adds	r3, #2
 8001626:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C4  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800162a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800162e:	3330      	adds	r3, #48	@ 0x30
 8001630:	443b      	add	r3, r7
 8001632:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001636:	021b      	lsls	r3, r3, #8
 8001638:	b21a      	sxth	r2, r3
 800163a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800163e:	3301      	adds	r3, #1
 8001640:	3330      	adds	r3, #48	@ 0x30
 8001642:	443b      	add	r3, r7
 8001644:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001648:	b21b      	sxth	r3, r3
 800164a:	4313      	orrs	r3, r2
 800164c:	b21b      	sxth	r3, r3
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	819a      	strh	r2, [r3, #12]
 8001654:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001658:	3302      	adds	r3, #2
 800165a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C5  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 800165e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001662:	3330      	adds	r3, #48	@ 0x30
 8001664:	443b      	add	r3, r7
 8001666:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21a      	sxth	r2, r3
 800166e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001672:	3301      	adds	r3, #1
 8001674:	3330      	adds	r3, #48	@ 0x30
 8001676:	443b      	add	r3, r7
 8001678:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800167c:	b21b      	sxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b21b      	sxth	r3, r3
 8001682:	b29a      	uxth	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	81da      	strh	r2, [r3, #14]
 8001688:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800168c:	3302      	adds	r3, #2
 800168e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.C6  = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 8001692:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001696:	3330      	adds	r3, #48	@ 0x30
 8001698:	443b      	add	r3, r7
 800169a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800169e:	021b      	lsls	r3, r3, #8
 80016a0:	b21a      	sxth	r2, r3
 80016a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a6:	3301      	adds	r3, #1
 80016a8:	3330      	adds	r3, #48	@ 0x30
 80016aa:	443b      	add	r3, r7
 80016ac:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	4313      	orrs	r3, r2
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	821a      	strh	r2, [r3, #16]
 80016bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016c0:	3302      	adds	r3, #2
 80016c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	dev->Clb_Cf.crc = ((CalibCoefVal[cnt]<<8) | CalibCoefVal[cnt+1]); cnt+=2;
 80016c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016ca:	3330      	adds	r3, #48	@ 0x30
 80016cc:	443b      	add	r3, r7
 80016ce:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	b21a      	sxth	r2, r3
 80016d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016da:	3301      	adds	r3, #1
 80016dc:	3330      	adds	r3, #48	@ 0x30
 80016de:	443b      	add	r3, r7
 80016e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80016e4:	b21b      	sxth	r3, r3
 80016e6:	4313      	orrs	r3, r2
 80016e8:	b21b      	sxth	r3, r3
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	825a      	strh	r2, [r3, #18]
 80016f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016f4:	3302      	adds	r3, #2
 80016f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

}
 80016fa:	bf00      	nop
 80016fc:	3730      	adds	r7, #48	@ 0x30
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	0800fd94 	.word	0x0800fd94

08001708 <MS5611_ReadRaw_Press_Temp>:


void MS5611_ReadRaw_Press_Temp(MS5611_HandleTypeDef *dev){
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af02      	add	r7, sp, #8
 800170e:	6078      	str	r0, [r7, #4]

	uint8_t RawDataD1[3]  = {0}; /*! D1 = Raw pressure value that will be compensated at other functions*/
 8001710:	4b38      	ldr	r3, [pc, #224]	@ (80017f4 <MS5611_ReadRaw_Press_Temp+0xec>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	81bb      	strh	r3, [r7, #12]
 8001716:	2300      	movs	r3, #0
 8001718:	73bb      	strb	r3, [r7, #14]
	uint8_t RawDataD2[3]  = {0}; /*! D2 = Raw temperature value that will be compensated at other functions*/
 800171a:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <MS5611_ReadRaw_Press_Temp+0xec>)
 800171c:	881b      	ldrh	r3, [r3, #0]
 800171e:	813b      	strh	r3, [r7, #8]
 8001720:	2300      	movs	r3, #0
 8001722:	72bb      	strb	r3, [r7, #10]
	 *
	 * @Attention! you must wait minimum 15 milisecond after each i2c command because of clock line and calculation times.
	 */

	/*! Gets D1(Raw Pressure)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D1, 1, 1000); //(1)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6818      	ldr	r0, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	8899      	ldrh	r1, [r3, #4]
 800172c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	2301      	movs	r3, #1
 8001734:	4a30      	ldr	r2, [pc, #192]	@ (80017f8 <MS5611_ReadRaw_Press_Temp+0xf0>)
 8001736:	f002 fed7 	bl	80044e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800173a:	2014      	movs	r0, #20
 800173c:	f001 fc3c 	bl	8002fb8 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);	 //(2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6818      	ldr	r0, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	8899      	ldrh	r1, [r3, #4]
 8001748:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800174c:	9300      	str	r3, [sp, #0]
 800174e:	2301      	movs	r3, #1
 8001750:	4a2a      	ldr	r2, [pc, #168]	@ (80017fc <MS5611_ReadRaw_Press_Temp+0xf4>)
 8001752:	f002 fec9 	bl	80044e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 8001756:	2014      	movs	r0, #20
 8001758:	f001 fc2e 	bl	8002fb8 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD1[0], 3, 10000);	 //(3)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6818      	ldr	r0, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	8899      	ldrh	r1, [r3, #4]
 8001764:	f107 020c 	add.w	r2, r7, #12
 8001768:	f242 7310 	movw	r3, #10000	@ 0x2710
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2303      	movs	r3, #3
 8001770:	f002 ffb8 	bl	80046e4 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D1 = (uint32_t)((RawDataD1[0]<<16) | (RawDataD1[1]<<8) | (RawDataD1[2]<<0)); // MSB|LSB|XLSB
 8001774:	7b3b      	ldrb	r3, [r7, #12]
 8001776:	041a      	lsls	r2, r3, #16
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	4313      	orrs	r3, r2
 800177e:	7bba      	ldrb	r2, [r7, #14]
 8001780:	4313      	orrs	r3, r2
 8001782:	461a      	mov	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	615a      	str	r2, [r3, #20]

	/*! Gets D2(Raw Temperature)*/
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &osrs_4096_D2, 1, 1000); //(1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	8899      	ldrh	r1, [r3, #4]
 8001790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2301      	movs	r3, #1
 8001798:	4a19      	ldr	r2, [pc, #100]	@ (8001800 <MS5611_ReadRaw_Press_Temp+0xf8>)
 800179a:	f002 fea5 	bl	80044e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 800179e:	2014      	movs	r0, #20
 80017a0:	f001 fc0a 	bl	8002fb8 <HAL_Delay>
	HAL_I2C_Master_Transmit(dev->i2c, dev->I2C_ADDRESS, &adcReadCom , 1, 1000);  	 //(2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6818      	ldr	r0, [r3, #0]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	8899      	ldrh	r1, [r3, #4]
 80017ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	2301      	movs	r3, #1
 80017b4:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <MS5611_ReadRaw_Press_Temp+0xf4>)
 80017b6:	f002 fe97 	bl	80044e8 <HAL_I2C_Master_Transmit>
	HAL_Delay(20);
 80017ba:	2014      	movs	r0, #20
 80017bc:	f001 fbfc 	bl	8002fb8 <HAL_Delay>
	HAL_I2C_Master_Receive(dev->i2c, dev->I2C_ADDRESS, &RawDataD2[0], 3, 1000);  //(3)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6818      	ldr	r0, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	8899      	ldrh	r1, [r3, #4]
 80017c8:	f107 0208 	add.w	r2, r7, #8
 80017cc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2303      	movs	r3, #3
 80017d4:	f002 ff86 	bl	80046e4 <HAL_I2C_Master_Receive>
	dev->ClcPrms.D2 = (uint32_t)((RawDataD2[0]<<16) | (RawDataD2[1]<<8) | (RawDataD2[2]<<0)); // MSB|LSB|XLSB
 80017d8:	7a3b      	ldrb	r3, [r7, #8]
 80017da:	041a      	lsls	r2, r3, #16
 80017dc:	7a7b      	ldrb	r3, [r7, #9]
 80017de:	021b      	lsls	r3, r3, #8
 80017e0:	4313      	orrs	r3, r2
 80017e2:	7aba      	ldrb	r2, [r7, #10]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	461a      	mov	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	0800fd9c 	.word	0x0800fd9c
 80017f8:	20000000 	.word	0x20000000
 80017fc:	200002e4 	.word	0x200002e4
 8001800:	20000001 	.word	0x20000001

08001804 <MS5611_FirstCalculateDatas>:


void MS5611_FirstCalculateDatas(MS5611_HandleTypeDef *dev){
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	dev->ClcPrms.dT   = dev->ClcPrms.D2 - dev->Clb_Cf.C5 * pow(2,8);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fe7f 	bl	8000514 <__aeabi_ui2d>
 8001816:	4604      	mov	r4, r0
 8001818:	460d      	mov	r5, r1
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	89db      	ldrh	r3, [r3, #14]
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fe88 	bl	8000534 <__aeabi_i2d>
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	4b69      	ldr	r3, [pc, #420]	@ (80019d0 <MS5611_FirstCalculateDatas+0x1cc>)
 800182a:	f7fe feed 	bl	8000608 <__aeabi_dmul>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4620      	mov	r0, r4
 8001834:	4629      	mov	r1, r5
 8001836:	f7fe fd2f 	bl	8000298 <__aeabi_dsub>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	f7ff f9d9 	bl	8000bf8 <__aeabi_d2f>
 8001846:	4602      	mov	r2, r0
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	61da      	str	r2, [r3, #28]
	dev->ClcPrms.OFF  = dev->Clb_Cf.C2 * pow(2,17) + (dev->Clb_Cf.C4 * dev->ClcPrms.dT) / pow(2,6);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	891b      	ldrh	r3, [r3, #8]
 8001850:	4618      	mov	r0, r3
 8001852:	f7fe fe6f 	bl	8000534 <__aeabi_i2d>
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 4382 	mov.w	r3, #1090519040	@ 0x41000000
 800185e:	f7fe fed3 	bl	8000608 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4614      	mov	r4, r2
 8001868:	461d      	mov	r5, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	899b      	ldrh	r3, [r3, #12]
 800186e:	ee07 3a90 	vmov	s15, r3
 8001872:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	edd3 7a07 	vldr	s15, [r3, #28]
 800187c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001880:	ee17 0a90 	vmov	r0, s15
 8001884:	f7fe fe68 	bl	8000558 <__aeabi_f2d>
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	4b51      	ldr	r3, [pc, #324]	@ (80019d4 <MS5611_FirstCalculateDatas+0x1d0>)
 800188e:	f7fe ffe5 	bl	800085c <__aeabi_ddiv>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4620      	mov	r0, r4
 8001898:	4629      	mov	r1, r5
 800189a:	f7fe fcff 	bl	800029c <__adddf3>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4610      	mov	r0, r2
 80018a4:	4619      	mov	r1, r3
 80018a6:	f7ff f9a7 	bl	8000bf8 <__aeabi_d2f>
 80018aa:	4602      	mov	r2, r0
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28
	dev->ClcPrms.SENS = dev->Clb_Cf.C1 * pow(2,16) + (dev->Clb_Cf.C3 * dev->ClcPrms.dT) / pow(2,7);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	88db      	ldrh	r3, [r3, #6]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe3d 	bl	8000534 <__aeabi_i2d>
 80018ba:	f04f 0200 	mov.w	r2, #0
 80018be:	4b46      	ldr	r3, [pc, #280]	@ (80019d8 <MS5611_FirstCalculateDatas+0x1d4>)
 80018c0:	f7fe fea2 	bl	8000608 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	895b      	ldrh	r3, [r3, #10]
 80018d0:	ee07 3a90 	vmov	s15, r3
 80018d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	edd3 7a07 	vldr	s15, [r3, #28]
 80018de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018e2:	ee17 0a90 	vmov	r0, s15
 80018e6:	f7fe fe37 	bl	8000558 <__aeabi_f2d>
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	4b3b      	ldr	r3, [pc, #236]	@ (80019dc <MS5611_FirstCalculateDatas+0x1d8>)
 80018f0:	f7fe ffb4 	bl	800085c <__aeabi_ddiv>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4620      	mov	r0, r4
 80018fa:	4629      	mov	r1, r5
 80018fc:	f7fe fcce 	bl	800029c <__adddf3>
 8001900:	4602      	mov	r2, r0
 8001902:	460b      	mov	r3, r1
 8001904:	4610      	mov	r0, r2
 8001906:	4619      	mov	r1, r3
 8001908:	f7ff f976 	bl	8000bf8 <__aeabi_d2f>
 800190c:	4602      	mov	r2, r0
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	62da      	str	r2, [r3, #44]	@ 0x2c

	dev->ClcPrms.TEMP = 2000 + dev->ClcPrms.dT * dev->Clb_Cf.C6 / pow(2,23);								//Actual temperature data
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	ed93 7a07 	vldr	s14, [r3, #28]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	8a1b      	ldrh	r3, [r3, #16]
 800191c:	ee07 3a90 	vmov	s15, r3
 8001920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001924:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001928:	ee17 0a90 	vmov	r0, s15
 800192c:	f7fe fe14 	bl	8000558 <__aeabi_f2d>
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b2a      	ldr	r3, [pc, #168]	@ (80019e0 <MS5611_FirstCalculateDatas+0x1dc>)
 8001936:	f7fe ff91 	bl	800085c <__aeabi_ddiv>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4610      	mov	r0, r2
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	4b27      	ldr	r3, [pc, #156]	@ (80019e4 <MS5611_FirstCalculateDatas+0x1e0>)
 8001948:	f7fe fca8 	bl	800029c <__adddf3>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f950 	bl	8000bf8 <__aeabi_d2f>
 8001958:	4602      	mov	r2, r0
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	621a      	str	r2, [r3, #32]
	dev->ClcPrms.P	  = ((dev->ClcPrms.D1 * dev->ClcPrms.SENS / pow(2,21) - dev->ClcPrms.OFF))/pow(2,15);	//Actual pressure data
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001970:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001974:	ee17 0a90 	vmov	r0, s15
 8001978:	f7fe fdee 	bl	8000558 <__aeabi_f2d>
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MS5611_FirstCalculateDatas+0x1e4>)
 8001982:	f7fe ff6b 	bl	800085c <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4614      	mov	r4, r2
 800198c:	461d      	mov	r5, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fde0 	bl	8000558 <__aeabi_f2d>
 8001998:	4602      	mov	r2, r0
 800199a:	460b      	mov	r3, r1
 800199c:	4620      	mov	r0, r4
 800199e:	4629      	mov	r1, r5
 80019a0:	f7fe fc7a 	bl	8000298 <__aeabi_dsub>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b0e      	ldr	r3, [pc, #56]	@ (80019ec <MS5611_FirstCalculateDatas+0x1e8>)
 80019b2:	f7fe ff53 	bl	800085c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f91b 	bl	8000bf8 <__aeabi_d2f>
 80019c2:	4602      	mov	r2, r0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	625a      	str	r2, [r3, #36]	@ 0x24

}
 80019c8:	bf00      	nop
 80019ca:	3708      	adds	r7, #8
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	40700000 	.word	0x40700000
 80019d4:	40500000 	.word	0x40500000
 80019d8:	40f00000 	.word	0x40f00000
 80019dc:	40600000 	.word	0x40600000
 80019e0:	41600000 	.word	0x41600000
 80019e4:	409f4000 	.word	0x409f4000
 80019e8:	41400000 	.word	0x41400000
 80019ec:	40e00000 	.word	0x40e00000

080019f0 <MS5611_SecondCalculateDatas>:


void MS5611_SecondCalculateDatas(MS5611_HandleTypeDef *dev){
 80019f0:	b5b0      	push	{r4, r5, r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

	if(dev->ClcPrms.TEMP < 2000){
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	edd3 7a08 	vldr	s15, [r3, #32]
 80019fe:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8001c38 <MS5611_SecondCalculateDatas+0x248>
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	f140 80e3 	bpl.w	8001bd4 <MS5611_SecondCalculateDatas+0x1e4>

			/*! Low Temperature */
			dev->ClcPrms.TEMP2 = (dev->ClcPrms.dT * dev->ClcPrms.dT) / pow(2,31);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	ed93 7a07 	vldr	s14, [r3, #28]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a1a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a1e:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8001c3c <MS5611_SecondCalculateDatas+0x24c>
 8001a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,1);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a32:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 8001c38 <MS5611_SecondCalculateDatas+0x248>
 8001a36:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a40:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8001c38 <MS5611_SecondCalculateDatas+0x248>
 8001a44:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a54:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 5 * ((dev->ClcPrms.TEMP - 2000) * (dev->ClcPrms.TEMP - 2000)) / pow(2,2);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a68:	ed9f 7a73 	vldr	s14, [pc, #460]	@ 8001c38 <MS5611_SecondCalculateDatas+0x248>
 8001a6c:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a76:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8001c38 <MS5611_SecondCalculateDatas+0x248>
 8001a7a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a82:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 8001a86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a8a:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8001a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34

					if(dev->ClcPrms.TEMP < -1500){
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	edd3 7a08 	vldr	s15, [r3, #32]
 8001a9e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8001c40 <MS5611_SecondCalculateDatas+0x250>
 8001aa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	d571      	bpl.n	8001b90 <MS5611_SecondCalculateDatas+0x1a0>
						/*! Very Low Temperature */
						dev->ClcPrms.OFF2  = dev->ClcPrms.OFF2 + 7 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500));
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ab8:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8001c44 <MS5611_SecondCalculateDatas+0x254>
 8001abc:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ac6:	ed9f 6a5f 	vldr	s12, [pc, #380]	@ 8001c44 <MS5611_SecondCalculateDatas+0x254>
 8001aca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8001ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ad2:	eef1 6a0c 	vmov.f32	s13, #28	@ 0x40e00000  7.0
 8001ad6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
						dev->ClcPrms.SENS2 = dev->ClcPrms.SENS2 + 11 * ((dev->ClcPrms.TEMP + 1500) * (dev->ClcPrms.TEMP + 1500)) / pow(2,1);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd35 	bl	8000558 <__aeabi_f2d>
 8001aee:	4604      	mov	r4, r0
 8001af0:	460d      	mov	r5, r1
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	edd3 7a08 	vldr	s15, [r3, #32]
 8001af8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8001c44 <MS5611_SecondCalculateDatas+0x254>
 8001afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	edd3 7a08 	vldr	s15, [r3, #32]
 8001b06:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8001c44 <MS5611_SecondCalculateDatas+0x254>
 8001b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b12:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8001b16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1a:	ee17 0a90 	vmov	r0, s15
 8001b1e:	f7fe fd1b 	bl	8000558 <__aeabi_f2d>
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001b2a:	f7fe fe97 	bl	800085c <__aeabi_ddiv>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	460b      	mov	r3, r1
 8001b32:	4620      	mov	r0, r4
 8001b34:	4629      	mov	r1, r5
 8001b36:	f7fe fbb1 	bl	800029c <__adddf3>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4610      	mov	r0, r2
 8001b40:	4619      	mov	r1, r3
 8001b42:	f7ff f859 	bl	8000bf8 <__aeabi_d2f>
 8001b46:	4602      	mov	r2, r0
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	635a      	str	r2, [r3, #52]	@ 0x34

						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001b84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;

		}
}
 8001b8e:	e04e      	b.n	8001c2e <MS5611_SecondCalculateDatas+0x23e>
						dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001b9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	edc3 7a08 	vstr	s15, [r3, #32]
						dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001bb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
						dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001bc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001bd2:	e02c      	b.n	8001c2e <MS5611_SecondCalculateDatas+0x23e>
			dev->ClcPrms.TEMP2 = 0;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	639a      	str	r2, [r3, #56]	@ 0x38
			dev->ClcPrms.OFF2  = 0;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	631a      	str	r2, [r3, #48]	@ 0x30
			dev->ClcPrms.SENS2 = 0;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	635a      	str	r2, [r3, #52]	@ 0x34
			dev->ClcPrms.TEMP = dev->ClcPrms.TEMP - dev->ClcPrms.TEMP2;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	ed93 7a08 	vldr	s14, [r3, #32]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 8001bf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	edc3 7a08 	vstr	s15, [r3, #32]
			dev->ClcPrms.OFF  = dev->ClcPrms.OFF - dev->ClcPrms.OFF2;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001c0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
			dev->ClcPrms.SENS = dev->ClcPrms.SENS - dev->ClcPrms.SENS2;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	edd3 7a0d 	vldr	s15, [r3, #52]	@ 0x34
 8001c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
}
 8001c2e:	bf00      	nop
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bdb0      	pop	{r4, r5, r7, pc}
 8001c36:	bf00      	nop
 8001c38:	44fa0000 	.word	0x44fa0000
 8001c3c:	4f000000 	.word	0x4f000000
 8001c40:	c4bb8000 	.word	0xc4bb8000
 8001c44:	44bb8000 	.word	0x44bb8000

08001c48 <MS5611_Calc_Altitude>:


float MS5611_Calc_Altitude(MS5611_HandleTypeDef *dev){
 8001c48:	b5b0      	push	{r4, r5, r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	return  ((SeaLevelTemp  / GradientTemp)
			* (1 - pow(((dev->ClcPrms.P/2) / SeaLevelPress),((GasCoefficient * GradientTemp)/GravityAccel)))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001c56:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c5e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001ce8 <MS5611_Calc_Altitude+0xa0>
 8001c62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c66:	ee16 0a90 	vmov	r0, s13
 8001c6a:	f7fe fc75 	bl	8000558 <__aeabi_f2d>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	ed9f 1b19 	vldr	d1, [pc, #100]	@ 8001cd8 <MS5611_Calc_Altitude+0x90>
 8001c76:	ec43 2b10 	vmov	d0, r2, r3
 8001c7a:	f00d f8c9 	bl	800ee10 <pow>
 8001c7e:	ec53 2b10 	vmov	r2, r3, d0
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	4919      	ldr	r1, [pc, #100]	@ (8001cec <MS5611_Calc_Altitude+0xa4>)
 8001c88:	f7fe fb06 	bl	8000298 <__aeabi_dsub>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	460b      	mov	r3, r1
 8001c90:	4610      	mov	r0, r2
 8001c92:	4619      	mov	r1, r3
 8001c94:	a312      	add	r3, pc, #72	@ (adr r3, 8001ce0 <MS5611_Calc_Altitude+0x98>)
 8001c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c9a:	f7fe fcb5 	bl	8000608 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4614      	mov	r4, r2
 8001ca4:	461d      	mov	r5, r3
			- dev->FixedAltitude) ;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fc54 	bl	8000558 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	4620      	mov	r0, r4
 8001cb6:	4629      	mov	r1, r5
 8001cb8:	f7fe faee 	bl	8000298 <__aeabi_dsub>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4610      	mov	r0, r2
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	f7fe ff98 	bl	8000bf8 <__aeabi_d2f>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	ee07 3a90 	vmov	s15, r3

}
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd8:	fd017917 	.word	0xfd017917
 8001cdc:	3fc85ace 	.word	0x3fc85ace
 8001ce0:	9d89d89d 	.word	0x9d89d89d
 8001ce4:	40e5a558 	.word	0x40e5a558
 8001ce8:	47c5e680 	.word	0x47c5e680
 8001cec:	3ff00000 	.word	0x3ff00000

08001cf0 <MS5611_Read_ActVal>:


void MS5611_Read_ActVal(MS5611_HandleTypeDef *dev){
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

	/*! Read raw pressure and temperature MSB | LSB | XLSB values from the sensor*/
	MS5611_ReadRaw_Press_Temp(dev);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff fd05 	bl	8001708 <MS5611_ReadRaw_Press_Temp>

	/*! Calculate 1st order temperature and pressure  according to MS5611 1st order algorithm */
	MS5611_FirstCalculateDatas(dev);
 8001cfe:	6878      	ldr	r0, [r7, #4]
 8001d00:	f7ff fd80 	bl	8001804 <MS5611_FirstCalculateDatas>

	/*! If it's needed, Calculate 2st order temperature and pressure  according to MS5611 2st order algorithm */
	MS5611_SecondCalculateDatas(dev);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fe73 	bl	80019f0 <MS5611_SecondCalculateDatas>

	/*! Vertical Altitude is calculated by using pressure and some coefficients */
	MS5611_Altitude = MS5611_Calc_Altitude(dev);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff9c 	bl	8001c48 <MS5611_Calc_Altitude>
 8001d10:	eef0 7a40 	vmov.f32	s15, s0
 8001d14:	4b24      	ldr	r3, [pc, #144]	@ (8001da8 <MS5611_Read_ActVal+0xb8>)
 8001d16:	edc3 7a00 	vstr	s15, [r3]

	/*! Vertical Speed is calculated by using differential of locations */
	MS5611_Calc_VertSpd(dev, MS5611_Altitude, &MS5611_VertSpeed);
 8001d1a:	4b23      	ldr	r3, [pc, #140]	@ (8001da8 <MS5611_Read_ActVal+0xb8>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	4922      	ldr	r1, [pc, #136]	@ (8001dac <MS5611_Read_ActVal+0xbc>)
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f87a 	bl	8001e20 <MS5611_Calc_VertSpd>

	/*! Vertical acceleration is calculated by using differential of speed */
	MS5611_Calc_VertAcc(dev, MS5611_VertSpeed, &MS5611_VertAcc);
 8001d2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001dac <MS5611_Read_ActVal+0xbc>)
 8001d2e:	edd3 7a00 	vldr	s15, [r3]
 8001d32:	491f      	ldr	r1, [pc, #124]	@ (8001db0 <MS5611_Read_ActVal+0xc0>)
 8001d34:	eeb0 0a67 	vmov.f32	s0, s15
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	f000 f890 	bl	8001e5e <MS5611_Calc_VertAcc>

	/*! It's applied force on to the object that is given mass from the user */
	MS5611_Calc_gForce(dev, &MS5611_gForce, SatCar_Mass, MS5611_VertAcc);
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <MS5611_Read_ActVal+0xc4>)
 8001d40:	edd3 7a00 	vldr	s15, [r3]
 8001d44:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <MS5611_Read_ActVal+0xc0>)
 8001d46:	ed93 7a00 	vldr	s14, [r3]
 8001d4a:	eef0 0a47 	vmov.f32	s1, s14
 8001d4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d52:	4919      	ldr	r1, [pc, #100]	@ (8001db8 <MS5611_Read_ActVal+0xc8>)
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f000 f8a3 	bl	8001ea0 <MS5611_Calc_gForce>

	/*! Pressure unit is mBar and Temperature unit is celcius degress*/
	MS5611_Press = dev->ClcPrms.P/2 ;			//@e.g :
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8001d60:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001d64:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <MS5611_Read_ActVal+0xcc>)
 8001d6a:	edc3 7a00 	vstr	s15, [r3]
	MS5611_Temp  = dev->ClcPrms.TEMP * 0.01; 		//@e.g : 25.57 CelciusDegress
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6a1b      	ldr	r3, [r3, #32]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fbf0 	bl	8000558 <__aeabi_f2d>
 8001d78:	a309      	add	r3, pc, #36	@ (adr r3, 8001da0 <MS5611_Read_ActVal+0xb0>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe fc43 	bl	8000608 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4610      	mov	r0, r2
 8001d88:	4619      	mov	r1, r3
 8001d8a:	f7fe ff35 	bl	8000bf8 <__aeabi_d2f>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc0 <MS5611_Read_ActVal+0xd0>)
 8001d92:	6013      	str	r3, [r2, #0]

}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	f3af 8000 	nop.w
 8001da0:	47ae147b 	.word	0x47ae147b
 8001da4:	3f847ae1 	.word	0x3f847ae1
 8001da8:	20000678 	.word	0x20000678
 8001dac:	2000067c 	.word	0x2000067c
 8001db0:	20000680 	.word	0x20000680
 8001db4:	20000688 	.word	0x20000688
 8001db8:	20000684 	.word	0x20000684
 8001dbc:	20000670 	.word	0x20000670
 8001dc0:	20000674 	.word	0x20000674

08001dc4 <MS5611_ResetRef_DeltaVal>:

void MS5611_ResetRef_DeltaVal(MS5611_HandleTypeDef *dev){
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

	//At the beginning, reset the altitude values for the first and second conditions.
	dev->DeltaData.alt0 = 0.0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	63da      	str	r2, [r3, #60]	@ 0x3c
	dev->DeltaData.alt1 = 0.0;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f04f 0200 	mov.w	r2, #0
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40
	dev->DeltaData.holdAlt = 0.0;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f04f 0200 	mov.w	r2, #0
 8001de2:	645a      	str	r2, [r3, #68]	@ 0x44

	//At the beginning, reset the speed values for the first and second conditions.
	dev->DeltaData.spd0 = 0.0;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	655a      	str	r2, [r3, #84]	@ 0x54
	dev->DeltaData.spd1 = 0.0;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f04f 0200 	mov.w	r2, #0
 8001df2:	659a      	str	r2, [r3, #88]	@ 0x58
	dev->DeltaData.holdSpd = 0.0;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	65da      	str	r2, [r3, #92]	@ 0x5c

	//At the beginning, reset the acceleration values for the first and second conditions.
	dev->DeltaData.acc0 = 0.0;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	649a      	str	r2, [r3, #72]	@ 0x48
	dev->DeltaData.acc1 = 0.0;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f04f 0200 	mov.w	r2, #0
 8001e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
	dev->DeltaData.holdAcc = 0.0;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	651a      	str	r2, [r3, #80]	@ 0x50

}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <MS5611_Calc_VertSpd>:


/*!Vertical Speed is calculated by using differential of locations "V = (X1 - X0) /1 second" */
void MS5611_Calc_VertSpd(MS5611_HandleTypeDef *dev, float MS5611_Altitude, float *MS5611_VertSpeed){
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	60f8      	str	r0, [r7, #12]
 8001e28:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e2c:	6079      	str	r1, [r7, #4]

	dev->DeltaData.alt1 = (MS5611_Altitude);
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	68ba      	ldr	r2, [r7, #8]
 8001e32:	641a      	str	r2, [r3, #64]	@ 0x40
	(*MS5611_VertSpeed) = (dev->DeltaData.alt1 - dev->DeltaData.alt0);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	ed93 7a10 	vldr	s14, [r3, #64]	@ 0x40
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8001e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.alt0 = dev->DeltaData.alt1;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8001e52:	bf00      	nop
 8001e54:	3714      	adds	r7, #20
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <MS5611_Calc_VertAcc>:

/*! Vertical acceleration is calculated by using differential of speed "a = (V1 - V0) / 1 second"  */
void MS5611_Calc_VertAcc(MS5611_HandleTypeDef *dev, float MS5611_VertSpeed,float *MS5611_VertAcc){
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	ed87 0a02 	vstr	s0, [r7, #8]
 8001e6a:	6079      	str	r1, [r7, #4]

	dev->DeltaData.spd1 = (MS5611_VertSpeed);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	659a      	str	r2, [r3, #88]	@ 0x58
	(*MS5611_VertAcc)	= (dev->DeltaData.spd1 - dev->DeltaData.spd0);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	ed93 7a16 	vldr	s14, [r3, #88]	@ 0x58
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	edd3 7a15 	vldr	s15, [r3, #84]	@ 0x54
 8001e7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	edc3 7a00 	vstr	s15, [r3]
	dev->DeltaData.spd0 = dev->DeltaData.spd1;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	655a      	str	r2, [r3, #84]	@ 0x54

}
 8001e90:	bf00      	nop
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9a:	4770      	bx	lr
 8001e9c:	0000      	movs	r0, r0
	...

08001ea0 <MS5611_Calc_gForce>:

/*! It's applied force on to the object that is given mass from the user. =" gForce = ObjectMass * (VerticalAcceleration / 9.80) " */
void MS5611_Calc_gForce(MS5611_HandleTypeDef *dev, float *MS5611_gForce, float SatCar_Mass, float MS5611_VertAcc){
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	ed87 0a01 	vstr	s0, [r7, #4]
 8001eae:	edc7 0a00 	vstr	s1, [r7]

	(*MS5611_gForce) = (((MS5611_VertAcc)/GravityAccel)*(SatCar_Mass));
 8001eb2:	6838      	ldr	r0, [r7, #0]
 8001eb4:	f7fe fb50 	bl	8000558 <__aeabi_f2d>
 8001eb8:	a30f      	add	r3, pc, #60	@ (adr r3, 8001ef8 <MS5611_Calc_gForce+0x58>)
 8001eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebe:	f7fe fccd 	bl	800085c <__aeabi_ddiv>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4614      	mov	r4, r2
 8001ec8:	461d      	mov	r5, r3
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7fe fb44 	bl	8000558 <__aeabi_f2d>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	4629      	mov	r1, r5
 8001ed8:	f7fe fb96 	bl	8000608 <__aeabi_dmul>
 8001edc:	4602      	mov	r2, r0
 8001ede:	460b      	mov	r3, r1
 8001ee0:	4610      	mov	r0, r2
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	f7fe fe88 	bl	8000bf8 <__aeabi_d2f>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	601a      	str	r2, [r3, #0]

}
 8001eee:	bf00      	nop
 8001ef0:	3710      	adds	r7, #16
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	3f141206 	.word	0x3f141206
 8001efc:	40239cc6 	.word	0x40239cc6

08001f00 <SubSys_WirelessCom_Config_WORK_MODE>:
	}

}


void SubSys_WirelessCom_Config_WORK_MODE(SubSys_WirelesscomConfig_HandleTypeDef    *dev){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

	switch(dev->Mode_SW){
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	7ddb      	ldrb	r3, [r3, #23]
 8001f0c:	2b03      	cmp	r3, #3
 8001f0e:	d84f      	bhi.n	8001fb0 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>
 8001f10:	a201      	add	r2, pc, #4	@ (adr r2, 8001f18 <SubSys_WirelessCom_Config_WORK_MODE+0x18>)
 8001f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f16:	bf00      	nop
 8001f18:	08001f29 	.word	0x08001f29
 8001f1c:	08001f4b 	.word	0x08001f4b
 8001f20:	08001f6d 	.word	0x08001f6d
 8001f24:	08001f8f 	.word	0x08001f8f

		case NormalMode :	/*! UART and wireless channel are open, transparent transmission is on*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6858      	ldr	r0, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8b5b      	ldrh	r3, [r3, #26]
 8001f30:	2200      	movs	r2, #0
 8001f32:	4619      	mov	r1, r3
 8001f34:	f002 f97a 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6858      	ldr	r0, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	8b1b      	ldrh	r3, [r3, #24]
 8001f40:	2200      	movs	r2, #0
 8001f42:	4619      	mov	r1, r3
 8001f44:	f002 f972 	bl	800422c <HAL_GPIO_WritePin>
		break;
 8001f48:	e032      	b.n	8001fb0 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORsending :	/*! WOR Transmitter (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_RESET);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6858      	ldr	r0, [r3, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	8b5b      	ldrh	r3, [r3, #26]
 8001f52:	2200      	movs	r2, #0
 8001f54:	4619      	mov	r1, r3
 8001f56:	f002 f969 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6858      	ldr	r0, [r3, #4]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	8b1b      	ldrh	r3, [r3, #24]
 8001f62:	2201      	movs	r2, #1
 8001f64:	4619      	mov	r1, r3
 8001f66:	f002 f961 	bl	800422c <HAL_GPIO_WritePin>
		break;
 8001f6a:	e021      	b.n	8001fb0 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case WORreceiving :	/*! WOR Receiver (it sends packet in every period)*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6858      	ldr	r0, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	8b5b      	ldrh	r3, [r3, #26]
 8001f74:	2201      	movs	r2, #1
 8001f76:	4619      	mov	r1, r3
 8001f78:	f002 f958 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_RESET);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6858      	ldr	r0, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	8b1b      	ldrh	r3, [r3, #24]
 8001f84:	2200      	movs	r2, #0
 8001f86:	4619      	mov	r1, r3
 8001f88:	f002 f950 	bl	800422c <HAL_GPIO_WritePin>
		break;
 8001f8c:	e010      	b.n	8001fb0 <SubSys_WirelessCom_Config_WORK_MODE+0xb0>

		case DeepSleep :	/*! Module goes to sleep so provides you to configure settings*/
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M1, GPIO_PIN_SET);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6858      	ldr	r0, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8b5b      	ldrh	r3, [r3, #26]
 8001f96:	2201      	movs	r2, #1
 8001f98:	4619      	mov	r1, r3
 8001f9a:	f002 f947 	bl	800422c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(dev->interface.GPIOx, dev->LORA_PIN_M0, GPIO_PIN_SET);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6858      	ldr	r0, [r3, #4]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	8b1b      	ldrh	r3, [r3, #24]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	4619      	mov	r1, r3
 8001faa:	f002 f93f 	bl	800422c <HAL_GPIO_WritePin>
		break;
 8001fae:	bf00      	nop

	}

}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <SubSys_WirelessCom_Telemetry_Transfer_From_To>:
  * 																 	  @arg 1 : Sat_Payload
  * 																  	  @arg 2 : Ground_Sation
  * @param SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
  * @retval NONE
  */
void SubSys_WirelessCom_Telemetry_Transfer_From_To(MissionUnit From_X, MissionUnit To_Y, SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8001fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fba:	b087      	sub	sp, #28
 8001fbc:	af02      	add	r7, sp, #8
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	603a      	str	r2, [r7, #0]
 8001fc2:	71fb      	strb	r3, [r7, #7]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	71bb      	strb	r3, [r7, #6]

	/*! Use it when working on Sat_Carrier flight software*/
	if(From_X == Sat_Carrier && To_Y == Sat_Payload){
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d156      	bne.n	800207c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xc4>
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d153      	bne.n	800207c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xc4>

		/*! Create message packet for Carrier for sending to the Payload*/
		SubSys_WirelessCom_Telemetry_Create_Packet_For(Sat_Carrier, dev_WirelessComApp);
 8001fd4:	6839      	ldr	r1, [r7, #0]
 8001fd6:	2001      	movs	r0, #1
 8001fd8:	f000 f85a 	bl	8002090 <SubSys_WirelessCom_Telemetry_Create_Packet_For>
//																															dev_WirelessComApp->Variable.Carr_VertSpeed,
//																															dev_WirelessComApp->Variable.Carr_BatteryVoltage,
//																															dev_WirelessComApp->Variable.Carr_GPS_Latitude,
//																															dev_WirelessComApp->Variable.Carr_GPS_Longitude,
//																															dev_WirelessComApp->Variable.Carr_GPS_Altitude);
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	f103 061e 	add.w	r6, r3, #30
																		"C<%.2f><%.2f>",
																				   dev_WirelessComApp->Variable.Carr_Pressure,
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7fe fab6 	bl	8000558 <__aeabi_f2d>
 8001fec:	4604      	mov	r4, r0
 8001fee:	460d      	mov	r5, r1
																				   dev_WirelessComApp->Variable.Carr_VertHeight);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
				Written_Bytes = sprintf(dev_WirelessComApp->Buffer.Temp,
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe faaf 	bl	8000558 <__aeabi_f2d>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	e9cd 2300 	strd	r2, r3, [sp]
 8002002:	4622      	mov	r2, r4
 8002004:	462b      	mov	r3, r5
 8002006:	491f      	ldr	r1, [pc, #124]	@ (8002084 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xcc>)
 8002008:	4630      	mov	r0, r6
 800200a:	f008 fe9b 	bl	800ad44 <siprintf>
 800200e:	4603      	mov	r3, r0
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd0>)
 8002014:	801a      	strh	r2, [r3, #0]

				for(cnt = 0 ; cnt < Written_Bytes ; cnt++){
 8002016:	4b1d      	ldr	r3, [pc, #116]	@ (800208c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd4>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e010      	b.n	8002040 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x88>

					dev_WirelessComApp->Buffer.Tx[cnt+3] = dev_WirelessComApp->Buffer.Temp[cnt]; /*End of the array has \n character*/
 800201e:	4b1b      	ldr	r3, [pc, #108]	@ (800208c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd4>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	4619      	mov	r1, r3
 8002024:	4b19      	ldr	r3, [pc, #100]	@ (800208c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd4>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	3303      	adds	r3, #3
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	440a      	add	r2, r1
 800202e:	7f91      	ldrb	r1, [r2, #30]
 8002030:	683a      	ldr	r2, [r7, #0]
 8002032:	54d1      	strb	r1, [r2, r3]
				for(cnt = 0 ; cnt < Written_Bytes ; cnt++){
 8002034:	4b15      	ldr	r3, [pc, #84]	@ (800208c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd4>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3301      	adds	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b13      	ldr	r3, [pc, #76]	@ (800208c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd4>)
 800203e:	701a      	strb	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	@ (800208c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd4>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	4b10      	ldr	r3, [pc, #64]	@ (8002088 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd0>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	429a      	cmp	r2, r3
 800204c:	d3e7      	bcc.n	800201e <SubSys_WirelessCom_Telemetry_Transfer_From_To+0x66>

				}

				for(uint8_t j=(cnt+3) ; j < SizeOf_Wireless_TX_Buff_Carrier ; j++){
 800204e:	4b0f      	ldr	r3, [pc, #60]	@ (800208c <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xd4>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	3303      	adds	r3, #3
 8002054:	73fb      	strb	r3, [r7, #15]
 8002056:	e006      	b.n	8002066 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xae>

					dev_WirelessComApp->Buffer.Tx[j] = '*';
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	212a      	movs	r1, #42	@ 0x2a
 800205e:	54d1      	strb	r1, [r2, r3]
				for(uint8_t j=(cnt+3) ; j < SizeOf_Wireless_TX_Buff_Carrier ; j++){
 8002060:	7bfb      	ldrb	r3, [r7, #15]
 8002062:	3301      	adds	r3, #1
 8002064:	73fb      	strb	r3, [r7, #15]
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	2b1d      	cmp	r3, #29
 800206a:	d9f5      	bls.n	8002058 <SubSys_WirelessCom_Telemetry_Transfer_From_To+0xa0>

				}

				//HAL_UART_Transmit(dev_WirelessComApp->huartX, dev_WirelessComApp->Buffer.Tx , (Written_Bytes+3), 1000);
				HAL_UART_Transmit(dev_WirelessComApp->huartX, dev_WirelessComApp->Buffer.Tx , SizeOf_Wireless_TX_Buff_Carrier, 1000);
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	6e18      	ldr	r0, [r3, #96]	@ 0x60
 8002070:	6839      	ldr	r1, [r7, #0]
 8002072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002076:	221e      	movs	r2, #30
 8002078:	f005 ff24 	bl	8007ec4 <HAL_UART_Transmit>
	}

}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002084:	0800fda0 	.word	0x0800fda0
 8002088:	200002e6 	.word	0x200002e6
 800208c:	200002e8 	.word	0x200002e8

08002090 <SubSys_WirelessCom_Telemetry_Create_Packet_For>:
 * 																	   @arg 1 : Sat_Payload
 * 																	   @arg 2 : Ground_Sation
 * @param  : SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp , created object for wireless communication
 * @retval NONE
 */
void SubSys_WirelessCom_Telemetry_Create_Packet_For(MissionUnit x,SubSys_WirelessCom_APP_HandleTypeDef *dev_WirelessComApp){
 8002090:	b480      	push	{r7}
 8002092:	b083      	sub	sp, #12
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	6039      	str	r1, [r7, #0]
 800209a:	71fb      	strb	r3, [r7, #7]

	switch(x){
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d134      	bne.n	800210c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x7c>
		case Sat_Carrier :

			/*-------------TARGET DEVICE ADDRESS AND CHANNEL INFO----------------*/
			/*! Target device will be Satellite's Payload*/
			dev_WirelessComApp->Buffer.Tx[0] = dev_WirelessComApp->Target_ADDH;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f893 206c 	ldrb.w	r2, [r3, #108]	@ 0x6c
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	701a      	strb	r2, [r3, #0]
			dev_WirelessComApp->Buffer.Tx[1] = dev_WirelessComApp->Target_ADDL;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	f893 206d 	ldrb.w	r2, [r3, #109]	@ 0x6d
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	705a      	strb	r2, [r3, #1]
			dev_WirelessComApp->Buffer.Tx[2] = dev_WirelessComApp->Target_Ch;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	f893 206e 	ldrb.w	r2, [r3, #110]	@ 0x6e
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	709a      	strb	r2, [r3, #2]

			/*-------------YOUR DEVICE VARIABLE THAT YOU WİLL SEND----------------*/ /*Note : Will be system variable opposite to variables*/
			/*From MS5611*/
			dev_WirelessComApp->Variable.Carr_Pressure    = MS5611_Press;
 80020c0:	4b15      	ldr	r3, [pc, #84]	@ (8002118 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x88>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	63da      	str	r2, [r3, #60]	@ 0x3c
			dev_WirelessComApp->Variable.Carr_Temperature = MS5611_Temp;
 80020c8:	4b14      	ldr	r3, [pc, #80]	@ (800211c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x8c>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	649a      	str	r2, [r3, #72]	@ 0x48
			dev_WirelessComApp->Variable.Carr_VertHeight  = MS5611_Altitude;
 80020d0:	4b13      	ldr	r3, [pc, #76]	@ (8002120 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x90>)
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	645a      	str	r2, [r3, #68]	@ 0x44
			dev_WirelessComApp->Variable.Carr_VertSpeed   = MS5611_VertSpeed;
 80020d8:	4b12      	ldr	r3, [pc, #72]	@ (8002124 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x94>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	641a      	str	r2, [r3, #64]	@ 0x40

			/*From ADC*/
			dev_WirelessComApp->Variable.Carr_BatteryVoltage = BatteryVoltage;
 80020e0:	4b11      	ldr	r3, [pc, #68]	@ (8002128 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x98>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	64da      	str	r2, [r3, #76]	@ 0x4c

			/*From L-86GPS*/
			dev_WirelessComApp->Variable.Carr_GPS_Latitude  = GPS_Latitude;
 80020e8:	4b10      	ldr	r3, [pc, #64]	@ (800212c <SubSys_WirelessCom_Telemetry_Create_Packet_For+0x9c>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	651a      	str	r2, [r3, #80]	@ 0x50
			dev_WirelessComApp->Variable.Carr_GPS_Longitude = GPS_Longitude;
 80020f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002130 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa0>)
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	655a      	str	r2, [r3, #84]	@ 0x54
			dev_WirelessComApp->Variable.Carr_GPS_Altitude  = GPS_Altitude;
 80020f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002134 <SubSys_WirelessCom_Telemetry_Create_Packet_For+0xa4>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	659a      	str	r2, [r3, #88]	@ 0x58

			/*! Each time a packet is generated, the count will increase by 1*/
			dev_WirelessComApp->Variable.NumOfPacket++;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	65da      	str	r2, [r3, #92]	@ 0x5c

			break;
 800210a:	bf00      	nop

		   }

}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	20000670 	.word	0x20000670
 800211c:	20000674 	.word	0x20000674
 8002120:	20000678 	.word	0x20000678
 8002124:	2000067c 	.word	0x2000067c
 8002128:	20000604 	.word	0x20000604
 800212c:	20000694 	.word	0x20000694
 8002130:	20000690 	.word	0x20000690
 8002134:	2000068c 	.word	0x2000068c

08002138 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002138:	b598      	push	{r3, r4, r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800213c:	f000 feca 	bl	8002ed4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002140:	f000 f85e 	bl	8002200 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002144:	f000 fa40 	bl	80025c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002148:	f000 fa0e 	bl	8002568 <MX_DMA_Init>
  MX_ADC1_Init();
 800214c:	f000 f8c0 	bl	80022d0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8002150:	f000 f9b6 	bl	80024c0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002154:	f000 f90e 	bl	8002374 <MX_I2C1_Init>
  MX_TIM3_Init();
 8002158:	f000 f95a 	bl	8002410 <MX_TIM3_Init>
  MX_SDIO_SD_Init();
 800215c:	f000 f938 	bl	80023d0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8002160:	f007 fc2a 	bl	80099b8 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 8002164:	f000 f9d6 	bl	8002514 <MX_USART2_UART_Init>
/******<<< SENSOR BATTERY INIT END <<<******/


/******>>> SENSOR TPGVH INITIALIZATION BEGIN >>>******/
	#ifdef SAT_CARRIER_SUBSYS_DRIVERS_SENSOR_TPGVH_H
	MS5611.I2C_ADDRESS = MS5611_I2C_ADDRESS_H;
 8002168:	4b1f      	ldr	r3, [pc, #124]	@ (80021e8 <main+0xb0>)
 800216a:	22ee      	movs	r2, #238	@ 0xee
 800216c:	809a      	strh	r2, [r3, #4]
	MS5611.i2c = &hi2c1;
 800216e:	4b1e      	ldr	r3, [pc, #120]	@ (80021e8 <main+0xb0>)
 8002170:	4a1e      	ldr	r2, [pc, #120]	@ (80021ec <main+0xb4>)
 8002172:	601a      	str	r2, [r3, #0]
	MS5611.Ref_Alt_Sel = 'm';
 8002174:	4b1c      	ldr	r3, [pc, #112]	@ (80021e8 <main+0xb0>)
 8002176:	226d      	movs	r2, #109	@ 0x6d
 8002178:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
	MS5611_Init(&MS5611);
 800217c:	481a      	ldr	r0, [pc, #104]	@ (80021e8 <main+0xb0>)
 800217e:	f7ff f913 	bl	80013a8 <MS5611_Init>
	 #endif

	 #ifdef SAT_CARRIER_SUBSYS_DRIVERS_WIRELESSCOMMUNICATION_TELEMETRY_H

	 /*! Will be filled for your dev that use now*/
	 dev_WirelessComApp.huartX = &huart1;
 8002182:	4b1b      	ldr	r3, [pc, #108]	@ (80021f0 <main+0xb8>)
 8002184:	4a1b      	ldr	r2, [pc, #108]	@ (80021f4 <main+0xbc>)
 8002186:	661a      	str	r2, [r3, #96]	@ 0x60
	 dev_WirelessComConfig.Mode_SW = NormalMode; 		/*! UART and wireless channel are open, transparent transmission is on*/
 8002188:	4b1b      	ldr	r3, [pc, #108]	@ (80021f8 <main+0xc0>)
 800218a:	2200      	movs	r2, #0
 800218c:	75da      	strb	r2, [r3, #23]
	 SubSys_WirelessCom_Config_WORK_MODE(&dev_WirelessComConfig);
 800218e:	481a      	ldr	r0, [pc, #104]	@ (80021f8 <main+0xc0>)
 8002190:	f7ff feb6 	bl	8001f00 <SubSys_WirelessCom_Config_WORK_MODE>

	 /*! Will be filled for the PAYLOAD(Target) Device */
	 dev_WirelessComApp.Target_ADDH = 0x14;
 8002194:	4b16      	ldr	r3, [pc, #88]	@ (80021f0 <main+0xb8>)
 8002196:	2214      	movs	r2, #20
 8002198:	f883 206c 	strb.w	r2, [r3, #108]	@ 0x6c
	 dev_WirelessComApp.Target_ADDL = 0x53;
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <main+0xb8>)
 800219e:	2253      	movs	r2, #83	@ 0x53
 80021a0:	f883 206d 	strb.w	r2, [r3, #109]	@ 0x6d
	 dev_WirelessComApp.Target_Ch   = 0x05;
 80021a4:	4b12      	ldr	r3, [pc, #72]	@ (80021f0 <main+0xb8>)
 80021a6:	2205      	movs	r2, #5
 80021a8:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	   /*! At the beginning of each loop, the system retrieves the last recorded milliseconds */
	   SystemTick = HAL_GetTick();
 80021ac:	f000 fef8 	bl	8002fa0 <HAL_GetTick>
 80021b0:	4603      	mov	r3, r0
 80021b2:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <main+0xc4>)
 80021b4:	6013      	str	r3, [r2, #0]
	   * (P) = Pressure
	   * (G) = G force
	   * (V) = Vertical Speed
	   * (H) = Vertical Height
	   **/
	   MS5611_Read_ActVal(&MS5611);
 80021b6:	480c      	ldr	r0, [pc, #48]	@ (80021e8 <main+0xb0>)
 80021b8:	f7ff fd9a 	bl	8001cf0 <MS5611_Read_ActVal>
//																							  GPS_Altitude);
//				  HAL_UART_Transmit(&huart1, TelemetryData, WrittenBytes, 1000);


	   /*! Transfer all necessary datas from Carrier to Payload of Satellite*/
	   SubSys_WirelessCom_Telemetry_Transfer_From_To(Sat_Carrier, Sat_Payload, &dev_WirelessComApp);
 80021bc:	4a0c      	ldr	r2, [pc, #48]	@ (80021f0 <main+0xb8>)
 80021be:	2102      	movs	r1, #2
 80021c0:	2001      	movs	r0, #1
 80021c2:	f7ff fef9 	bl	8001fb8 <SubSys_WirelessCom_Telemetry_Transfer_From_To>


	   /*! The system time is retrieved again and the loop waits until the elapsed time reaches 1000 milliseconds*/
	   HAL_Delay(abs(1000 - (HAL_GetTick()-SystemTick)));
 80021c6:	4b0d      	ldr	r3, [pc, #52]	@ (80021fc <main+0xc4>)
 80021c8:	681c      	ldr	r4, [r3, #0]
 80021ca:	f000 fee9 	bl	8002fa0 <HAL_GetTick>
 80021ce:	4603      	mov	r3, r0
 80021d0:	1ae3      	subs	r3, r4, r3
 80021d2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	bfb8      	it	lt
 80021da:	425b      	neglt	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	f000 feeb 	bl	8002fb8 <HAL_Delay>
	   SystemTick = HAL_GetTick();
 80021e2:	bf00      	nop
 80021e4:	e7e2      	b.n	80021ac <main+0x74>
 80021e6:	bf00      	nop
 80021e8:	20000608 	.word	0x20000608
 80021ec:	20000334 	.word	0x20000334
 80021f0:	200006bc 	.word	0x200006bc
 80021f4:	20000514 	.word	0x20000514
 80021f8:	20000698 	.word	0x20000698
 80021fc:	2000072c 	.word	0x2000072c

08002200 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b094      	sub	sp, #80	@ 0x50
 8002204:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002206:	f107 0320 	add.w	r3, r7, #32
 800220a:	2230      	movs	r2, #48	@ 0x30
 800220c:	2100      	movs	r1, #0
 800220e:	4618      	mov	r0, r3
 8002210:	f008 fe27 	bl	800ae62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002214:	f107 030c 	add.w	r3, r7, #12
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	605a      	str	r2, [r3, #4]
 800221e:	609a      	str	r2, [r3, #8]
 8002220:	60da      	str	r2, [r3, #12]
 8002222:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	2300      	movs	r3, #0
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	4b27      	ldr	r3, [pc, #156]	@ (80022c8 <SystemClock_Config+0xc8>)
 800222a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222c:	4a26      	ldr	r2, [pc, #152]	@ (80022c8 <SystemClock_Config+0xc8>)
 800222e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002232:	6413      	str	r3, [r2, #64]	@ 0x40
 8002234:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <SystemClock_Config+0xc8>)
 8002236:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002238:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223c:	60bb      	str	r3, [r7, #8]
 800223e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002240:	2300      	movs	r3, #0
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	4b21      	ldr	r3, [pc, #132]	@ (80022cc <SystemClock_Config+0xcc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a20      	ldr	r2, [pc, #128]	@ (80022cc <SystemClock_Config+0xcc>)
 800224a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800224e:	6013      	str	r3, [r2, #0]
 8002250:	4b1e      	ldr	r3, [pc, #120]	@ (80022cc <SystemClock_Config+0xcc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002258:	607b      	str	r3, [r7, #4]
 800225a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800225c:	2302      	movs	r3, #2
 800225e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002260:	2301      	movs	r3, #1
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002264:	2310      	movs	r3, #16
 8002266:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002268:	2302      	movs	r3, #2
 800226a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800226c:	2300      	movs	r3, #0
 800226e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002270:	2308      	movs	r3, #8
 8002272:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002274:	2332      	movs	r3, #50	@ 0x32
 8002276:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002278:	2302      	movs	r3, #2
 800227a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800227c:	2304      	movs	r3, #4
 800227e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002280:	f107 0320 	add.w	r3, r7, #32
 8002284:	4618      	mov	r0, r3
 8002286:	f003 faa3 	bl	80057d0 <HAL_RCC_OscConfig>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002290:	f000 f9f6 	bl	8002680 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002294:	230f      	movs	r3, #15
 8002296:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002298:	2302      	movs	r3, #2
 800229a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800229c:	2300      	movs	r3, #0
 800229e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2101      	movs	r1, #1
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 fd06 	bl	8005cc0 <HAL_RCC_ClockConfig>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80022ba:	f000 f9e1 	bl	8002680 <Error_Handler>
  }
}
 80022be:	bf00      	nop
 80022c0:	3750      	adds	r7, #80	@ 0x50
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40007000 	.word	0x40007000

080022d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022d6:	463b      	mov	r3, r7
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	605a      	str	r2, [r3, #4]
 80022de:	609a      	str	r2, [r3, #8]
 80022e0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80022e2:	4b21      	ldr	r3, [pc, #132]	@ (8002368 <MX_ADC1_Init+0x98>)
 80022e4:	4a21      	ldr	r2, [pc, #132]	@ (800236c <MX_ADC1_Init+0x9c>)
 80022e6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80022e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002368 <MX_ADC1_Init+0x98>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80022ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002368 <MX_ADC1_Init+0x98>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80022f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002368 <MX_ADC1_Init+0x98>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80022fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002368 <MX_ADC1_Init+0x98>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002300:	4b19      	ldr	r3, [pc, #100]	@ (8002368 <MX_ADC1_Init+0x98>)
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002308:	4b17      	ldr	r3, [pc, #92]	@ (8002368 <MX_ADC1_Init+0x98>)
 800230a:	2200      	movs	r2, #0
 800230c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800230e:	4b16      	ldr	r3, [pc, #88]	@ (8002368 <MX_ADC1_Init+0x98>)
 8002310:	4a17      	ldr	r2, [pc, #92]	@ (8002370 <MX_ADC1_Init+0xa0>)
 8002312:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002314:	4b14      	ldr	r3, [pc, #80]	@ (8002368 <MX_ADC1_Init+0x98>)
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800231a:	4b13      	ldr	r3, [pc, #76]	@ (8002368 <MX_ADC1_Init+0x98>)
 800231c:	2201      	movs	r2, #1
 800231e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002320:	4b11      	ldr	r3, [pc, #68]	@ (8002368 <MX_ADC1_Init+0x98>)
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002328:	4b0f      	ldr	r3, [pc, #60]	@ (8002368 <MX_ADC1_Init+0x98>)
 800232a:	2201      	movs	r2, #1
 800232c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800232e:	480e      	ldr	r0, [pc, #56]	@ (8002368 <MX_ADC1_Init+0x98>)
 8002330:	f000 fe66 	bl	8003000 <HAL_ADC_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800233a:	f000 f9a1 	bl	8002680 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800233e:	2300      	movs	r3, #0
 8002340:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002342:	2301      	movs	r3, #1
 8002344:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800234a:	463b      	mov	r3, r7
 800234c:	4619      	mov	r1, r3
 800234e:	4806      	ldr	r0, [pc, #24]	@ (8002368 <MX_ADC1_Init+0x98>)
 8002350:	f000 fe9a 	bl	8003088 <HAL_ADC_ConfigChannel>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800235a:	f000 f991 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200002ec 	.word	0x200002ec
 800236c:	40012000 	.word	0x40012000
 8002370:	0f000001 	.word	0x0f000001

08002374 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <MX_I2C1_Init+0x50>)
 800237a:	4a13      	ldr	r2, [pc, #76]	@ (80023c8 <MX_I2C1_Init+0x54>)
 800237c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800237e:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <MX_I2C1_Init+0x50>)
 8002380:	4a12      	ldr	r2, [pc, #72]	@ (80023cc <MX_I2C1_Init+0x58>)
 8002382:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002384:	4b0f      	ldr	r3, [pc, #60]	@ (80023c4 <MX_I2C1_Init+0x50>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800238a:	4b0e      	ldr	r3, [pc, #56]	@ (80023c4 <MX_I2C1_Init+0x50>)
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <MX_I2C1_Init+0x50>)
 8002392:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002396:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002398:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <MX_I2C1_Init+0x50>)
 800239a:	2200      	movs	r2, #0
 800239c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800239e:	4b09      	ldr	r3, [pc, #36]	@ (80023c4 <MX_I2C1_Init+0x50>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80023a4:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <MX_I2C1_Init+0x50>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80023aa:	4b06      	ldr	r3, [pc, #24]	@ (80023c4 <MX_I2C1_Init+0x50>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80023b0:	4804      	ldr	r0, [pc, #16]	@ (80023c4 <MX_I2C1_Init+0x50>)
 80023b2:	f001 ff55 	bl	8004260 <HAL_I2C_Init>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80023bc:	f000 f960 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	20000334 	.word	0x20000334
 80023c8:	40005400 	.word	0x40005400
 80023cc:	000186a0 	.word	0x000186a0

080023d0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <MX_SDIO_SD_Init+0x38>)
 80023d6:	4a0d      	ldr	r2, [pc, #52]	@ (800240c <MX_SDIO_SD_Init+0x3c>)
 80023d8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80023da:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <MX_SDIO_SD_Init+0x38>)
 80023dc:	2200      	movs	r2, #0
 80023de:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80023e0:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <MX_SDIO_SD_Init+0x38>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80023e6:	4b08      	ldr	r3, [pc, #32]	@ (8002408 <MX_SDIO_SD_Init+0x38>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <MX_SDIO_SD_Init+0x38>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80023f2:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <MX_SDIO_SD_Init+0x38>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80023f8:	4b03      	ldr	r3, [pc, #12]	@ (8002408 <MX_SDIO_SD_Init+0x38>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80023fe:	bf00      	nop
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	20000388 	.word	0x20000388
 800240c:	40012c00 	.word	0x40012c00

08002410 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	@ 0x28
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002416:	f107 0320 	add.w	r3, r7, #32
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]
 800241e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002420:	1d3b      	adds	r3, r7, #4
 8002422:	2200      	movs	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	609a      	str	r2, [r3, #8]
 800242a:	60da      	str	r2, [r3, #12]
 800242c:	611a      	str	r2, [r3, #16]
 800242e:	615a      	str	r2, [r3, #20]
 8002430:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002432:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 8002434:	4a21      	ldr	r2, [pc, #132]	@ (80024bc <MX_TIM3_Init+0xac>)
 8002436:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 183-1;
 8002438:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 800243a:	22b6      	movs	r2, #182	@ 0xb6
 800243c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 8002444:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 8002446:	2263      	movs	r2, #99	@ 0x63
 8002448:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244a:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 800244c:	2200      	movs	r2, #0
 800244e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002450:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 8002452:	2200      	movs	r2, #0
 8002454:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002456:	4818      	ldr	r0, [pc, #96]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 8002458:	f005 f94c 	bl	80076f4 <HAL_TIM_PWM_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8002462:	f000 f90d 	bl	8002680 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002466:	2300      	movs	r3, #0
 8002468:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800246e:	f107 0320 	add.w	r3, r7, #32
 8002472:	4619      	mov	r1, r3
 8002474:	4810      	ldr	r0, [pc, #64]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 8002476:	f005 fc67 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d001      	beq.n	8002484 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 8002480:	f000 f8fe 	bl	8002680 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002484:	2360      	movs	r3, #96	@ 0x60
 8002486:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800248c:	2300      	movs	r3, #0
 800248e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2200      	movs	r2, #0
 8002498:	4619      	mov	r1, r3
 800249a:	4807      	ldr	r0, [pc, #28]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 800249c:	f005 f97a 	bl	8007794 <HAL_TIM_PWM_ConfigChannel>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80024a6:	f000 f8eb 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80024aa:	4803      	ldr	r0, [pc, #12]	@ (80024b8 <MX_TIM3_Init+0xa8>)
 80024ac:	f000 fab4 	bl	8002a18 <HAL_TIM_MspPostInit>

}
 80024b0:	bf00      	nop
 80024b2:	3728      	adds	r7, #40	@ 0x28
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	200004cc 	.word	0x200004cc
 80024bc:	40000400 	.word	0x40000400

080024c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024c6:	4a12      	ldr	r2, [pc, #72]	@ (8002510 <MX_USART1_UART_Init+0x50>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80024ca:	4b10      	ldr	r3, [pc, #64]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b0e      	ldr	r3, [pc, #56]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0c      	ldr	r3, [pc, #48]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0b      	ldr	r3, [pc, #44]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b09      	ldr	r3, [pc, #36]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b08      	ldr	r3, [pc, #32]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b06      	ldr	r3, [pc, #24]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <MX_USART1_UART_Init+0x4c>)
 80024f8:	f005 fc94 	bl	8007e24 <HAL_UART_Init>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002502:	f000 f8bd 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002506:	bf00      	nop
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	20000514 	.word	0x20000514
 8002510:	40011000 	.word	0x40011000

08002514 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002518:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 800251a:	4a12      	ldr	r2, [pc, #72]	@ (8002564 <MX_USART2_UART_Init+0x50>)
 800251c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800251e:	4b10      	ldr	r3, [pc, #64]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 8002520:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002524:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002526:	4b0e      	ldr	r3, [pc, #56]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 8002528:	2200      	movs	r2, #0
 800252a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800252c:	4b0c      	ldr	r3, [pc, #48]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002532:	4b0b      	ldr	r3, [pc, #44]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 8002534:	2200      	movs	r2, #0
 8002536:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002538:	4b09      	ldr	r3, [pc, #36]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 800253a:	220c      	movs	r2, #12
 800253c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800253e:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 8002540:	2200      	movs	r2, #0
 8002542:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002544:	4b06      	ldr	r3, [pc, #24]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800254a:	4805      	ldr	r0, [pc, #20]	@ (8002560 <MX_USART2_UART_Init+0x4c>)
 800254c:	f005 fc6a 	bl	8007e24 <HAL_UART_Init>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d001      	beq.n	800255a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002556:	f000 f893 	bl	8002680 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800255a:	bf00      	nop
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	2000055c 	.word	0x2000055c
 8002564:	40004400 	.word	0x40004400

08002568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	607b      	str	r3, [r7, #4]
 8002572:	4b14      	ldr	r3, [pc, #80]	@ (80025c4 <MX_DMA_Init+0x5c>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002576:	4a13      	ldr	r2, [pc, #76]	@ (80025c4 <MX_DMA_Init+0x5c>)
 8002578:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800257c:	6313      	str	r3, [r2, #48]	@ 0x30
 800257e:	4b11      	ldr	r3, [pc, #68]	@ (80025c4 <MX_DMA_Init+0x5c>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002586:	607b      	str	r3, [r7, #4]
 8002588:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800258a:	2200      	movs	r2, #0
 800258c:	2100      	movs	r1, #0
 800258e:	203b      	movs	r0, #59	@ 0x3b
 8002590:	f001 f883 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002594:	203b      	movs	r0, #59	@ 0x3b
 8002596:	f001 f89c 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800259a:	2200      	movs	r2, #0
 800259c:	2100      	movs	r1, #0
 800259e:	2045      	movs	r0, #69	@ 0x45
 80025a0:	f001 f87b 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80025a4:	2045      	movs	r0, #69	@ 0x45
 80025a6:	f001 f894 	bl	80036d2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 80025aa:	2200      	movs	r2, #0
 80025ac:	2100      	movs	r1, #0
 80025ae:	2046      	movs	r0, #70	@ 0x46
 80025b0:	f001 f873 	bl	800369a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80025b4:	2046      	movs	r0, #70	@ 0x46
 80025b6:	f001 f88c 	bl	80036d2 <HAL_NVIC_EnableIRQ>

}
 80025ba:	bf00      	nop
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800

080025c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ce:	f107 030c 	add.w	r3, r7, #12
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	60da      	str	r2, [r3, #12]
 80025dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	60bb      	str	r3, [r7, #8]
 80025e2:	4b24      	ldr	r3, [pc, #144]	@ (8002674 <MX_GPIO_Init+0xac>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e6:	4a23      	ldr	r2, [pc, #140]	@ (8002674 <MX_GPIO_Init+0xac>)
 80025e8:	f043 0301 	orr.w	r3, r3, #1
 80025ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ee:	4b21      	ldr	r3, [pc, #132]	@ (8002674 <MX_GPIO_Init+0xac>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	60bb      	str	r3, [r7, #8]
 80025f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	4b1d      	ldr	r3, [pc, #116]	@ (8002674 <MX_GPIO_Init+0xac>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a1c      	ldr	r2, [pc, #112]	@ (8002674 <MX_GPIO_Init+0xac>)
 8002604:	f043 0302 	orr.w	r3, r3, #2
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b1a      	ldr	r3, [pc, #104]	@ (8002674 <MX_GPIO_Init+0xac>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	607b      	str	r3, [r7, #4]
 8002614:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 41e0 	mov.w	r1, #28672	@ 0x7000
 800261c:	4816      	ldr	r0, [pc, #88]	@ (8002678 <MX_GPIO_Init+0xb0>)
 800261e:	f001 fe05 	bl	800422c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002628:	4814      	ldr	r0, [pc, #80]	@ (800267c <MX_GPIO_Init+0xb4>)
 800262a:	f001 fdff 	bl	800422c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800262e:	f44f 43e0 	mov.w	r3, #28672	@ 0x7000
 8002632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	4619      	mov	r1, r3
 8002646:	480c      	ldr	r0, [pc, #48]	@ (8002678 <MX_GPIO_Init+0xb0>)
 8002648:	f001 fc6c 	bl	8003f24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800264c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002652:	2301      	movs	r3, #1
 8002654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265a:	2300      	movs	r3, #0
 800265c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	4619      	mov	r1, r3
 8002664:	4805      	ldr	r0, [pc, #20]	@ (800267c <MX_GPIO_Init+0xb4>)
 8002666:	f001 fc5d 	bl	8003f24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800266a:	bf00      	nop
 800266c:	3720      	adds	r7, #32
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40020400 	.word	0x40020400
 800267c:	40020000 	.word	0x40020000

08002680 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002684:	b672      	cpsid	i
}
 8002686:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002688:	bf00      	nop
 800268a:	e7fd      	b.n	8002688 <Error_Handler+0x8>

0800268c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	607b      	str	r3, [r7, #4]
 8002696:	4b10      	ldr	r3, [pc, #64]	@ (80026d8 <HAL_MspInit+0x4c>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	4a0f      	ldr	r2, [pc, #60]	@ (80026d8 <HAL_MspInit+0x4c>)
 800269c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80026a2:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <HAL_MspInit+0x4c>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026aa:	607b      	str	r3, [r7, #4]
 80026ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4b09      	ldr	r3, [pc, #36]	@ (80026d8 <HAL_MspInit+0x4c>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	4a08      	ldr	r2, [pc, #32]	@ (80026d8 <HAL_MspInit+0x4c>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80026be:	4b06      	ldr	r3, [pc, #24]	@ (80026d8 <HAL_MspInit+0x4c>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	40023800 	.word	0x40023800

080026dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b08a      	sub	sp, #40	@ 0x28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026e4:	f107 0314 	add.w	r3, r7, #20
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a17      	ldr	r2, [pc, #92]	@ (8002758 <HAL_ADC_MspInit+0x7c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d127      	bne.n	800274e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	613b      	str	r3, [r7, #16]
 8002702:	4b16      	ldr	r3, [pc, #88]	@ (800275c <HAL_ADC_MspInit+0x80>)
 8002704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002706:	4a15      	ldr	r2, [pc, #84]	@ (800275c <HAL_ADC_MspInit+0x80>)
 8002708:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800270c:	6453      	str	r3, [r2, #68]	@ 0x44
 800270e:	4b13      	ldr	r3, [pc, #76]	@ (800275c <HAL_ADC_MspInit+0x80>)
 8002710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002712:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800271a:	2300      	movs	r3, #0
 800271c:	60fb      	str	r3, [r7, #12]
 800271e:	4b0f      	ldr	r3, [pc, #60]	@ (800275c <HAL_ADC_MspInit+0x80>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	4a0e      	ldr	r2, [pc, #56]	@ (800275c <HAL_ADC_MspInit+0x80>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6313      	str	r3, [r2, #48]	@ 0x30
 800272a:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <HAL_ADC_MspInit+0x80>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	60fb      	str	r3, [r7, #12]
 8002734:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002736:	2301      	movs	r3, #1
 8002738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800273a:	2303      	movs	r3, #3
 800273c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4619      	mov	r1, r3
 8002748:	4805      	ldr	r0, [pc, #20]	@ (8002760 <HAL_ADC_MspInit+0x84>)
 800274a:	f001 fbeb 	bl	8003f24 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800274e:	bf00      	nop
 8002750:	3728      	adds	r7, #40	@ 0x28
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40012000 	.word	0x40012000
 800275c:	40023800 	.word	0x40023800
 8002760:	40020000 	.word	0x40020000

08002764 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08a      	sub	sp, #40	@ 0x28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0314 	add.w	r3, r7, #20
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a19      	ldr	r2, [pc, #100]	@ (80027e8 <HAL_I2C_MspInit+0x84>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d12c      	bne.n	80027e0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	4b18      	ldr	r3, [pc, #96]	@ (80027ec <HAL_I2C_MspInit+0x88>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278e:	4a17      	ldr	r2, [pc, #92]	@ (80027ec <HAL_I2C_MspInit+0x88>)
 8002790:	f043 0302 	orr.w	r3, r3, #2
 8002794:	6313      	str	r3, [r2, #48]	@ 0x30
 8002796:	4b15      	ldr	r3, [pc, #84]	@ (80027ec <HAL_I2C_MspInit+0x88>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80027a2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027a8:	2312      	movs	r3, #18
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ac:	2300      	movs	r3, #0
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027b4:	2304      	movs	r3, #4
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	480c      	ldr	r0, [pc, #48]	@ (80027f0 <HAL_I2C_MspInit+0x8c>)
 80027c0:	f001 fbb0 	bl	8003f24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c4:	2300      	movs	r3, #0
 80027c6:	60fb      	str	r3, [r7, #12]
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <HAL_I2C_MspInit+0x88>)
 80027ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027cc:	4a07      	ldr	r2, [pc, #28]	@ (80027ec <HAL_I2C_MspInit+0x88>)
 80027ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80027d4:	4b05      	ldr	r3, [pc, #20]	@ (80027ec <HAL_I2C_MspInit+0x88>)
 80027d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80027e0:	bf00      	nop
 80027e2:	3728      	adds	r7, #40	@ 0x28
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40005400 	.word	0x40005400
 80027ec:	40023800 	.word	0x40023800
 80027f0:	40020400 	.word	0x40020400

080027f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	@ 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027fc:	f107 0314 	add.w	r3, r7, #20
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	605a      	str	r2, [r3, #4]
 8002806:	609a      	str	r2, [r3, #8]
 8002808:	60da      	str	r2, [r3, #12]
 800280a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a68      	ldr	r2, [pc, #416]	@ (80029b4 <HAL_SD_MspInit+0x1c0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	f040 80ca 	bne.w	80029ac <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002818:	2300      	movs	r3, #0
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	4b66      	ldr	r3, [pc, #408]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 800281e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002820:	4a65      	ldr	r2, [pc, #404]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 8002822:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002826:	6453      	str	r3, [r2, #68]	@ 0x44
 8002828:	4b63      	ldr	r3, [pc, #396]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 800282a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002830:	613b      	str	r3, [r7, #16]
 8002832:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002834:	2300      	movs	r3, #0
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	4b5f      	ldr	r3, [pc, #380]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283c:	4a5e      	ldr	r2, [pc, #376]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	6313      	str	r3, [r2, #48]	@ 0x30
 8002844:	4b5c      	ldr	r3, [pc, #368]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 8002846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	60fb      	str	r3, [r7, #12]
 800284e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	4b58      	ldr	r3, [pc, #352]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	4a57      	ldr	r2, [pc, #348]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 800285a:	f043 0302 	orr.w	r3, r3, #2
 800285e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002860:	4b55      	ldr	r3, [pc, #340]	@ (80029b8 <HAL_SD_MspInit+0x1c4>)
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 800286c:	f44f 7350 	mov.w	r3, #832	@ 0x340
 8002870:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002872:	2302      	movs	r3, #2
 8002874:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800287a:	2303      	movs	r3, #3
 800287c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800287e:	230c      	movs	r3, #12
 8002880:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002882:	f107 0314 	add.w	r3, r7, #20
 8002886:	4619      	mov	r1, r3
 8002888:	484c      	ldr	r0, [pc, #304]	@ (80029bc <HAL_SD_MspInit+0x1c8>)
 800288a:	f001 fb4b 	bl	8003f24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 800288e:	f248 03a0 	movw	r3, #32928	@ 0x80a0
 8002892:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002894:	2302      	movs	r3, #2
 8002896:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80028a0:	230c      	movs	r3, #12
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	4845      	ldr	r0, [pc, #276]	@ (80029c0 <HAL_SD_MspInit+0x1cc>)
 80028ac:	f001 fb3a 	bl	8003f24 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 80028b0:	4b44      	ldr	r3, [pc, #272]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028b2:	4a45      	ldr	r2, [pc, #276]	@ (80029c8 <HAL_SD_MspInit+0x1d4>)
 80028b4:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 80028b6:	4b43      	ldr	r3, [pc, #268]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028b8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028bc:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028be:	4b41      	ldr	r3, [pc, #260]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028c0:	2240      	movs	r2, #64	@ 0x40
 80028c2:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c4:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028c6:	2200      	movs	r2, #0
 80028c8:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ca:	4b3e      	ldr	r3, [pc, #248]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028d0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028d2:	4b3c      	ldr	r3, [pc, #240]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80028d8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028da:	4b3a      	ldr	r3, [pc, #232]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 80028e2:	4b38      	ldr	r3, [pc, #224]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028e4:	2220      	movs	r2, #32
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b36      	ldr	r3, [pc, #216]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80028ee:	4b35      	ldr	r3, [pc, #212]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028f0:	2204      	movs	r2, #4
 80028f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80028f4:	4b33      	ldr	r3, [pc, #204]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028f6:	2203      	movs	r2, #3
 80028f8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 80028fa:	4b32      	ldr	r3, [pc, #200]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 80028fc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002900:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002902:	4b30      	ldr	r3, [pc, #192]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 8002904:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002908:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 800290a:	482e      	ldr	r0, [pc, #184]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 800290c:	f000 fefc 	bl	8003708 <HAL_DMA_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8002916:	f7ff feb3 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a29      	ldr	r2, [pc, #164]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 800291e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002920:	4a28      	ldr	r2, [pc, #160]	@ (80029c4 <HAL_SD_MspInit+0x1d0>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002928:	4a29      	ldr	r2, [pc, #164]	@ (80029d0 <HAL_SD_MspInit+0x1dc>)
 800292a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 800292c:	4b27      	ldr	r3, [pc, #156]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 800292e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002932:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002934:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002936:	2200      	movs	r2, #0
 8002938:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800293a:	4b24      	ldr	r3, [pc, #144]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 800293c:	2200      	movs	r2, #0
 800293e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002940:	4b22      	ldr	r3, [pc, #136]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002946:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002948:	4b20      	ldr	r3, [pc, #128]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 800294a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800294e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002950:	4b1e      	ldr	r3, [pc, #120]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002956:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002958:	4b1c      	ldr	r3, [pc, #112]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 800295a:	2220      	movs	r2, #32
 800295c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800295e:	4b1b      	ldr	r3, [pc, #108]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002960:	2200      	movs	r2, #0
 8002962:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002964:	4b19      	ldr	r3, [pc, #100]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002966:	2204      	movs	r2, #4
 8002968:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800296a:	4b18      	ldr	r3, [pc, #96]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 800296c:	2203      	movs	r2, #3
 800296e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002970:	4b16      	ldr	r3, [pc, #88]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002972:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002976:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002978:	4b14      	ldr	r3, [pc, #80]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 800297a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800297e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002980:	4812      	ldr	r0, [pc, #72]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002982:	f000 fec1 	bl	8003708 <HAL_DMA_Init>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 800298c:	f7ff fe78 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4a0e      	ldr	r2, [pc, #56]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002994:	641a      	str	r2, [r3, #64]	@ 0x40
 8002996:	4a0d      	ldr	r2, [pc, #52]	@ (80029cc <HAL_SD_MspInit+0x1d8>)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	2031      	movs	r0, #49	@ 0x31
 80029a2:	f000 fe7a 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80029a6:	2031      	movs	r0, #49	@ 0x31
 80029a8:	f000 fe93 	bl	80036d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 80029ac:	bf00      	nop
 80029ae:	3728      	adds	r7, #40	@ 0x28
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40012c00 	.word	0x40012c00
 80029b8:	40023800 	.word	0x40023800
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020400 	.word	0x40020400
 80029c4:	2000040c 	.word	0x2000040c
 80029c8:	40026458 	.word	0x40026458
 80029cc:	2000046c 	.word	0x2000046c
 80029d0:	400264a0 	.word	0x400264a0

080029d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002a10 <HAL_TIM_PWM_MspInit+0x3c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d10d      	bne.n	8002a02 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x40>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a09      	ldr	r2, [pc, #36]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x40>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b07      	ldr	r3, [pc, #28]	@ (8002a14 <HAL_TIM_PWM_MspInit+0x40>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40023800 	.word	0x40023800

08002a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b088      	sub	sp, #32
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a20:	f107 030c 	add.w	r3, r7, #12
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
 8002a2c:	60da      	str	r2, [r3, #12]
 8002a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a12      	ldr	r2, [pc, #72]	@ (8002a80 <HAL_TIM_MspPostInit+0x68>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d11d      	bne.n	8002a76 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	60bb      	str	r3, [r7, #8]
 8002a3e:	4b11      	ldr	r3, [pc, #68]	@ (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a42:	4a10      	ldr	r2, [pc, #64]	@ (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a44:	f043 0302 	orr.w	r3, r3, #2
 8002a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a84 <HAL_TIM_MspPostInit+0x6c>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	60bb      	str	r3, [r7, #8]
 8002a54:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002a56:	2310      	movs	r3, #16
 8002a58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	f107 030c 	add.w	r3, r7, #12
 8002a6e:	4619      	mov	r1, r3
 8002a70:	4805      	ldr	r0, [pc, #20]	@ (8002a88 <HAL_TIM_MspPostInit+0x70>)
 8002a72:	f001 fa57 	bl	8003f24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	3720      	adds	r7, #32
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40000400 	.word	0x40000400
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020400 	.word	0x40020400

08002a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b08c      	sub	sp, #48	@ 0x30
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a94:	f107 031c 	add.w	r3, r7, #28
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
 8002aa2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a52      	ldr	r2, [pc, #328]	@ (8002bf4 <HAL_UART_MspInit+0x168>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d165      	bne.n	8002b7a <HAL_UART_MspInit+0xee>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	4b51      	ldr	r3, [pc, #324]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab6:	4a50      	ldr	r2, [pc, #320]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002ab8:	f043 0310 	orr.w	r3, r3, #16
 8002abc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002abe:	4b4e      	ldr	r3, [pc, #312]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	61bb      	str	r3, [r7, #24]
 8002ac8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	4b4a      	ldr	r3, [pc, #296]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a49      	ldr	r2, [pc, #292]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b47      	ldr	r3, [pc, #284]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8002ae6:	f44f 4304 	mov.w	r3, #33792	@ 0x8400
 8002aea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	2302      	movs	r3, #2
 8002aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af4:	2303      	movs	r3, #3
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002af8:	2307      	movs	r3, #7
 8002afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afc:	f107 031c 	add.w	r3, r7, #28
 8002b00:	4619      	mov	r1, r3
 8002b02:	483e      	ldr	r0, [pc, #248]	@ (8002bfc <HAL_UART_MspInit+0x170>)
 8002b04:	f001 fa0e 	bl	8003f24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002b08:	4b3d      	ldr	r3, [pc, #244]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002c04 <HAL_UART_MspInit+0x178>)
 8002b0c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b10:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b14:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b16:	4b3a      	ldr	r3, [pc, #232]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b18:	2240      	movs	r2, #64	@ 0x40
 8002b1a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b1c:	4b38      	ldr	r3, [pc, #224]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b22:	4b37      	ldr	r3, [pc, #220]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b24:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b28:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b2a:	4b35      	ldr	r3, [pc, #212]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b30:	4b33      	ldr	r3, [pc, #204]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8002b36:	4b32      	ldr	r3, [pc, #200]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b3c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b3e:	4b30      	ldr	r3, [pc, #192]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b44:	4b2e      	ldr	r3, [pc, #184]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b46:	2204      	movs	r2, #4
 8002b48:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_usart1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002b50:	4b2b      	ldr	r3, [pc, #172]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_usart1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002b56:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002b5c:	4828      	ldr	r0, [pc, #160]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b5e:	f000 fdd3 	bl	8003708 <HAL_DMA_Init>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d001      	beq.n	8002b6c <HAL_UART_MspInit+0xe0>
    {
      Error_Handler();
 8002b68:	f7ff fd8a 	bl	8002680 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a24      	ldr	r2, [pc, #144]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b70:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b72:	4a23      	ldr	r2, [pc, #140]	@ (8002c00 <HAL_UART_MspInit+0x174>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b78:	e038      	b.n	8002bec <HAL_UART_MspInit+0x160>
  else if(huart->Instance==USART2)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a22      	ldr	r2, [pc, #136]	@ (8002c08 <HAL_UART_MspInit+0x17c>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d133      	bne.n	8002bec <HAL_UART_MspInit+0x160>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	613b      	str	r3, [r7, #16]
 8002b88:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b92:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b94:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
 8002ba4:	4b14      	ldr	r3, [pc, #80]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	4a13      	ldr	r2, [pc, #76]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb0:	4b11      	ldr	r3, [pc, #68]	@ (8002bf8 <HAL_UART_MspInit+0x16c>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bcc:	2307      	movs	r3, #7
 8002bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bd0:	f107 031c 	add.w	r3, r7, #28
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	4809      	ldr	r0, [pc, #36]	@ (8002bfc <HAL_UART_MspInit+0x170>)
 8002bd8:	f001 f9a4 	bl	8003f24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002bdc:	2200      	movs	r2, #0
 8002bde:	2100      	movs	r1, #0
 8002be0:	2026      	movs	r0, #38	@ 0x26
 8002be2:	f000 fd5a 	bl	800369a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002be6:	2026      	movs	r0, #38	@ 0x26
 8002be8:	f000 fd73 	bl	80036d2 <HAL_NVIC_EnableIRQ>
}
 8002bec:	bf00      	nop
 8002bee:	3730      	adds	r7, #48	@ 0x30
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	200005a4 	.word	0x200005a4
 8002c04:	400264b8 	.word	0x400264b8
 8002c08:	40004400 	.word	0x40004400

08002c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c10:	bf00      	nop
 8002c12:	e7fd      	b.n	8002c10 <NMI_Handler+0x4>

08002c14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c18:	bf00      	nop
 8002c1a:	e7fd      	b.n	8002c18 <HardFault_Handler+0x4>

08002c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c20:	bf00      	nop
 8002c22:	e7fd      	b.n	8002c20 <MemManage_Handler+0x4>

08002c24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c28:	bf00      	nop
 8002c2a:	e7fd      	b.n	8002c28 <BusFault_Handler+0x4>

08002c2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c30:	bf00      	nop
 8002c32:	e7fd      	b.n	8002c30 <UsageFault_Handler+0x4>

08002c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c34:	b480      	push	{r7}
 8002c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c42:	b480      	push	{r7}
 8002c44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c46:	bf00      	nop
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c54:	bf00      	nop
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c5e:	b580      	push	{r7, lr}
 8002c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c62:	f000 f989 	bl	8002f78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <USART2_IRQHandler+0x10>)
 8002c72:	f005 f9d7 	bl	8008024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000055c 	.word	0x2000055c

08002c80 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <SDIO_IRQHandler+0x10>)
 8002c86:	f003 fc73 	bl	8006570 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000388 	.word	0x20000388

08002c94 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <DMA2_Stream3_IRQHandler+0x10>)
 8002c9a:	f000 fecd 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	2000040c 	.word	0x2000040c

08002ca8 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002cac:	4802      	ldr	r0, [pc, #8]	@ (8002cb8 <DMA2_Stream6_IRQHandler+0x10>)
 8002cae:	f000 fec3 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	2000046c 	.word	0x2000046c

08002cbc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cc0:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <DMA2_Stream7_IRQHandler+0x10>)
 8002cc2:	f000 feb9 	bl	8003a38 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200005a4 	.word	0x200005a4

08002cd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  return 1;
 8002cd4:	2301      	movs	r3, #1
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <_kill>:

int _kill(int pid, int sig)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cea:	f008 f91f 	bl	800af2c <__errno>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2216      	movs	r2, #22
 8002cf2:	601a      	str	r2, [r3, #0]
  return -1;
 8002cf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <_exit>:

void _exit (int status)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ffe7 	bl	8002ce0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d12:	bf00      	nop
 8002d14:	e7fd      	b.n	8002d12 <_exit+0x12>

08002d16 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b086      	sub	sp, #24
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	60f8      	str	r0, [r7, #12]
 8002d1e:	60b9      	str	r1, [r7, #8]
 8002d20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	e00a      	b.n	8002d3e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d28:	f3af 8000 	nop.w
 8002d2c:	4601      	mov	r1, r0
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	60ba      	str	r2, [r7, #8]
 8002d34:	b2ca      	uxtb	r2, r1
 8002d36:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	dbf0      	blt.n	8002d28 <_read+0x12>
  }

  return len;
 8002d46:	687b      	ldr	r3, [r7, #4]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	617b      	str	r3, [r7, #20]
 8002d60:	e009      	b.n	8002d76 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	60ba      	str	r2, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	3301      	adds	r3, #1
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697a      	ldr	r2, [r7, #20]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	dbf1      	blt.n	8002d62 <_write+0x12>
  }
  return len;
 8002d7e:	687b      	ldr	r3, [r7, #4]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	3718      	adds	r7, #24
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <_close>:

int _close(int file)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002db0:	605a      	str	r2, [r3, #4]
  return 0;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	370c      	adds	r7, #12
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <_isatty>:

int _isatty(int file)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dc8:	2301      	movs	r3, #1
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	60f8      	str	r0, [r7, #12]
 8002dde:	60b9      	str	r1, [r7, #8]
 8002de0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df8:	4a14      	ldr	r2, [pc, #80]	@ (8002e4c <_sbrk+0x5c>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	@ (8002e50 <_sbrk+0x60>)
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e04:	4b13      	ldr	r3, [pc, #76]	@ (8002e54 <_sbrk+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <_sbrk+0x64>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <_sbrk+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e20:	f008 f884 	bl	800af2c <__errno>
 8002e24:	4603      	mov	r3, r0
 8002e26:	220c      	movs	r2, #12
 8002e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e009      	b.n	8002e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e30:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e36:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a05      	ldr	r2, [pc, #20]	@ (8002e54 <_sbrk+0x64>)
 8002e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20020000 	.word	0x20020000
 8002e50:	00000400 	.word	0x00000400
 8002e54:	20000730 	.word	0x20000730
 8002e58:	200008a0 	.word	0x200008a0

08002e5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e60:	4b06      	ldr	r3, [pc, #24]	@ (8002e7c <SystemInit+0x20>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e66:	4a05      	ldr	r2, [pc, #20]	@ (8002e7c <SystemInit+0x20>)
 8002e68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e70:	bf00      	nop
 8002e72:	46bd      	mov	sp, r7
 8002e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002e80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002eb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e84:	f7ff ffea 	bl	8002e5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e88:	480c      	ldr	r0, [pc, #48]	@ (8002ebc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e8a:	490d      	ldr	r1, [pc, #52]	@ (8002ec0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ec4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e90:	e002      	b.n	8002e98 <LoopCopyDataInit>

08002e92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e96:	3304      	adds	r3, #4

08002e98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e9c:	d3f9      	bcc.n	8002e92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ec8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ea0:	4c0a      	ldr	r4, [pc, #40]	@ (8002ecc <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ea4:	e001      	b.n	8002eaa <LoopFillZerobss>

08002ea6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ea6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ea8:	3204      	adds	r2, #4

08002eaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002eaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002eac:	d3fb      	bcc.n	8002ea6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eae:	f008 f843 	bl	800af38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002eb2:	f7ff f941 	bl	8002138 <main>
  bx  lr    
 8002eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002eb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ebc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ec0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002ec4:	08010280 	.word	0x08010280
  ldr r2, =_sbss
 8002ec8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002ecc:	200008a0 	.word	0x200008a0

08002ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ed0:	e7fe      	b.n	8002ed0 <ADC_IRQHandler>
	...

08002ed4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ed8:	4b0e      	ldr	r3, [pc, #56]	@ (8002f14 <HAL_Init+0x40>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a0d      	ldr	r2, [pc, #52]	@ (8002f14 <HAL_Init+0x40>)
 8002ede:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f14 <HAL_Init+0x40>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f14 <HAL_Init+0x40>)
 8002eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ef0:	4b08      	ldr	r3, [pc, #32]	@ (8002f14 <HAL_Init+0x40>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a07      	ldr	r2, [pc, #28]	@ (8002f14 <HAL_Init+0x40>)
 8002ef6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002efa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002efc:	2003      	movs	r0, #3
 8002efe:	f000 fbc1 	bl	8003684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f02:	200f      	movs	r0, #15
 8002f04:	f000 f808 	bl	8002f18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f08:	f7ff fbc0 	bl	800268c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	40023c00 	.word	0x40023c00

08002f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b082      	sub	sp, #8
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f20:	4b12      	ldr	r3, [pc, #72]	@ (8002f6c <HAL_InitTick+0x54>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b12      	ldr	r3, [pc, #72]	@ (8002f70 <HAL_InitTick+0x58>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	4619      	mov	r1, r3
 8002f2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f36:	4618      	mov	r0, r3
 8002f38:	f000 fbd9 	bl	80036ee <HAL_SYSTICK_Config>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00e      	b.n	8002f64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2b0f      	cmp	r3, #15
 8002f4a:	d80a      	bhi.n	8002f62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	6879      	ldr	r1, [r7, #4]
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	f000 fba1 	bl	800369a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f58:	4a06      	ldr	r2, [pc, #24]	@ (8002f74 <HAL_InitTick+0x5c>)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000004 	.word	0x20000004
 8002f70:	2000000c 	.word	0x2000000c
 8002f74:	20000008 	.word	0x20000008

08002f78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <HAL_IncTick+0x20>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	461a      	mov	r2, r3
 8002f82:	4b06      	ldr	r3, [pc, #24]	@ (8002f9c <HAL_IncTick+0x24>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4413      	add	r3, r2
 8002f88:	4a04      	ldr	r2, [pc, #16]	@ (8002f9c <HAL_IncTick+0x24>)
 8002f8a:	6013      	str	r3, [r2, #0]
}
 8002f8c:	bf00      	nop
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	2000000c 	.word	0x2000000c
 8002f9c:	20000734 	.word	0x20000734

08002fa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fa4:	4b03      	ldr	r3, [pc, #12]	@ (8002fb4 <HAL_GetTick+0x14>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	20000734 	.word	0x20000734

08002fb8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fc0:	f7ff ffee 	bl	8002fa0 <HAL_GetTick>
 8002fc4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd0:	d005      	beq.n	8002fde <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_Delay+0x44>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	4413      	add	r3, r2
 8002fdc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002fde:	bf00      	nop
 8002fe0:	f7ff ffde 	bl	8002fa0 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	68fa      	ldr	r2, [r7, #12]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d8f7      	bhi.n	8002fe0 <HAL_Delay+0x28>
  {
  }
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	2000000c 	.word	0x2000000c

08003000 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003008:	2300      	movs	r3, #0
 800300a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e033      	b.n	800307e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800301a:	2b00      	cmp	r3, #0
 800301c:	d109      	bne.n	8003032 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7ff fb5c 	bl	80026dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	2b00      	cmp	r3, #0
 800303c:	d118      	bne.n	8003070 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003046:	f023 0302 	bic.w	r3, r3, #2
 800304a:	f043 0202 	orr.w	r2, r3, #2
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f94a 	bl	80032ec <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f023 0303 	bic.w	r3, r3, #3
 8003066:	f043 0201 	orr.w	r2, r3, #1
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	641a      	str	r2, [r3, #64]	@ 0x40
 800306e:	e001      	b.n	8003074 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800307c:	7bfb      	ldrb	r3, [r7, #15]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3710      	adds	r7, #16
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
	...

08003088 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003092:	2300      	movs	r3, #0
 8003094:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x1c>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e113      	b.n	80032cc <HAL_ADC_ConfigChannel+0x244>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2b09      	cmp	r3, #9
 80030b2:	d925      	bls.n	8003100 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68d9      	ldr	r1, [r3, #12]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	461a      	mov	r2, r3
 80030c2:	4613      	mov	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4413      	add	r3, r2
 80030c8:	3b1e      	subs	r3, #30
 80030ca:	2207      	movs	r2, #7
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43da      	mvns	r2, r3
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	400a      	ands	r2, r1
 80030d8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68d9      	ldr	r1, [r3, #12]
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	4618      	mov	r0, r3
 80030ec:	4603      	mov	r3, r0
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	4403      	add	r3, r0
 80030f2:	3b1e      	subs	r3, #30
 80030f4:	409a      	lsls	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	60da      	str	r2, [r3, #12]
 80030fe:	e022      	b.n	8003146 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6919      	ldr	r1, [r3, #16]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	2207      	movs	r2, #7
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43da      	mvns	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	400a      	ands	r2, r1
 8003122:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	6919      	ldr	r1, [r3, #16]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	b29b      	uxth	r3, r3
 8003134:	4618      	mov	r0, r3
 8003136:	4603      	mov	r3, r0
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4403      	add	r3, r0
 800313c:	409a      	lsls	r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	2b06      	cmp	r3, #6
 800314c:	d824      	bhi.n	8003198 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685a      	ldr	r2, [r3, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	3b05      	subs	r3, #5
 8003160:	221f      	movs	r2, #31
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	4618      	mov	r0, r3
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	3b05      	subs	r3, #5
 800318a:	fa00 f203 	lsl.w	r2, r0, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	635a      	str	r2, [r3, #52]	@ 0x34
 8003196:	e04c      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d824      	bhi.n	80031ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	4613      	mov	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4413      	add	r3, r2
 80031b0:	3b23      	subs	r3, #35	@ 0x23
 80031b2:	221f      	movs	r2, #31
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43da      	mvns	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	400a      	ands	r2, r1
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	4618      	mov	r0, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	3b23      	subs	r3, #35	@ 0x23
 80031dc:	fa00 f203 	lsl.w	r2, r0, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
 80031e8:	e023      	b.n	8003232 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685a      	ldr	r2, [r3, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	3b41      	subs	r3, #65	@ 0x41
 80031fc:	221f      	movs	r2, #31
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	b29b      	uxth	r3, r3
 8003218:	4618      	mov	r0, r3
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	4613      	mov	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	4413      	add	r3, r2
 8003224:	3b41      	subs	r3, #65	@ 0x41
 8003226:	fa00 f203 	lsl.w	r2, r0, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003232:	4b29      	ldr	r3, [pc, #164]	@ (80032d8 <HAL_ADC_ConfigChannel+0x250>)
 8003234:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a28      	ldr	r2, [pc, #160]	@ (80032dc <HAL_ADC_ConfigChannel+0x254>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d10f      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1d8>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b12      	cmp	r3, #18
 8003246:	d10b      	bne.n	8003260 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a1d      	ldr	r2, [pc, #116]	@ (80032dc <HAL_ADC_ConfigChannel+0x254>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d12b      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x23a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <HAL_ADC_ConfigChannel+0x258>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d003      	beq.n	800327c <HAL_ADC_ConfigChannel+0x1f4>
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2b11      	cmp	r3, #17
 800327a:	d122      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a11      	ldr	r2, [pc, #68]	@ (80032e0 <HAL_ADC_ConfigChannel+0x258>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d111      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800329e:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <HAL_ADC_ConfigChannel+0x25c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a11      	ldr	r2, [pc, #68]	@ (80032e8 <HAL_ADC_ConfigChannel+0x260>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	0c9a      	lsrs	r2, r3, #18
 80032aa:	4613      	mov	r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	4413      	add	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032b4:	e002      	b.n	80032bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	3b01      	subs	r3, #1
 80032ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f9      	bne.n	80032b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	40012300 	.word	0x40012300
 80032dc:	40012000 	.word	0x40012000
 80032e0:	10000012 	.word	0x10000012
 80032e4:	20000004 	.word	0x20000004
 80032e8:	431bde83 	.word	0x431bde83

080032ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b085      	sub	sp, #20
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80032f4:	4b79      	ldr	r3, [pc, #484]	@ (80034dc <ADC_Init+0x1f0>)
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	685a      	ldr	r2, [r3, #4]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	431a      	orrs	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003320:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6859      	ldr	r1, [r3, #4]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	021a      	lsls	r2, r3, #8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	685a      	ldr	r2, [r3, #4]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003344:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337e:	4a58      	ldr	r2, [pc, #352]	@ (80034e0 <ADC_Init+0x1f4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d022      	beq.n	80033ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003392:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6899      	ldr	r1, [r3, #8]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	430a      	orrs	r2, r1
 80033a4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	6899      	ldr	r1, [r3, #8]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	609a      	str	r2, [r3, #8]
 80033c8:	e00f      	b.n	80033ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	689a      	ldr	r2, [r3, #8]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80033d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80033e8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f022 0202 	bic.w	r2, r2, #2
 80033f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	7e1b      	ldrb	r3, [r3, #24]
 8003404:	005a      	lsls	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d01b      	beq.n	8003450 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	685a      	ldr	r2, [r3, #4]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003426:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003436:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003442:	3b01      	subs	r3, #1
 8003444:	035a      	lsls	r2, r3, #13
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	e007      	b.n	8003460 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800345e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800346e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	3b01      	subs	r3, #1
 800347c:	051a      	lsls	r2, r3, #20
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	430a      	orrs	r2, r1
 8003484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	689a      	ldr	r2, [r3, #8]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003494:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6899      	ldr	r1, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80034a2:	025a      	lsls	r2, r3, #9
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	430a      	orrs	r2, r1
 80034aa:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689a      	ldr	r2, [r3, #8]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6899      	ldr	r1, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	029a      	lsls	r2, r3, #10
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	609a      	str	r2, [r3, #8]
}
 80034d0:	bf00      	nop
 80034d2:	3714      	adds	r7, #20
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	40012300 	.word	0x40012300
 80034e0:	0f000001 	.word	0x0f000001

080034e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f003 0307 	and.w	r3, r3, #7
 80034f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003500:	4013      	ands	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800350c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003516:	4a04      	ldr	r2, [pc, #16]	@ (8003528 <__NVIC_SetPriorityGrouping+0x44>)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	60d3      	str	r3, [r2, #12]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	e000ed00 	.word	0xe000ed00

0800352c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003530:	4b04      	ldr	r3, [pc, #16]	@ (8003544 <__NVIC_GetPriorityGrouping+0x18>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	0a1b      	lsrs	r3, r3, #8
 8003536:	f003 0307 	and.w	r3, r3, #7
}
 800353a:	4618      	mov	r0, r3
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr
 8003544:	e000ed00 	.word	0xe000ed00

08003548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	4603      	mov	r3, r0
 8003550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003556:	2b00      	cmp	r3, #0
 8003558:	db0b      	blt.n	8003572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800355a:	79fb      	ldrb	r3, [r7, #7]
 800355c:	f003 021f 	and.w	r2, r3, #31
 8003560:	4907      	ldr	r1, [pc, #28]	@ (8003580 <__NVIC_EnableIRQ+0x38>)
 8003562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003566:	095b      	lsrs	r3, r3, #5
 8003568:	2001      	movs	r0, #1
 800356a:	fa00 f202 	lsl.w	r2, r0, r2
 800356e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	e000e100 	.word	0xe000e100

08003584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	6039      	str	r1, [r7, #0]
 800358e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	2b00      	cmp	r3, #0
 8003596:	db0a      	blt.n	80035ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	b2da      	uxtb	r2, r3
 800359c:	490c      	ldr	r1, [pc, #48]	@ (80035d0 <__NVIC_SetPriority+0x4c>)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	0112      	lsls	r2, r2, #4
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	440b      	add	r3, r1
 80035a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035ac:	e00a      	b.n	80035c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	b2da      	uxtb	r2, r3
 80035b2:	4908      	ldr	r1, [pc, #32]	@ (80035d4 <__NVIC_SetPriority+0x50>)
 80035b4:	79fb      	ldrb	r3, [r7, #7]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	3b04      	subs	r3, #4
 80035bc:	0112      	lsls	r2, r2, #4
 80035be:	b2d2      	uxtb	r2, r2
 80035c0:	440b      	add	r3, r1
 80035c2:	761a      	strb	r2, [r3, #24]
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000e100 	.word	0xe000e100
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d8:	b480      	push	{r7}
 80035da:	b089      	sub	sp, #36	@ 0x24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0307 	and.w	r3, r3, #7
 80035ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f1c3 0307 	rsb	r3, r3, #7
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	bf28      	it	cs
 80035f6:	2304      	movcs	r3, #4
 80035f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2b06      	cmp	r3, #6
 8003600:	d902      	bls.n	8003608 <NVIC_EncodePriority+0x30>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3b03      	subs	r3, #3
 8003606:	e000      	b.n	800360a <NVIC_EncodePriority+0x32>
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800360c:	f04f 32ff 	mov.w	r2, #4294967295
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	43da      	mvns	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	401a      	ands	r2, r3
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003620:	f04f 31ff 	mov.w	r1, #4294967295
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	fa01 f303 	lsl.w	r3, r1, r3
 800362a:	43d9      	mvns	r1, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	4313      	orrs	r3, r2
         );
}
 8003632:	4618      	mov	r0, r3
 8003634:	3724      	adds	r7, #36	@ 0x24
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3b01      	subs	r3, #1
 800364c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003650:	d301      	bcc.n	8003656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003652:	2301      	movs	r3, #1
 8003654:	e00f      	b.n	8003676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003656:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <SysTick_Config+0x40>)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	3b01      	subs	r3, #1
 800365c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800365e:	210f      	movs	r1, #15
 8003660:	f04f 30ff 	mov.w	r0, #4294967295
 8003664:	f7ff ff8e 	bl	8003584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003668:	4b05      	ldr	r3, [pc, #20]	@ (8003680 <SysTick_Config+0x40>)
 800366a:	2200      	movs	r2, #0
 800366c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800366e:	4b04      	ldr	r3, [pc, #16]	@ (8003680 <SysTick_Config+0x40>)
 8003670:	2207      	movs	r2, #7
 8003672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003674:	2300      	movs	r3, #0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	e000e010 	.word	0xe000e010

08003684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f7ff ff29 	bl	80034e4 <__NVIC_SetPriorityGrouping>
}
 8003692:	bf00      	nop
 8003694:	3708      	adds	r7, #8
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800369a:	b580      	push	{r7, lr}
 800369c:	b086      	sub	sp, #24
 800369e:	af00      	add	r7, sp, #0
 80036a0:	4603      	mov	r3, r0
 80036a2:	60b9      	str	r1, [r7, #8]
 80036a4:	607a      	str	r2, [r7, #4]
 80036a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036a8:	2300      	movs	r3, #0
 80036aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036ac:	f7ff ff3e 	bl	800352c <__NVIC_GetPriorityGrouping>
 80036b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	68b9      	ldr	r1, [r7, #8]
 80036b6:	6978      	ldr	r0, [r7, #20]
 80036b8:	f7ff ff8e 	bl	80035d8 <NVIC_EncodePriority>
 80036bc:	4602      	mov	r2, r0
 80036be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036c2:	4611      	mov	r1, r2
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff5d 	bl	8003584 <__NVIC_SetPriority>
}
 80036ca:	bf00      	nop
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	4603      	mov	r3, r0
 80036da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ff31 	bl	8003548 <__NVIC_EnableIRQ>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b082      	sub	sp, #8
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff ffa2 	bl	8003640 <SysTick_Config>
 80036fc:	4603      	mov	r3, r0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3708      	adds	r7, #8
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003714:	f7ff fc44 	bl	8002fa0 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d101      	bne.n	8003724 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e099      	b.n	8003858 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2202      	movs	r2, #2
 8003728:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f022 0201 	bic.w	r2, r2, #1
 8003742:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003744:	e00f      	b.n	8003766 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003746:	f7ff fc2b 	bl	8002fa0 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b05      	cmp	r3, #5
 8003752:	d908      	bls.n	8003766 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2220      	movs	r2, #32
 8003758:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2203      	movs	r2, #3
 800375e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e078      	b.n	8003858 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d1e8      	bne.n	8003746 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4b38      	ldr	r3, [pc, #224]	@ (8003860 <HAL_DMA_Init+0x158>)
 8003780:	4013      	ands	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003792:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800379e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d107      	bne.n	80037d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c8:	4313      	orrs	r3, r2
 80037ca:	697a      	ldr	r2, [r7, #20]
 80037cc:	4313      	orrs	r3, r2
 80037ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	695b      	ldr	r3, [r3, #20]
 80037de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f023 0307 	bic.w	r3, r3, #7
 80037e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d117      	bne.n	800382a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00e      	beq.n	800382a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800380c:	6878      	ldr	r0, [r7, #4]
 800380e:	f000 fb0d 	bl	8003e2c <DMA_CheckFifoParam>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2240      	movs	r2, #64	@ 0x40
 800381c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2201      	movs	r2, #1
 8003822:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003826:	2301      	movs	r3, #1
 8003828:	e016      	b.n	8003858 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 fac4 	bl	8003dc0 <DMA_CalcBaseAndBitshift>
 8003838:	4603      	mov	r3, r0
 800383a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	223f      	movs	r2, #63	@ 0x3f
 8003842:	409a      	lsls	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003856:	2300      	movs	r3, #0
}
 8003858:	4618      	mov	r0, r3
 800385a:	3718      	adds	r7, #24
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	f010803f 	.word	0xf010803f

08003864 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
 800386a:	60f8      	str	r0, [r7, #12]
 800386c:	60b9      	str	r1, [r7, #8]
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_DMA_Start_IT+0x26>
 8003886:	2302      	movs	r3, #2
 8003888:	e040      	b.n	800390c <HAL_DMA_Start_IT+0xa8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b01      	cmp	r3, #1
 800389c:	d12f      	bne.n	80038fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2202      	movs	r2, #2
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	68b9      	ldr	r1, [r7, #8]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fa56 	bl	8003d64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038bc:	223f      	movs	r2, #63	@ 0x3f
 80038be:	409a      	lsls	r2, r3
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0216 	orr.w	r2, r2, #22
 80038d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f042 0208 	orr.w	r2, r2, #8
 80038ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]
 80038fc:	e005      	b.n	800390a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003920:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003922:	f7ff fb3d 	bl	8002fa0 <HAL_GetTick>
 8003926:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d008      	beq.n	8003946 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2280      	movs	r2, #128	@ 0x80
 8003938:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e052      	b.n	80039ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0216 	bic.w	r2, r2, #22
 8003954:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	695a      	ldr	r2, [r3, #20]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003964:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d103      	bne.n	8003976 <HAL_DMA_Abort+0x62>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003972:	2b00      	cmp	r3, #0
 8003974:	d007      	beq.n	8003986 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0208 	bic.w	r2, r2, #8
 8003984:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0201 	bic.w	r2, r2, #1
 8003994:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003996:	e013      	b.n	80039c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003998:	f7ff fb02 	bl	8002fa0 <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b05      	cmp	r3, #5
 80039a4:	d90c      	bls.n	80039c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e015      	b.n	80039ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1e4      	bne.n	8003998 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d2:	223f      	movs	r2, #63	@ 0x3f
 80039d4:	409a      	lsls	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2201      	movs	r2, #1
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}

080039f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d004      	beq.n	8003a12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2280      	movs	r2, #128	@ 0x80
 8003a0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e00c      	b.n	8003a2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2205      	movs	r2, #5
 8003a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a2a:	2300      	movs	r3, #0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a40:	2300      	movs	r3, #0
 8003a42:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a44:	4b8e      	ldr	r3, [pc, #568]	@ (8003c80 <HAL_DMA_IRQHandler+0x248>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a8e      	ldr	r2, [pc, #568]	@ (8003c84 <HAL_DMA_IRQHandler+0x24c>)
 8003a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a4e:	0a9b      	lsrs	r3, r3, #10
 8003a50:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a62:	2208      	movs	r2, #8
 8003a64:	409a      	lsls	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4013      	ands	r3, r2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d01a      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d013      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0204 	bic.w	r2, r2, #4
 8003a8a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a90:	2208      	movs	r2, #8
 8003a92:	409a      	lsls	r2, r3
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9c:	f043 0201 	orr.w	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	409a      	lsls	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d012      	beq.n	8003ada <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad2:	f043 0202 	orr.w	r2, r3, #2
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ade:	2204      	movs	r2, #4
 8003ae0:	409a      	lsls	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d012      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00b      	beq.n	8003b10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003afc:	2204      	movs	r2, #4
 8003afe:	409a      	lsls	r2, r3
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b08:	f043 0204 	orr.w	r2, r3, #4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b14:	2210      	movs	r2, #16
 8003b16:	409a      	lsls	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d043      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d03c      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b32:	2210      	movs	r2, #16
 8003b34:	409a      	lsls	r2, r3
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d018      	beq.n	8003b7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d108      	bne.n	8003b68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d024      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	4798      	blx	r3
 8003b66:	e01f      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d01b      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	4798      	blx	r3
 8003b78:	e016      	b.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d107      	bne.n	8003b98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0208 	bic.w	r2, r2, #8
 8003b96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bac:	2220      	movs	r2, #32
 8003bae:	409a      	lsls	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 808f 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	f000 8087 	beq.w	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bce:	2220      	movs	r2, #32
 8003bd0:	409a      	lsls	r2, r3
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b05      	cmp	r3, #5
 8003be0:	d136      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f022 0216 	bic.w	r2, r2, #22
 8003bf0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	695a      	ldr	r2, [r3, #20]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003c00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d103      	bne.n	8003c12 <HAL_DMA_IRQHandler+0x1da>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d007      	beq.n	8003c22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681a      	ldr	r2, [r3, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 0208 	bic.w	r2, r2, #8
 8003c20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c26:	223f      	movs	r2, #63	@ 0x3f
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2201      	movs	r2, #1
 8003c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d07e      	beq.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	4798      	blx	r3
        }
        return;
 8003c4e:	e079      	b.n	8003d44 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10d      	bne.n	8003c88 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d031      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	4798      	blx	r3
 8003c7c:	e02c      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
 8003c7e:	bf00      	nop
 8003c80:	20000004 	.word	0x20000004
 8003c84:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d023      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	4798      	blx	r3
 8003c98:	e01e      	b.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d10f      	bne.n	8003cc8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f022 0210 	bic.w	r2, r2, #16
 8003cb6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d003      	beq.n	8003cd8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d032      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2205      	movs	r2, #5
 8003cf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	3301      	adds	r3, #1
 8003d08:	60bb      	str	r3, [r7, #8]
 8003d0a:	697a      	ldr	r2, [r7, #20]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d307      	bcc.n	8003d20 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f2      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x2cc>
 8003d1e:	e000      	b.n	8003d22 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003d20:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d005      	beq.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	4798      	blx	r3
 8003d42:	e000      	b.n	8003d46 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d44:	bf00      	nop
    }
  }
}
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b085      	sub	sp, #20
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	2b40      	cmp	r3, #64	@ 0x40
 8003d90:	d108      	bne.n	8003da4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68ba      	ldr	r2, [r7, #8]
 8003da0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003da2:	e007      	b.n	8003db4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68ba      	ldr	r2, [r7, #8]
 8003daa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	60da      	str	r2, [r3, #12]
}
 8003db4:	bf00      	nop
 8003db6:	3714      	adds	r7, #20
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b085      	sub	sp, #20
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	3b10      	subs	r3, #16
 8003dd0:	4a14      	ldr	r2, [pc, #80]	@ (8003e24 <DMA_CalcBaseAndBitshift+0x64>)
 8003dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd6:	091b      	lsrs	r3, r3, #4
 8003dd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003dda:	4a13      	ldr	r2, [pc, #76]	@ (8003e28 <DMA_CalcBaseAndBitshift+0x68>)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	4413      	add	r3, r2
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b03      	cmp	r3, #3
 8003dec:	d909      	bls.n	8003e02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003df6:	f023 0303 	bic.w	r3, r3, #3
 8003dfa:	1d1a      	adds	r2, r3, #4
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003e00:	e007      	b.n	8003e12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003e0a:	f023 0303 	bic.w	r3, r3, #3
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3714      	adds	r7, #20
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	aaaaaaab 	.word	0xaaaaaaab
 8003e28:	0800fdd4 	.word	0x0800fdd4

08003e2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b085      	sub	sp, #20
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	699b      	ldr	r3, [r3, #24]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d11f      	bne.n	8003e86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d856      	bhi.n	8003efa <DMA_CheckFifoParam+0xce>
 8003e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e54 <DMA_CheckFifoParam+0x28>)
 8003e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e52:	bf00      	nop
 8003e54:	08003e65 	.word	0x08003e65
 8003e58:	08003e77 	.word	0x08003e77
 8003e5c:	08003e65 	.word	0x08003e65
 8003e60:	08003efb 	.word	0x08003efb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d046      	beq.n	8003efe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e74:	e043      	b.n	8003efe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e7e:	d140      	bne.n	8003f02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e84:	e03d      	b.n	8003f02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	699b      	ldr	r3, [r3, #24]
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8e:	d121      	bne.n	8003ed4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	d837      	bhi.n	8003f06 <DMA_CheckFifoParam+0xda>
 8003e96:	a201      	add	r2, pc, #4	@ (adr r2, 8003e9c <DMA_CheckFifoParam+0x70>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ead 	.word	0x08003ead
 8003ea0:	08003eb3 	.word	0x08003eb3
 8003ea4:	08003ead 	.word	0x08003ead
 8003ea8:	08003ec5 	.word	0x08003ec5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb0:	e030      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d025      	beq.n	8003f0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ec2:	e022      	b.n	8003f0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ecc:	d11f      	bne.n	8003f0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ed2:	e01c      	b.n	8003f0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d903      	bls.n	8003ee2 <DMA_CheckFifoParam+0xb6>
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b03      	cmp	r3, #3
 8003ede:	d003      	beq.n	8003ee8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ee0:	e018      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee6:	e015      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d00e      	beq.n	8003f12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ef8:	e00b      	b.n	8003f12 <DMA_CheckFifoParam+0xe6>
      break;
 8003efa:	bf00      	nop
 8003efc:	e00a      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003efe:	bf00      	nop
 8003f00:	e008      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f02:	bf00      	nop
 8003f04:	e006      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f06:	bf00      	nop
 8003f08:	e004      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f0a:	bf00      	nop
 8003f0c:	e002      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003f0e:	bf00      	nop
 8003f10:	e000      	b.n	8003f14 <DMA_CheckFifoParam+0xe8>
      break;
 8003f12:	bf00      	nop
    }
  } 
  
  return status; 
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3714      	adds	r7, #20
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b089      	sub	sp, #36	@ 0x24
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	61fb      	str	r3, [r7, #28]
 8003f3e:	e159      	b.n	80041f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f40:	2201      	movs	r2, #1
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	fa02 f303 	lsl.w	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f54:	693a      	ldr	r2, [r7, #16]
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	f040 8148 	bne.w	80041ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f003 0303 	and.w	r3, r3, #3
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d005      	beq.n	8003f76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d130      	bne.n	8003fd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	2203      	movs	r2, #3
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43db      	mvns	r3, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fac:	2201      	movs	r2, #1
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	091b      	lsrs	r3, r3, #4
 8003fc2:	f003 0201 	and.w	r2, r3, #1
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f003 0303 	and.w	r3, r3, #3
 8003fe0:	2b03      	cmp	r3, #3
 8003fe2:	d017      	beq.n	8004014 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	2203      	movs	r2, #3
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	43db      	mvns	r3, r3
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	005b      	lsls	r3, r3, #1
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	4313      	orrs	r3, r2
 800400c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f003 0303 	and.w	r3, r3, #3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d123      	bne.n	8004068 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	08da      	lsrs	r2, r3, #3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3208      	adds	r2, #8
 8004028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800402c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	220f      	movs	r2, #15
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	691a      	ldr	r2, [r3, #16]
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	4313      	orrs	r3, r2
 8004058:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	08da      	lsrs	r2, r3, #3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	3208      	adds	r2, #8
 8004062:	69b9      	ldr	r1, [r7, #24]
 8004064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	2203      	movs	r2, #3
 8004074:	fa02 f303 	lsl.w	r3, r2, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	4013      	ands	r3, r2
 800407e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	f003 0203 	and.w	r2, r3, #3
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	fa02 f303 	lsl.w	r3, r2, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80a2 	beq.w	80041ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	4b57      	ldr	r3, [pc, #348]	@ (800420c <HAL_GPIO_Init+0x2e8>)
 80040b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040b2:	4a56      	ldr	r2, [pc, #344]	@ (800420c <HAL_GPIO_Init+0x2e8>)
 80040b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80040b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80040ba:	4b54      	ldr	r3, [pc, #336]	@ (800420c <HAL_GPIO_Init+0x2e8>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80040c2:	60fb      	str	r3, [r7, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040c6:	4a52      	ldr	r2, [pc, #328]	@ (8004210 <HAL_GPIO_Init+0x2ec>)
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	089b      	lsrs	r3, r3, #2
 80040cc:	3302      	adds	r3, #2
 80040ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	220f      	movs	r2, #15
 80040de:	fa02 f303 	lsl.w	r3, r2, r3
 80040e2:	43db      	mvns	r3, r3
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	4013      	ands	r3, r2
 80040e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a49      	ldr	r2, [pc, #292]	@ (8004214 <HAL_GPIO_Init+0x2f0>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d019      	beq.n	8004126 <HAL_GPIO_Init+0x202>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a48      	ldr	r2, [pc, #288]	@ (8004218 <HAL_GPIO_Init+0x2f4>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d013      	beq.n	8004122 <HAL_GPIO_Init+0x1fe>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a47      	ldr	r2, [pc, #284]	@ (800421c <HAL_GPIO_Init+0x2f8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d00d      	beq.n	800411e <HAL_GPIO_Init+0x1fa>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a46      	ldr	r2, [pc, #280]	@ (8004220 <HAL_GPIO_Init+0x2fc>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d007      	beq.n	800411a <HAL_GPIO_Init+0x1f6>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a45      	ldr	r2, [pc, #276]	@ (8004224 <HAL_GPIO_Init+0x300>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_GPIO_Init+0x1f2>
 8004112:	2304      	movs	r3, #4
 8004114:	e008      	b.n	8004128 <HAL_GPIO_Init+0x204>
 8004116:	2307      	movs	r3, #7
 8004118:	e006      	b.n	8004128 <HAL_GPIO_Init+0x204>
 800411a:	2303      	movs	r3, #3
 800411c:	e004      	b.n	8004128 <HAL_GPIO_Init+0x204>
 800411e:	2302      	movs	r3, #2
 8004120:	e002      	b.n	8004128 <HAL_GPIO_Init+0x204>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_GPIO_Init+0x204>
 8004126:	2300      	movs	r3, #0
 8004128:	69fa      	ldr	r2, [r7, #28]
 800412a:	f002 0203 	and.w	r2, r2, #3
 800412e:	0092      	lsls	r2, r2, #2
 8004130:	4093      	lsls	r3, r2
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4313      	orrs	r3, r2
 8004136:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004138:	4935      	ldr	r1, [pc, #212]	@ (8004210 <HAL_GPIO_Init+0x2ec>)
 800413a:	69fb      	ldr	r3, [r7, #28]
 800413c:	089b      	lsrs	r3, r3, #2
 800413e:	3302      	adds	r3, #2
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004146:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <HAL_GPIO_Init+0x304>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	43db      	mvns	r3, r3
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4013      	ands	r3, r2
 8004154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004162:	69ba      	ldr	r2, [r7, #24]
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800416a:	4a2f      	ldr	r2, [pc, #188]	@ (8004228 <HAL_GPIO_Init+0x304>)
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004170:	4b2d      	ldr	r3, [pc, #180]	@ (8004228 <HAL_GPIO_Init+0x304>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800418c:	69ba      	ldr	r2, [r7, #24]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004194:	4a24      	ldr	r2, [pc, #144]	@ (8004228 <HAL_GPIO_Init+0x304>)
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800419a:	4b23      	ldr	r3, [pc, #140]	@ (8004228 <HAL_GPIO_Init+0x304>)
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	43db      	mvns	r3, r3
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4013      	ands	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80041b6:	69ba      	ldr	r2, [r7, #24]
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041be:	4a1a      	ldr	r2, [pc, #104]	@ (8004228 <HAL_GPIO_Init+0x304>)
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041c4:	4b18      	ldr	r3, [pc, #96]	@ (8004228 <HAL_GPIO_Init+0x304>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	43db      	mvns	r3, r3
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	4013      	ands	r3, r2
 80041d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041e8:	4a0f      	ldr	r2, [pc, #60]	@ (8004228 <HAL_GPIO_Init+0x304>)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3301      	adds	r3, #1
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b0f      	cmp	r3, #15
 80041f8:	f67f aea2 	bls.w	8003f40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3724      	adds	r7, #36	@ 0x24
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40023800 	.word	0x40023800
 8004210:	40013800 	.word	0x40013800
 8004214:	40020000 	.word	0x40020000
 8004218:	40020400 	.word	0x40020400
 800421c:	40020800 	.word	0x40020800
 8004220:	40020c00 	.word	0x40020c00
 8004224:	40021000 	.word	0x40021000
 8004228:	40013c00 	.word	0x40013c00

0800422c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	460b      	mov	r3, r1
 8004236:	807b      	strh	r3, [r7, #2]
 8004238:	4613      	mov	r3, r2
 800423a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800423c:	787b      	ldrb	r3, [r7, #1]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004242:	887a      	ldrh	r2, [r7, #2]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004248:	e003      	b.n	8004252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800424a:	887b      	ldrh	r3, [r7, #2]
 800424c:	041a      	lsls	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	619a      	str	r2, [r3, #24]
}
 8004252:	bf00      	nop
 8004254:	370c      	adds	r7, #12
 8004256:	46bd      	mov	sp, r7
 8004258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425c:	4770      	bx	lr
	...

08004260 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e12b      	b.n	80044ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b00      	cmp	r3, #0
 800427c:	d106      	bne.n	800428c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7fe fa6c 	bl	8002764 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2224      	movs	r2, #36	@ 0x24
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0201 	bic.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042c4:	f001 feb4 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 80042c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	4a81      	ldr	r2, [pc, #516]	@ (80044d4 <HAL_I2C_Init+0x274>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d807      	bhi.n	80042e4 <HAL_I2C_Init+0x84>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a80      	ldr	r2, [pc, #512]	@ (80044d8 <HAL_I2C_Init+0x278>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	e006      	b.n	80042f2 <HAL_I2C_Init+0x92>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4a7d      	ldr	r2, [pc, #500]	@ (80044dc <HAL_I2C_Init+0x27c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	bf94      	ite	ls
 80042ec:	2301      	movls	r3, #1
 80042ee:	2300      	movhi	r3, #0
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e0e7      	b.n	80044ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4a78      	ldr	r2, [pc, #480]	@ (80044e0 <HAL_I2C_Init+0x280>)
 80042fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004302:	0c9b      	lsrs	r3, r3, #18
 8004304:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68ba      	ldr	r2, [r7, #8]
 8004316:	430a      	orrs	r2, r1
 8004318:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a1b      	ldr	r3, [r3, #32]
 8004320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	4a6a      	ldr	r2, [pc, #424]	@ (80044d4 <HAL_I2C_Init+0x274>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d802      	bhi.n	8004334 <HAL_I2C_Init+0xd4>
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	3301      	adds	r3, #1
 8004332:	e009      	b.n	8004348 <HAL_I2C_Init+0xe8>
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	4a69      	ldr	r2, [pc, #420]	@ (80044e4 <HAL_I2C_Init+0x284>)
 8004340:	fba2 2303 	umull	r2, r3, r2, r3
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	3301      	adds	r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	430b      	orrs	r3, r1
 800434e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800435a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	495c      	ldr	r1, [pc, #368]	@ (80044d4 <HAL_I2C_Init+0x274>)
 8004364:	428b      	cmp	r3, r1
 8004366:	d819      	bhi.n	800439c <HAL_I2C_Init+0x13c>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1e59      	subs	r1, r3, #1
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	005b      	lsls	r3, r3, #1
 8004372:	fbb1 f3f3 	udiv	r3, r1, r3
 8004376:	1c59      	adds	r1, r3, #1
 8004378:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800437c:	400b      	ands	r3, r1
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_I2C_Init+0x138>
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1e59      	subs	r1, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004390:	3301      	adds	r3, #1
 8004392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004396:	e051      	b.n	800443c <HAL_I2C_Init+0x1dc>
 8004398:	2304      	movs	r3, #4
 800439a:	e04f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d111      	bne.n	80043c8 <HAL_I2C_Init+0x168>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	1e58      	subs	r0, r3, #1
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6859      	ldr	r1, [r3, #4]
 80043ac:	460b      	mov	r3, r1
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	440b      	add	r3, r1
 80043b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043b6:	3301      	adds	r3, #1
 80043b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043bc:	2b00      	cmp	r3, #0
 80043be:	bf0c      	ite	eq
 80043c0:	2301      	moveq	r3, #1
 80043c2:	2300      	movne	r3, #0
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	e012      	b.n	80043ee <HAL_I2C_Init+0x18e>
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	1e58      	subs	r0, r3, #1
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6859      	ldr	r1, [r3, #4]
 80043d0:	460b      	mov	r3, r1
 80043d2:	009b      	lsls	r3, r3, #2
 80043d4:	440b      	add	r3, r1
 80043d6:	0099      	lsls	r1, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	fbb0 f3f3 	udiv	r3, r0, r3
 80043de:	3301      	adds	r3, #1
 80043e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf0c      	ite	eq
 80043e8:	2301      	moveq	r3, #1
 80043ea:	2300      	movne	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Init+0x196>
 80043f2:	2301      	movs	r3, #1
 80043f4:	e022      	b.n	800443c <HAL_I2C_Init+0x1dc>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d10e      	bne.n	800441c <HAL_I2C_Init+0x1bc>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	1e58      	subs	r0, r3, #1
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6859      	ldr	r1, [r3, #4]
 8004406:	460b      	mov	r3, r1
 8004408:	005b      	lsls	r3, r3, #1
 800440a:	440b      	add	r3, r1
 800440c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004410:	3301      	adds	r3, #1
 8004412:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800441a:	e00f      	b.n	800443c <HAL_I2C_Init+0x1dc>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	1e58      	subs	r0, r3, #1
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6859      	ldr	r1, [r3, #4]
 8004424:	460b      	mov	r3, r1
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	0099      	lsls	r1, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004432:	3301      	adds	r3, #1
 8004434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004438:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	6809      	ldr	r1, [r1, #0]
 8004440:	4313      	orrs	r3, r2
 8004442:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	69da      	ldr	r2, [r3, #28]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6a1b      	ldr	r3, [r3, #32]
 8004456:	431a      	orrs	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	430a      	orrs	r2, r1
 800445e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800446a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6911      	ldr	r1, [r2, #16]
 8004472:	687a      	ldr	r2, [r7, #4]
 8004474:	68d2      	ldr	r2, [r2, #12]
 8004476:	4311      	orrs	r1, r2
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	430b      	orrs	r3, r1
 800447e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68db      	ldr	r3, [r3, #12]
 8004486:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695a      	ldr	r2, [r3, #20]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	430a      	orrs	r2, r1
 800449a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2220      	movs	r2, #32
 80044b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	000186a0 	.word	0x000186a0
 80044d8:	001e847f 	.word	0x001e847f
 80044dc:	003d08ff 	.word	0x003d08ff
 80044e0:	431bde83 	.word	0x431bde83
 80044e4:	10624dd3 	.word	0x10624dd3

080044e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	461a      	mov	r2, r3
 80044f4:	460b      	mov	r3, r1
 80044f6:	817b      	strh	r3, [r7, #10]
 80044f8:	4613      	mov	r3, r2
 80044fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044fc:	f7fe fd50 	bl	8002fa0 <HAL_GetTick>
 8004500:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b20      	cmp	r3, #32
 800450c:	f040 80e0 	bne.w	80046d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	9300      	str	r3, [sp, #0]
 8004514:	2319      	movs	r3, #25
 8004516:	2201      	movs	r2, #1
 8004518:	4970      	ldr	r1, [pc, #448]	@ (80046dc <HAL_I2C_Master_Transmit+0x1f4>)
 800451a:	68f8      	ldr	r0, [r7, #12]
 800451c:	f000 ff22 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004526:	2302      	movs	r3, #2
 8004528:	e0d3      	b.n	80046d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_I2C_Master_Transmit+0x50>
 8004534:	2302      	movs	r3, #2
 8004536:	e0cc      	b.n	80046d2 <HAL_I2C_Master_Transmit+0x1ea>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d007      	beq.n	800455e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f042 0201 	orr.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800456c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2221      	movs	r2, #33	@ 0x21
 8004572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2210      	movs	r2, #16
 800457a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	893a      	ldrh	r2, [r7, #8]
 800458e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4a50      	ldr	r2, [pc, #320]	@ (80046e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800459e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045a0:	8979      	ldrh	r1, [r7, #10]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 fcf6 	bl	8004f98 <I2C_MasterRequestWrite>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e08d      	b.n	80046d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	695b      	ldr	r3, [r3, #20]
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	613b      	str	r3, [r7, #16]
 80045ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045cc:	e066      	b.n	800469c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	6a39      	ldr	r1, [r7, #32]
 80045d2:	68f8      	ldr	r0, [r7, #12]
 80045d4:	f000 ffe0 	bl	8005598 <I2C_WaitOnTXEFlagUntilTimeout>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00d      	beq.n	80045fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d107      	bne.n	80045f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045fe:	781a      	ldrb	r2, [r3, #0]
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	3b01      	subs	r3, #1
 8004618:	b29a      	uxth	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004622:	3b01      	subs	r3, #1
 8004624:	b29a      	uxth	r2, r3
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b04      	cmp	r3, #4
 8004636:	d11b      	bne.n	8004670 <HAL_I2C_Master_Transmit+0x188>
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800463c:	2b00      	cmp	r3, #0
 800463e:	d017      	beq.n	8004670 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	781a      	ldrb	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	1c5a      	adds	r2, r3, #1
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800465a:	b29b      	uxth	r3, r3
 800465c:	3b01      	subs	r3, #1
 800465e:	b29a      	uxth	r2, r3
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	6a39      	ldr	r1, [r7, #32]
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f000 ffd7 	bl	8005628 <I2C_WaitOnBTFFlagUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00d      	beq.n	800469c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	2b04      	cmp	r3, #4
 8004686:	d107      	bne.n	8004698 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004696:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e01a      	b.n	80046d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d194      	bne.n	80045ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e000      	b.n	80046d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046d0:	2302      	movs	r3, #2
  }
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	00100002 	.word	0x00100002
 80046e0:	ffff0000 	.word	0xffff0000

080046e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08c      	sub	sp, #48	@ 0x30
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	461a      	mov	r2, r3
 80046f0:	460b      	mov	r3, r1
 80046f2:	817b      	strh	r3, [r7, #10]
 80046f4:	4613      	mov	r3, r2
 80046f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f8:	f7fe fc52 	bl	8002fa0 <HAL_GetTick>
 80046fc:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b20      	cmp	r3, #32
 8004708:	f040 8217 	bne.w	8004b3a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800470c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	2319      	movs	r3, #25
 8004712:	2201      	movs	r2, #1
 8004714:	497c      	ldr	r1, [pc, #496]	@ (8004908 <HAL_I2C_Master_Receive+0x224>)
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fe24 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004722:	2302      	movs	r3, #2
 8004724:	e20a      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800472c:	2b01      	cmp	r3, #1
 800472e:	d101      	bne.n	8004734 <HAL_I2C_Master_Receive+0x50>
 8004730:	2302      	movs	r3, #2
 8004732:	e203      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	2b01      	cmp	r3, #1
 8004748:	d007      	beq.n	800475a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f042 0201 	orr.w	r2, r2, #1
 8004758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004768:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2222      	movs	r2, #34	@ 0x22
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2210      	movs	r2, #16
 8004776:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	893a      	ldrh	r2, [r7, #8]
 800478a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004790:	b29a      	uxth	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4a5c      	ldr	r2, [pc, #368]	@ (800490c <HAL_I2C_Master_Receive+0x228>)
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800479c:	8979      	ldrh	r1, [r7, #10]
 800479e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a2:	68f8      	ldr	r0, [r7, #12]
 80047a4:	f000 fc7a 	bl	800509c <I2C_MasterRequestRead>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e1c4      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d113      	bne.n	80047e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695b      	ldr	r3, [r3, #20]
 80047c4:	623b      	str	r3, [r7, #32]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	623b      	str	r3, [r7, #32]
 80047ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	e198      	b.n	8004b14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d11b      	bne.n	8004822 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047fa:	2300      	movs	r3, #0
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695b      	ldr	r3, [r3, #20]
 8004804:	61fb      	str	r3, [r7, #28]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	61fb      	str	r3, [r7, #28]
 800480e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800481e:	601a      	str	r2, [r3, #0]
 8004820:	e178      	b.n	8004b14 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004826:	2b02      	cmp	r3, #2
 8004828:	d11b      	bne.n	8004862 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004838:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004848:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800484a:	2300      	movs	r3, #0
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	61bb      	str	r3, [r7, #24]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	61bb      	str	r3, [r7, #24]
 800485e:	69bb      	ldr	r3, [r7, #24]
 8004860:	e158      	b.n	8004b14 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004872:	2300      	movs	r3, #0
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004888:	e144      	b.n	8004b14 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800488e:	2b03      	cmp	r3, #3
 8004890:	f200 80f1 	bhi.w	8004a76 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004898:	2b01      	cmp	r3, #1
 800489a:	d123      	bne.n	80048e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800489c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800489e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f000 ff09 	bl	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e145      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048d8:	b29b      	uxth	r3, r3
 80048da:	3b01      	subs	r3, #1
 80048dc:	b29a      	uxth	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048e2:	e117      	b.n	8004b14 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d14e      	bne.n	800498a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f2:	2200      	movs	r2, #0
 80048f4:	4906      	ldr	r1, [pc, #24]	@ (8004910 <HAL_I2C_Master_Receive+0x22c>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 fd34 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d008      	beq.n	8004914 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e11a      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
 8004906:	bf00      	nop
 8004908:	00100002 	.word	0x00100002
 800490c:	ffff0000 	.word	0xffff0000
 8004910:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004922:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	691a      	ldr	r2, [r3, #16]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494c:	b29b      	uxth	r3, r3
 800494e:	3b01      	subs	r3, #1
 8004950:	b29a      	uxth	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691a      	ldr	r2, [r3, #16]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004960:	b2d2      	uxtb	r2, r2
 8004962:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004988:	e0c4      	b.n	8004b14 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	9300      	str	r3, [sp, #0]
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	2200      	movs	r2, #0
 8004992:	496c      	ldr	r1, [pc, #432]	@ (8004b44 <HAL_I2C_Master_Receive+0x460>)
 8004994:	68f8      	ldr	r0, [r7, #12]
 8004996:	f000 fce5 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e0cb      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049dc:	b29b      	uxth	r3, r3
 80049de:	3b01      	subs	r3, #1
 80049e0:	b29a      	uxth	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2200      	movs	r2, #0
 80049ee:	4955      	ldr	r1, [pc, #340]	@ (8004b44 <HAL_I2C_Master_Receive+0x460>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fcb7 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e09d      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	691a      	ldr	r2, [r3, #16]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	b2d2      	uxtb	r2, r2
 8004a4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	b29a      	uxth	r2, r3
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a74:	e04e      	b.n	8004b14 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a78:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f000 fe1c 	bl	80056b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e058      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	691a      	ldr	r2, [r3, #16]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a94:	b2d2      	uxtb	r2, r2
 8004a96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9c:	1c5a      	adds	r2, r3, #1
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d124      	bne.n	8004b14 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ace:	2b03      	cmp	r3, #3
 8004ad0:	d107      	bne.n	8004ae2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ae0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	691a      	ldr	r2, [r3, #16]
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aec:	b2d2      	uxtb	r2, r2
 8004aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b29a      	uxth	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	b29a      	uxth	r2, r3
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	f47f aeb6 	bne.w	800488a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3728      	adds	r7, #40	@ 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	00010004 	.word	0x00010004

08004b48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b088      	sub	sp, #32
 8004b4c:	af02      	add	r7, sp, #8
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	4608      	mov	r0, r1
 8004b52:	4611      	mov	r1, r2
 8004b54:	461a      	mov	r2, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	817b      	strh	r3, [r7, #10]
 8004b5a:	460b      	mov	r3, r1
 8004b5c:	813b      	strh	r3, [r7, #8]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b62:	f7fe fa1d 	bl	8002fa0 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b20      	cmp	r3, #32
 8004b72:	f040 80d9 	bne.w	8004d28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	2319      	movs	r3, #25
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	496d      	ldr	r1, [pc, #436]	@ (8004d34 <HAL_I2C_Mem_Write+0x1ec>)
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 fbef 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d001      	beq.n	8004b90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	e0cc      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d101      	bne.n	8004b9e <HAL_I2C_Mem_Write+0x56>
 8004b9a:	2302      	movs	r3, #2
 8004b9c:	e0c5      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0301 	and.w	r3, r3, #1
 8004bb0:	2b01      	cmp	r3, #1
 8004bb2:	d007      	beq.n	8004bc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2221      	movs	r2, #33	@ 0x21
 8004bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2240      	movs	r2, #64	@ 0x40
 8004be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	6a3a      	ldr	r2, [r7, #32]
 8004bee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bfa:	b29a      	uxth	r2, r3
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4a4d      	ldr	r2, [pc, #308]	@ (8004d38 <HAL_I2C_Mem_Write+0x1f0>)
 8004c04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004c06:	88f8      	ldrh	r0, [r7, #6]
 8004c08:	893a      	ldrh	r2, [r7, #8]
 8004c0a:	8979      	ldrh	r1, [r7, #10]
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	9301      	str	r3, [sp, #4]
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4603      	mov	r3, r0
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f000 fb0e 	bl	8005238 <I2C_RequestMemoryWrite>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d052      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e081      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f000 fcb4 	bl	8005598 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00d      	beq.n	8004c52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d107      	bne.n	8004c4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e06b      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	781a      	ldrb	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c62:	1c5a      	adds	r2, r3, #1
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b29a      	uxth	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c78:	b29b      	uxth	r3, r3
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	f003 0304 	and.w	r3, r3, #4
 8004c8c:	2b04      	cmp	r3, #4
 8004c8e:	d11b      	bne.n	8004cc8 <HAL_I2C_Mem_Write+0x180>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d017      	beq.n	8004cc8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	781a      	ldrb	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1aa      	bne.n	8004c26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 fca7 	bl	8005628 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00d      	beq.n	8004cfc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	2b04      	cmp	r3, #4
 8004ce6:	d107      	bne.n	8004cf8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cf6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e016      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2220      	movs	r2, #32
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d24:	2300      	movs	r3, #0
 8004d26:	e000      	b.n	8004d2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d28:	2302      	movs	r3, #2
  }
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3718      	adds	r7, #24
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	00100002 	.word	0x00100002
 8004d38:	ffff0000 	.word	0xffff0000

08004d3c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08a      	sub	sp, #40	@ 0x28
 8004d40:	af02      	add	r7, sp, #8
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8004d4c:	f7fe f928 	bl	8002fa0 <HAL_GetTick>
 8004d50:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	f040 8111 	bne.w	8004f86 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	2319      	movs	r3, #25
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	4988      	ldr	r1, [pc, #544]	@ (8004f90 <HAL_I2C_IsDeviceReady+0x254>)
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 faf8 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8004d7a:	2302      	movs	r3, #2
 8004d7c:	e104      	b.n	8004f88 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d101      	bne.n	8004d8c <HAL_I2C_IsDeviceReady+0x50>
 8004d88:	2302      	movs	r3, #2
 8004d8a:	e0fd      	b.n	8004f88 <HAL_I2C_IsDeviceReady+0x24c>
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d007      	beq.n	8004db2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f042 0201 	orr.w	r2, r2, #1
 8004db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	681a      	ldr	r2, [r3, #0]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dc0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2224      	movs	r2, #36	@ 0x24
 8004dc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	4a70      	ldr	r2, [pc, #448]	@ (8004f94 <HAL_I2C_IsDeviceReady+0x258>)
 8004dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004de4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	9300      	str	r3, [sp, #0]
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 fab6 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00d      	beq.n	8004e1a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e08:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e0c:	d103      	bne.n	8004e16 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e14:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e0b6      	b.n	8004f88 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	b2db      	uxtb	r3, r3
 8004e1e:	461a      	mov	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004e28:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8004e2a:	f7fe f8b9 	bl	8002fa0 <HAL_GetTick>
 8004e2e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	f003 0302 	and.w	r3, r3, #2
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	bf0c      	ite	eq
 8004e3e:	2301      	moveq	r3, #1
 8004e40:	2300      	movne	r3, #0
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004e5e:	e025      	b.n	8004eac <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004e60:	f7fe f89e 	bl	8002fa0 <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d302      	bcc.n	8004e76 <HAL_I2C_IsDeviceReady+0x13a>
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d103      	bne.n	8004e7e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	22a0      	movs	r2, #160	@ 0xa0
 8004e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f003 0302 	and.w	r3, r3, #2
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ea2:	bf0c      	ite	eq
 8004ea4:	2301      	moveq	r3, #1
 8004ea6:	2300      	movne	r3, #0
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2ba0      	cmp	r3, #160	@ 0xa0
 8004eb6:	d005      	beq.n	8004ec4 <HAL_I2C_IsDeviceReady+0x188>
 8004eb8:	7dfb      	ldrb	r3, [r7, #23]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <HAL_I2C_IsDeviceReady+0x188>
 8004ebe:	7dbb      	ldrb	r3, [r7, #22]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d0cd      	beq.n	8004e60 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d129      	bne.n	8004f2e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004ee8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004eea:	2300      	movs	r3, #0
 8004eec:	613b      	str	r3, [r7, #16]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695b      	ldr	r3, [r3, #20]
 8004ef4:	613b      	str	r3, [r7, #16]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	613b      	str	r3, [r7, #16]
 8004efe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f00:	69fb      	ldr	r3, [r7, #28]
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	2319      	movs	r3, #25
 8004f06:	2201      	movs	r2, #1
 8004f08:	4921      	ldr	r1, [pc, #132]	@ (8004f90 <HAL_I2C_IsDeviceReady+0x254>)
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 fa2a 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d001      	beq.n	8004f1a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e036      	b.n	8004f88 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2220      	movs	r2, #32
 8004f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e02c      	b.n	8004f88 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f46:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	9300      	str	r3, [sp, #0]
 8004f4c:	2319      	movs	r3, #25
 8004f4e:	2201      	movs	r2, #1
 8004f50:	490f      	ldr	r1, [pc, #60]	@ (8004f90 <HAL_I2C_IsDeviceReady+0x254>)
 8004f52:	68f8      	ldr	r0, [r7, #12]
 8004f54:	f000 fa06 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d001      	beq.n	8004f62 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e012      	b.n	8004f88 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	3301      	adds	r3, #1
 8004f66:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	f4ff af32 	bcc.w	8004dd6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	e000      	b.n	8004f88 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004f86:	2302      	movs	r3, #2
  }
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3720      	adds	r7, #32
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	00100002 	.word	0x00100002
 8004f94:	ffff0000 	.word	0xffff0000

08004f98 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	603b      	str	r3, [r7, #0]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fac:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d006      	beq.n	8004fc2 <I2C_MasterRequestWrite+0x2a>
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d003      	beq.n	8004fc2 <I2C_MasterRequestWrite+0x2a>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004fc0:	d108      	bne.n	8004fd4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e00b      	b.n	8004fec <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd8:	2b12      	cmp	r3, #18
 8004fda:	d107      	bne.n	8004fec <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004fea:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	9300      	str	r3, [sp, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ff8:	68f8      	ldr	r0, [r7, #12]
 8004ffa:	f000 f9b3 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d00d      	beq.n	8005020 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800500e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005012:	d103      	bne.n	800501c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800501a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800501c:	2303      	movs	r3, #3
 800501e:	e035      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005028:	d108      	bne.n	800503c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800502a:	897b      	ldrh	r3, [r7, #10]
 800502c:	b2db      	uxtb	r3, r3
 800502e:	461a      	mov	r2, r3
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005038:	611a      	str	r2, [r3, #16]
 800503a:	e01b      	b.n	8005074 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800503c:	897b      	ldrh	r3, [r7, #10]
 800503e:	11db      	asrs	r3, r3, #7
 8005040:	b2db      	uxtb	r3, r3
 8005042:	f003 0306 	and.w	r3, r3, #6
 8005046:	b2db      	uxtb	r3, r3
 8005048:	f063 030f 	orn	r3, r3, #15
 800504c:	b2da      	uxtb	r2, r3
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	490e      	ldr	r1, [pc, #56]	@ (8005094 <I2C_MasterRequestWrite+0xfc>)
 800505a:	68f8      	ldr	r0, [r7, #12]
 800505c:	f000 f9fc 	bl	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d001      	beq.n	800506a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e010      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800506a:	897b      	ldrh	r3, [r7, #10]
 800506c:	b2da      	uxtb	r2, r3
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4907      	ldr	r1, [pc, #28]	@ (8005098 <I2C_MasterRequestWrite+0x100>)
 800507a:	68f8      	ldr	r0, [r7, #12]
 800507c:	f000 f9ec 	bl	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800508a:	2300      	movs	r3, #0
}
 800508c:	4618      	mov	r0, r3
 800508e:	3718      	adds	r7, #24
 8005090:	46bd      	mov	sp, r7
 8005092:	bd80      	pop	{r7, pc}
 8005094:	00010008 	.word	0x00010008
 8005098:	00010002 	.word	0x00010002

0800509c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b088      	sub	sp, #32
 80050a0:	af02      	add	r7, sp, #8
 80050a2:	60f8      	str	r0, [r7, #12]
 80050a4:	607a      	str	r2, [r7, #4]
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	460b      	mov	r3, r1
 80050aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80050c0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d006      	beq.n	80050d6 <I2C_MasterRequestRead+0x3a>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d003      	beq.n	80050d6 <I2C_MasterRequestRead+0x3a>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80050d4:	d108      	bne.n	80050e8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e00b      	b.n	8005100 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ec:	2b11      	cmp	r3, #17
 80050ee:	d107      	bne.n	8005100 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f000 f929 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00d      	beq.n	8005134 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005126:	d103      	bne.n	8005130 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800512e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e079      	b.n	8005228 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800513c:	d108      	bne.n	8005150 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800513e:	897b      	ldrh	r3, [r7, #10]
 8005140:	b2db      	uxtb	r3, r3
 8005142:	f043 0301 	orr.w	r3, r3, #1
 8005146:	b2da      	uxtb	r2, r3
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	611a      	str	r2, [r3, #16]
 800514e:	e05f      	b.n	8005210 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005150:	897b      	ldrh	r3, [r7, #10]
 8005152:	11db      	asrs	r3, r3, #7
 8005154:	b2db      	uxtb	r3, r3
 8005156:	f003 0306 	and.w	r3, r3, #6
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f063 030f 	orn	r3, r3, #15
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	4930      	ldr	r1, [pc, #192]	@ (8005230 <I2C_MasterRequestRead+0x194>)
 800516e:	68f8      	ldr	r0, [r7, #12]
 8005170:	f000 f972 	bl	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e054      	b.n	8005228 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800517e:	897b      	ldrh	r3, [r7, #10]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	4929      	ldr	r1, [pc, #164]	@ (8005234 <I2C_MasterRequestRead+0x198>)
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f962 	bl	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005194:	4603      	mov	r3, r0
 8005196:	2b00      	cmp	r3, #0
 8005198:	d001      	beq.n	800519e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e044      	b.n	8005228 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800519e:	2300      	movs	r3, #0
 80051a0:	613b      	str	r3, [r7, #16]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	613b      	str	r3, [r7, #16]
 80051b2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80051c2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	9300      	str	r3, [sp, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f000 f8c7 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00d      	beq.n	80051f8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051ea:	d103      	bne.n	80051f4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e017      	b.n	8005228 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80051f8:	897b      	ldrh	r3, [r7, #10]
 80051fa:	11db      	asrs	r3, r3, #7
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	f003 0306 	and.w	r3, r3, #6
 8005202:	b2db      	uxtb	r3, r3
 8005204:	f063 030e 	orn	r3, r3, #14
 8005208:	b2da      	uxtb	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4907      	ldr	r1, [pc, #28]	@ (8005234 <I2C_MasterRequestRead+0x198>)
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f000 f91e 	bl	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e000      	b.n	8005228 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005226:	2300      	movs	r3, #0
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	00010008 	.word	0x00010008
 8005234:	00010002 	.word	0x00010002

08005238 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	4608      	mov	r0, r1
 8005242:	4611      	mov	r1, r2
 8005244:	461a      	mov	r2, r3
 8005246:	4603      	mov	r3, r0
 8005248:	817b      	strh	r3, [r7, #10]
 800524a:	460b      	mov	r3, r1
 800524c:	813b      	strh	r3, [r7, #8]
 800524e:	4613      	mov	r3, r2
 8005250:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005260:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	9300      	str	r3, [sp, #0]
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	2200      	movs	r2, #0
 800526a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f000 f878 	bl	8005364 <I2C_WaitOnFlagUntilTimeout>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00d      	beq.n	8005296 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005288:	d103      	bne.n	8005292 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005290:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e05f      	b.n	8005356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005296:	897b      	ldrh	r3, [r7, #10]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	461a      	mov	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80052a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	492d      	ldr	r1, [pc, #180]	@ (8005360 <I2C_RequestMemoryWrite+0x128>)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 f8d3 	bl	8005458 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e04c      	b.n	8005356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	617b      	str	r3, [r7, #20]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	617b      	str	r3, [r7, #20]
 80052d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80052d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d4:	6a39      	ldr	r1, [r7, #32]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f95e 	bl	8005598 <I2C_WaitOnTXEFlagUntilTimeout>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d00d      	beq.n	80052fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	2b04      	cmp	r3, #4
 80052e8:	d107      	bne.n	80052fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e02b      	b.n	8005356 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d105      	bne.n	8005310 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005304:	893b      	ldrh	r3, [r7, #8]
 8005306:	b2da      	uxtb	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	611a      	str	r2, [r3, #16]
 800530e:	e021      	b.n	8005354 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005310:	893b      	ldrh	r3, [r7, #8]
 8005312:	0a1b      	lsrs	r3, r3, #8
 8005314:	b29b      	uxth	r3, r3
 8005316:	b2da      	uxtb	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800531e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005320:	6a39      	ldr	r1, [r7, #32]
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f000 f938 	bl	8005598 <I2C_WaitOnTXEFlagUntilTimeout>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00d      	beq.n	800534a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005332:	2b04      	cmp	r3, #4
 8005334:	d107      	bne.n	8005346 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005344:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e005      	b.n	8005356 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800534a:	893b      	ldrh	r3, [r7, #8]
 800534c:	b2da      	uxtb	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3718      	adds	r7, #24
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	bf00      	nop
 8005360:	00010002 	.word	0x00010002

08005364 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005374:	e048      	b.n	8005408 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800537c:	d044      	beq.n	8005408 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800537e:	f7fd fe0f 	bl	8002fa0 <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	683a      	ldr	r2, [r7, #0]
 800538a:	429a      	cmp	r2, r3
 800538c:	d302      	bcc.n	8005394 <I2C_WaitOnFlagUntilTimeout+0x30>
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d139      	bne.n	8005408 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	0c1b      	lsrs	r3, r3, #16
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b01      	cmp	r3, #1
 800539c:	d10d      	bne.n	80053ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	43da      	mvns	r2, r3
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	4013      	ands	r3, r2
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	bf0c      	ite	eq
 80053b0:	2301      	moveq	r3, #1
 80053b2:	2300      	movne	r3, #0
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	e00c      	b.n	80053d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	699b      	ldr	r3, [r3, #24]
 80053c0:	43da      	mvns	r2, r3
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d116      	bne.n	8005408 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	2220      	movs	r2, #32
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e023      	b.n	8005450 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	0c1b      	lsrs	r3, r3, #16
 800540c:	b2db      	uxtb	r3, r3
 800540e:	2b01      	cmp	r3, #1
 8005410:	d10d      	bne.n	800542e <I2C_WaitOnFlagUntilTimeout+0xca>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	43da      	mvns	r2, r3
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	4013      	ands	r3, r2
 800541e:	b29b      	uxth	r3, r3
 8005420:	2b00      	cmp	r3, #0
 8005422:	bf0c      	ite	eq
 8005424:	2301      	moveq	r3, #1
 8005426:	2300      	movne	r3, #0
 8005428:	b2db      	uxtb	r3, r3
 800542a:	461a      	mov	r2, r3
 800542c:	e00c      	b.n	8005448 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	43da      	mvns	r2, r3
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	4013      	ands	r3, r2
 800543a:	b29b      	uxth	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf0c      	ite	eq
 8005440:	2301      	moveq	r3, #1
 8005442:	2300      	movne	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	429a      	cmp	r2, r3
 800544c:	d093      	beq.n	8005376 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	60f8      	str	r0, [r7, #12]
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005466:	e071      	b.n	800554c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005476:	d123      	bne.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005486:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005490:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2200      	movs	r2, #0
 8005496:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2220      	movs	r2, #32
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054ac:	f043 0204 	orr.w	r2, r3, #4
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80054bc:	2301      	movs	r3, #1
 80054be:	e067      	b.n	8005590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d041      	beq.n	800554c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054c8:	f7fd fd6a 	bl	8002fa0 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d136      	bne.n	800554c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	0c1b      	lsrs	r3, r3, #16
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d10c      	bne.n	8005502 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	695b      	ldr	r3, [r3, #20]
 80054ee:	43da      	mvns	r2, r3
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	4013      	ands	r3, r2
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	e00b      	b.n	800551a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	43da      	mvns	r2, r3
 800550a:	68bb      	ldr	r3, [r7, #8]
 800550c:	4013      	ands	r3, r2
 800550e:	b29b      	uxth	r3, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	bf14      	ite	ne
 8005514:	2301      	movne	r3, #1
 8005516:	2300      	moveq	r3, #0
 8005518:	b2db      	uxtb	r3, r3
 800551a:	2b00      	cmp	r3, #0
 800551c:	d016      	beq.n	800554c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2200      	movs	r2, #0
 8005522:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2220      	movs	r2, #32
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005538:	f043 0220 	orr.w	r2, r3, #32
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e021      	b.n	8005590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	0c1b      	lsrs	r3, r3, #16
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b01      	cmp	r3, #1
 8005554:	d10c      	bne.n	8005570 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	695b      	ldr	r3, [r3, #20]
 800555c:	43da      	mvns	r2, r3
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	4013      	ands	r3, r2
 8005562:	b29b      	uxth	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	bf14      	ite	ne
 8005568:	2301      	movne	r3, #1
 800556a:	2300      	moveq	r3, #0
 800556c:	b2db      	uxtb	r3, r3
 800556e:	e00b      	b.n	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	43da      	mvns	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	4013      	ands	r3, r2
 800557c:	b29b      	uxth	r3, r3
 800557e:	2b00      	cmp	r3, #0
 8005580:	bf14      	ite	ne
 8005582:	2301      	movne	r3, #1
 8005584:	2300      	moveq	r3, #0
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b00      	cmp	r3, #0
 800558a:	f47f af6d 	bne.w	8005468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3710      	adds	r7, #16
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b084      	sub	sp, #16
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055a4:	e034      	b.n	8005610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 f8e3 	bl	8005772 <I2C_IsAcknowledgeFailed>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	e034      	b.n	8005620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055bc:	d028      	beq.n	8005610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055be:	f7fd fcef 	bl	8002fa0 <HAL_GetTick>
 80055c2:	4602      	mov	r2, r0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d302      	bcc.n	80055d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11d      	bne.n	8005610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055de:	2b80      	cmp	r3, #128	@ 0x80
 80055e0:	d016      	beq.n	8005610 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2200      	movs	r2, #0
 80055f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fc:	f043 0220 	orr.w	r2, r3, #32
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	e007      	b.n	8005620 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	695b      	ldr	r3, [r3, #20]
 8005616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800561a:	2b80      	cmp	r3, #128	@ 0x80
 800561c:	d1c3      	bne.n	80055a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800561e:	2300      	movs	r3, #0
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	bd80      	pop	{r7, pc}

08005628 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005634:	e034      	b.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f000 f89b 	bl	8005772 <I2C_IsAcknowledgeFailed>
 800563c:	4603      	mov	r3, r0
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e034      	b.n	80056b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800564c:	d028      	beq.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800564e:	f7fd fca7 	bl	8002fa0 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	429a      	cmp	r2, r3
 800565c:	d302      	bcc.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d11d      	bne.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b04      	cmp	r3, #4
 8005670:	d016      	beq.n	80056a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2220      	movs	r2, #32
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568c:	f043 0220 	orr.w	r2, r3, #32
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e007      	b.n	80056b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f003 0304 	and.w	r3, r3, #4
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d1c3      	bne.n	8005636 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056c4:	e049      	b.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	f003 0310 	and.w	r3, r3, #16
 80056d0:	2b10      	cmp	r3, #16
 80056d2:	d119      	bne.n	8005708 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0210 	mvn.w	r2, #16
 80056dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	2200      	movs	r2, #0
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e030      	b.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005708:	f7fd fc4a 	bl	8002fa0 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	68ba      	ldr	r2, [r7, #8]
 8005714:	429a      	cmp	r2, r3
 8005716:	d302      	bcc.n	800571e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d11d      	bne.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005728:	2b40      	cmp	r3, #64	@ 0x40
 800572a:	d016      	beq.n	800575a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	2220      	movs	r2, #32
 8005736:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f043 0220 	orr.w	r2, r3, #32
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e007      	b.n	800576a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005764:	2b40      	cmp	r3, #64	@ 0x40
 8005766:	d1ae      	bne.n	80056c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	695b      	ldr	r3, [r3, #20]
 8005780:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005784:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005788:	d11b      	bne.n	80057c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005792:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ae:	f043 0204 	orr.w	r2, r3, #4
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2200      	movs	r2, #0
 80057ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e000      	b.n	80057c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80057c2:	2300      	movs	r3, #0
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d101      	bne.n	80057e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e267      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f003 0301 	and.w	r3, r3, #1
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d075      	beq.n	80058da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80057ee:	4b88      	ldr	r3, [pc, #544]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	f003 030c 	and.w	r3, r3, #12
 80057f6:	2b04      	cmp	r3, #4
 80057f8:	d00c      	beq.n	8005814 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057fa:	4b85      	ldr	r3, [pc, #532]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005802:	2b08      	cmp	r3, #8
 8005804:	d112      	bne.n	800582c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005806:	4b82      	ldr	r3, [pc, #520]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800580e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005812:	d10b      	bne.n	800582c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005814:	4b7e      	ldr	r3, [pc, #504]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d05b      	beq.n	80058d8 <HAL_RCC_OscConfig+0x108>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d157      	bne.n	80058d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e242      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005834:	d106      	bne.n	8005844 <HAL_RCC_OscConfig+0x74>
 8005836:	4b76      	ldr	r3, [pc, #472]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a75      	ldr	r2, [pc, #468]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800583c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005840:	6013      	str	r3, [r2, #0]
 8005842:	e01d      	b.n	8005880 <HAL_RCC_OscConfig+0xb0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800584c:	d10c      	bne.n	8005868 <HAL_RCC_OscConfig+0x98>
 800584e:	4b70      	ldr	r3, [pc, #448]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a6f      	ldr	r2, [pc, #444]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005854:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005858:	6013      	str	r3, [r2, #0]
 800585a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a6c      	ldr	r2, [pc, #432]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	e00b      	b.n	8005880 <HAL_RCC_OscConfig+0xb0>
 8005868:	4b69      	ldr	r3, [pc, #420]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a68      	ldr	r2, [pc, #416]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800586e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	4b66      	ldr	r3, [pc, #408]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a65      	ldr	r2, [pc, #404]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800587a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800587e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d013      	beq.n	80058b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005888:	f7fd fb8a 	bl	8002fa0 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588e:	e008      	b.n	80058a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005890:	f7fd fb86 	bl	8002fa0 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	2b64      	cmp	r3, #100	@ 0x64
 800589c:	d901      	bls.n	80058a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800589e:	2303      	movs	r3, #3
 80058a0:	e207      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058a2:	4b5b      	ldr	r3, [pc, #364]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d0f0      	beq.n	8005890 <HAL_RCC_OscConfig+0xc0>
 80058ae:	e014      	b.n	80058da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058b0:	f7fd fb76 	bl	8002fa0 <HAL_GetTick>
 80058b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b6:	e008      	b.n	80058ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80058b8:	f7fd fb72 	bl	8002fa0 <HAL_GetTick>
 80058bc:	4602      	mov	r2, r0
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	2b64      	cmp	r3, #100	@ 0x64
 80058c4:	d901      	bls.n	80058ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e1f3      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058ca:	4b51      	ldr	r3, [pc, #324]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1f0      	bne.n	80058b8 <HAL_RCC_OscConfig+0xe8>
 80058d6:	e000      	b.n	80058da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d063      	beq.n	80059ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058e6:	4b4a      	ldr	r3, [pc, #296]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	f003 030c 	and.w	r3, r3, #12
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00b      	beq.n	800590a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058f2:	4b47      	ldr	r3, [pc, #284]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80058fa:	2b08      	cmp	r3, #8
 80058fc:	d11c      	bne.n	8005938 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058fe:	4b44      	ldr	r3, [pc, #272]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005906:	2b00      	cmp	r3, #0
 8005908:	d116      	bne.n	8005938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800590a:	4b41      	ldr	r3, [pc, #260]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d005      	beq.n	8005922 <HAL_RCC_OscConfig+0x152>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d001      	beq.n	8005922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e1c7      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005922:	4b3b      	ldr	r3, [pc, #236]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	00db      	lsls	r3, r3, #3
 8005930:	4937      	ldr	r1, [pc, #220]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005932:	4313      	orrs	r3, r2
 8005934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005936:	e03a      	b.n	80059ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d020      	beq.n	8005982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005940:	4b34      	ldr	r3, [pc, #208]	@ (8005a14 <HAL_RCC_OscConfig+0x244>)
 8005942:	2201      	movs	r2, #1
 8005944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005946:	f7fd fb2b 	bl	8002fa0 <HAL_GetTick>
 800594a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800594e:	f7fd fb27 	bl	8002fa0 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e1a8      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005960:	4b2b      	ldr	r3, [pc, #172]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0302 	and.w	r3, r3, #2
 8005968:	2b00      	cmp	r3, #0
 800596a:	d0f0      	beq.n	800594e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800596c:	4b28      	ldr	r3, [pc, #160]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	4925      	ldr	r1, [pc, #148]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 800597c:	4313      	orrs	r3, r2
 800597e:	600b      	str	r3, [r1, #0]
 8005980:	e015      	b.n	80059ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005982:	4b24      	ldr	r3, [pc, #144]	@ (8005a14 <HAL_RCC_OscConfig+0x244>)
 8005984:	2200      	movs	r2, #0
 8005986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7fd fb0a 	bl	8002fa0 <HAL_GetTick>
 800598c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598e:	e008      	b.n	80059a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005990:	f7fd fb06 	bl	8002fa0 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	2b02      	cmp	r3, #2
 800599c:	d901      	bls.n	80059a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800599e:	2303      	movs	r3, #3
 80059a0:	e187      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059a2:	4b1b      	ldr	r3, [pc, #108]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0302 	and.w	r3, r3, #2
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1f0      	bne.n	8005990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d036      	beq.n	8005a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d016      	beq.n	80059f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059c2:	4b15      	ldr	r3, [pc, #84]	@ (8005a18 <HAL_RCC_OscConfig+0x248>)
 80059c4:	2201      	movs	r2, #1
 80059c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c8:	f7fd faea 	bl	8002fa0 <HAL_GetTick>
 80059cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ce:	e008      	b.n	80059e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059d0:	f7fd fae6 	bl	8002fa0 <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d901      	bls.n	80059e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e167      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <HAL_RCC_OscConfig+0x240>)
 80059e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80059e6:	f003 0302 	and.w	r3, r3, #2
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0f0      	beq.n	80059d0 <HAL_RCC_OscConfig+0x200>
 80059ee:	e01b      	b.n	8005a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059f0:	4b09      	ldr	r3, [pc, #36]	@ (8005a18 <HAL_RCC_OscConfig+0x248>)
 80059f2:	2200      	movs	r2, #0
 80059f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f6:	f7fd fad3 	bl	8002fa0 <HAL_GetTick>
 80059fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059fc:	e00e      	b.n	8005a1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80059fe:	f7fd facf 	bl	8002fa0 <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d907      	bls.n	8005a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e150      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
 8005a10:	40023800 	.word	0x40023800
 8005a14:	42470000 	.word	0x42470000
 8005a18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a1c:	4b88      	ldr	r3, [pc, #544]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1ea      	bne.n	80059fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f000 8097 	beq.w	8005b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a36:	2300      	movs	r3, #0
 8005a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a3a:	4b81      	ldr	r3, [pc, #516]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10f      	bne.n	8005a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	60bb      	str	r3, [r7, #8]
 8005a4a:	4b7d      	ldr	r3, [pc, #500]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a4e:	4a7c      	ldr	r2, [pc, #496]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a56:	4b7a      	ldr	r3, [pc, #488]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a5e:	60bb      	str	r3, [r7, #8]
 8005a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a66:	4b77      	ldr	r3, [pc, #476]	@ (8005c44 <HAL_RCC_OscConfig+0x474>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d118      	bne.n	8005aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a72:	4b74      	ldr	r3, [pc, #464]	@ (8005c44 <HAL_RCC_OscConfig+0x474>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a73      	ldr	r2, [pc, #460]	@ (8005c44 <HAL_RCC_OscConfig+0x474>)
 8005a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7e:	f7fd fa8f 	bl	8002fa0 <HAL_GetTick>
 8005a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a84:	e008      	b.n	8005a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a86:	f7fd fa8b 	bl	8002fa0 <HAL_GetTick>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	1ad3      	subs	r3, r2, r3
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	d901      	bls.n	8005a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e10c      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a98:	4b6a      	ldr	r3, [pc, #424]	@ (8005c44 <HAL_RCC_OscConfig+0x474>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0f0      	beq.n	8005a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d106      	bne.n	8005aba <HAL_RCC_OscConfig+0x2ea>
 8005aac:	4b64      	ldr	r3, [pc, #400]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab0:	4a63      	ldr	r2, [pc, #396]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ab2:	f043 0301 	orr.w	r3, r3, #1
 8005ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ab8:	e01c      	b.n	8005af4 <HAL_RCC_OscConfig+0x324>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	2b05      	cmp	r3, #5
 8005ac0:	d10c      	bne.n	8005adc <HAL_RCC_OscConfig+0x30c>
 8005ac2:	4b5f      	ldr	r3, [pc, #380]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ac6:	4a5e      	ldr	r2, [pc, #376]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ac8:	f043 0304 	orr.w	r3, r3, #4
 8005acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ace:	4b5c      	ldr	r3, [pc, #368]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad2:	4a5b      	ldr	r2, [pc, #364]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ad4:	f043 0301 	orr.w	r3, r3, #1
 8005ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ada:	e00b      	b.n	8005af4 <HAL_RCC_OscConfig+0x324>
 8005adc:	4b58      	ldr	r3, [pc, #352]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ae0:	4a57      	ldr	r2, [pc, #348]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ae8:	4b55      	ldr	r3, [pc, #340]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aec:	4a54      	ldr	r2, [pc, #336]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005aee:	f023 0304 	bic.w	r3, r3, #4
 8005af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d015      	beq.n	8005b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005afc:	f7fd fa50 	bl	8002fa0 <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b02:	e00a      	b.n	8005b1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b04:	f7fd fa4c 	bl	8002fa0 <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e0cb      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b1a:	4b49      	ldr	r3, [pc, #292]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0ee      	beq.n	8005b04 <HAL_RCC_OscConfig+0x334>
 8005b26:	e014      	b.n	8005b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b28:	f7fd fa3a 	bl	8002fa0 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2e:	e00a      	b.n	8005b46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b30:	f7fd fa36 	bl	8002fa0 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e0b5      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b46:	4b3e      	ldr	r3, [pc, #248]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b4a:	f003 0302 	and.w	r3, r3, #2
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1ee      	bne.n	8005b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005b52:	7dfb      	ldrb	r3, [r7, #23]
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d105      	bne.n	8005b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b58:	4b39      	ldr	r3, [pc, #228]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5c:	4a38      	ldr	r2, [pc, #224]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	699b      	ldr	r3, [r3, #24]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	f000 80a1 	beq.w	8005cb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b6e:	4b34      	ldr	r3, [pc, #208]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d05c      	beq.n	8005c34 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	2b02      	cmp	r3, #2
 8005b80:	d141      	bne.n	8005c06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b82:	4b31      	ldr	r3, [pc, #196]	@ (8005c48 <HAL_RCC_OscConfig+0x478>)
 8005b84:	2200      	movs	r2, #0
 8005b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b88:	f7fd fa0a 	bl	8002fa0 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b90:	f7fd fa06 	bl	8002fa0 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e087      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba2:	4b27      	ldr	r3, [pc, #156]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69da      	ldr	r2, [r3, #28]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbc:	019b      	lsls	r3, r3, #6
 8005bbe:	431a      	orrs	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bc4:	085b      	lsrs	r3, r3, #1
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	041b      	lsls	r3, r3, #16
 8005bca:	431a      	orrs	r2, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bd0:	061b      	lsls	r3, r3, #24
 8005bd2:	491b      	ldr	r1, [pc, #108]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8005c48 <HAL_RCC_OscConfig+0x478>)
 8005bda:	2201      	movs	r2, #1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bde:	f7fd f9df 	bl	8002fa0 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005be6:	f7fd f9db 	bl	8002fa0 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e05c      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf8:	4b11      	ldr	r3, [pc, #68]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x416>
 8005c04:	e054      	b.n	8005cb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c06:	4b10      	ldr	r3, [pc, #64]	@ (8005c48 <HAL_RCC_OscConfig+0x478>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c0c:	f7fd f9c8 	bl	8002fa0 <HAL_GetTick>
 8005c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c12:	e008      	b.n	8005c26 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c14:	f7fd f9c4 	bl	8002fa0 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d901      	bls.n	8005c26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c22:	2303      	movs	r3, #3
 8005c24:	e045      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c26:	4b06      	ldr	r3, [pc, #24]	@ (8005c40 <HAL_RCC_OscConfig+0x470>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1f0      	bne.n	8005c14 <HAL_RCC_OscConfig+0x444>
 8005c32:	e03d      	b.n	8005cb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d107      	bne.n	8005c4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e038      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
 8005c40:	40023800 	.word	0x40023800
 8005c44:	40007000 	.word	0x40007000
 8005c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c4c:	4b1b      	ldr	r3, [pc, #108]	@ (8005cbc <HAL_RCC_OscConfig+0x4ec>)
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d028      	beq.n	8005cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d121      	bne.n	8005cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d11a      	bne.n	8005cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c76:	68fa      	ldr	r2, [r7, #12]
 8005c78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005c7c:	4013      	ands	r3, r2
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d111      	bne.n	8005cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c92:	085b      	lsrs	r3, r3, #1
 8005c94:	3b01      	subs	r3, #1
 8005c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d107      	bne.n	8005cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d001      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	3718      	adds	r7, #24
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	40023800 	.word	0x40023800

08005cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b084      	sub	sp, #16
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
 8005cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e0cc      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd4:	4b68      	ldr	r3, [pc, #416]	@ (8005e78 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	683a      	ldr	r2, [r7, #0]
 8005cde:	429a      	cmp	r2, r3
 8005ce0:	d90c      	bls.n	8005cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce2:	4b65      	ldr	r3, [pc, #404]	@ (8005e78 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce4:	683a      	ldr	r2, [r7, #0]
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cea:	4b63      	ldr	r3, [pc, #396]	@ (8005e78 <HAL_RCC_ClockConfig+0x1b8>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d001      	beq.n	8005cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0b8      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f003 0302 	and.w	r3, r3, #2
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d020      	beq.n	8005d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0304 	and.w	r3, r3, #4
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d005      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d14:	4b59      	ldr	r3, [pc, #356]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	4a58      	ldr	r2, [pc, #352]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d1a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005d1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d005      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d2c:	4b53      	ldr	r3, [pc, #332]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	4a52      	ldr	r2, [pc, #328]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d32:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d38:	4b50      	ldr	r3, [pc, #320]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	494d      	ldr	r1, [pc, #308]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0301 	and.w	r3, r3, #1
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d044      	beq.n	8005de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d107      	bne.n	8005d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5e:	4b47      	ldr	r3, [pc, #284]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d119      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e07f      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d003      	beq.n	8005d7e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d7a:	2b03      	cmp	r3, #3
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7e:	4b3f      	ldr	r3, [pc, #252]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d109      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e06f      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8e:	4b3b      	ldr	r3, [pc, #236]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0302 	and.w	r3, r3, #2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	e067      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9e:	4b37      	ldr	r3, [pc, #220]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f023 0203 	bic.w	r2, r3, #3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	4934      	ldr	r1, [pc, #208]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005db0:	f7fd f8f6 	bl	8002fa0 <HAL_GetTick>
 8005db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db6:	e00a      	b.n	8005dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db8:	f7fd f8f2 	bl	8002fa0 <HAL_GetTick>
 8005dbc:	4602      	mov	r2, r0
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e04f      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dce:	4b2b      	ldr	r3, [pc, #172]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 020c 	and.w	r2, r3, #12
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d1eb      	bne.n	8005db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005de0:	4b25      	ldr	r3, [pc, #148]	@ (8005e78 <HAL_RCC_ClockConfig+0x1b8>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 0307 	and.w	r3, r3, #7
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d20c      	bcs.n	8005e08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dee:	4b22      	ldr	r3, [pc, #136]	@ (8005e78 <HAL_RCC_ClockConfig+0x1b8>)
 8005df0:	683a      	ldr	r2, [r7, #0]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df6:	4b20      	ldr	r3, [pc, #128]	@ (8005e78 <HAL_RCC_ClockConfig+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0307 	and.w	r3, r3, #7
 8005dfe:	683a      	ldr	r2, [r7, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d001      	beq.n	8005e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e032      	b.n	8005e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 0304 	and.w	r3, r3, #4
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d008      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e14:	4b19      	ldr	r3, [pc, #100]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	4916      	ldr	r1, [pc, #88]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d009      	beq.n	8005e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e32:	4b12      	ldr	r3, [pc, #72]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	00db      	lsls	r3, r3, #3
 8005e40:	490e      	ldr	r1, [pc, #56]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005e46:	f000 f821 	bl	8005e8c <HAL_RCC_GetSysClockFreq>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8005e7c <HAL_RCC_ClockConfig+0x1bc>)
 8005e4e:	689b      	ldr	r3, [r3, #8]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	490a      	ldr	r1, [pc, #40]	@ (8005e80 <HAL_RCC_ClockConfig+0x1c0>)
 8005e58:	5ccb      	ldrb	r3, [r1, r3]
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	4a09      	ldr	r2, [pc, #36]	@ (8005e84 <HAL_RCC_ClockConfig+0x1c4>)
 8005e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005e62:	4b09      	ldr	r3, [pc, #36]	@ (8005e88 <HAL_RCC_ClockConfig+0x1c8>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fd f856 	bl	8002f18 <HAL_InitTick>

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	40023c00 	.word	0x40023c00
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	0800fdbc 	.word	0x0800fdbc
 8005e84:	20000004 	.word	0x20000004
 8005e88:	20000008 	.word	0x20000008

08005e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e90:	b090      	sub	sp, #64	@ 0x40
 8005e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005e94:	2300      	movs	r3, #0
 8005e96:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea4:	4b59      	ldr	r3, [pc, #356]	@ (800600c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f003 030c 	and.w	r3, r3, #12
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	d00d      	beq.n	8005ecc <HAL_RCC_GetSysClockFreq+0x40>
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	f200 80a1 	bhi.w	8005ff8 <HAL_RCC_GetSysClockFreq+0x16c>
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d002      	beq.n	8005ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d003      	beq.n	8005ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ebe:	e09b      	b.n	8005ff8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ec0:	4b53      	ldr	r3, [pc, #332]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ec2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ec4:	e09b      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ec6:	4b53      	ldr	r3, [pc, #332]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ec8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005eca:	e098      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ecc:	4b4f      	ldr	r3, [pc, #316]	@ (800600c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005ed4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ed6:	4b4d      	ldr	r3, [pc, #308]	@ (800600c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d028      	beq.n	8005f34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ee2:	4b4a      	ldr	r3, [pc, #296]	@ (800600c <HAL_RCC_GetSysClockFreq+0x180>)
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	099b      	lsrs	r3, r3, #6
 8005ee8:	2200      	movs	r2, #0
 8005eea:	623b      	str	r3, [r7, #32]
 8005eec:	627a      	str	r2, [r7, #36]	@ 0x24
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	4b47      	ldr	r3, [pc, #284]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ef8:	fb03 f201 	mul.w	r2, r3, r1
 8005efc:	2300      	movs	r3, #0
 8005efe:	fb00 f303 	mul.w	r3, r0, r3
 8005f02:	4413      	add	r3, r2
 8005f04:	4a43      	ldr	r2, [pc, #268]	@ (8006014 <HAL_RCC_GetSysClockFreq+0x188>)
 8005f06:	fba0 1202 	umull	r1, r2, r0, r2
 8005f0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f0c:	460a      	mov	r2, r1
 8005f0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005f10:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f12:	4413      	add	r3, r2
 8005f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f18:	2200      	movs	r2, #0
 8005f1a:	61bb      	str	r3, [r7, #24]
 8005f1c:	61fa      	str	r2, [r7, #28]
 8005f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005f26:	f7fa feb7 	bl	8000c98 <__aeabi_uldivmod>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4613      	mov	r3, r2
 8005f30:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f32:	e053      	b.n	8005fdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f34:	4b35      	ldr	r3, [pc, #212]	@ (800600c <HAL_RCC_GetSysClockFreq+0x180>)
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	099b      	lsrs	r3, r3, #6
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	613b      	str	r3, [r7, #16]
 8005f3e:	617a      	str	r2, [r7, #20]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005f46:	f04f 0b00 	mov.w	fp, #0
 8005f4a:	4652      	mov	r2, sl
 8005f4c:	465b      	mov	r3, fp
 8005f4e:	f04f 0000 	mov.w	r0, #0
 8005f52:	f04f 0100 	mov.w	r1, #0
 8005f56:	0159      	lsls	r1, r3, #5
 8005f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f5c:	0150      	lsls	r0, r2, #5
 8005f5e:	4602      	mov	r2, r0
 8005f60:	460b      	mov	r3, r1
 8005f62:	ebb2 080a 	subs.w	r8, r2, sl
 8005f66:	eb63 090b 	sbc.w	r9, r3, fp
 8005f6a:	f04f 0200 	mov.w	r2, #0
 8005f6e:	f04f 0300 	mov.w	r3, #0
 8005f72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005f76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005f7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005f7e:	ebb2 0408 	subs.w	r4, r2, r8
 8005f82:	eb63 0509 	sbc.w	r5, r3, r9
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	00eb      	lsls	r3, r5, #3
 8005f90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f94:	00e2      	lsls	r2, r4, #3
 8005f96:	4614      	mov	r4, r2
 8005f98:	461d      	mov	r5, r3
 8005f9a:	eb14 030a 	adds.w	r3, r4, sl
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	eb45 030b 	adc.w	r3, r5, fp
 8005fa4:	607b      	str	r3, [r7, #4]
 8005fa6:	f04f 0200 	mov.w	r2, #0
 8005faa:	f04f 0300 	mov.w	r3, #0
 8005fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005fb2:	4629      	mov	r1, r5
 8005fb4:	028b      	lsls	r3, r1, #10
 8005fb6:	4621      	mov	r1, r4
 8005fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005fbc:	4621      	mov	r1, r4
 8005fbe:	028a      	lsls	r2, r1, #10
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	60fa      	str	r2, [r7, #12]
 8005fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fd0:	f7fa fe62 	bl	8000c98 <__aeabi_uldivmod>
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4613      	mov	r3, r2
 8005fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005fdc:	4b0b      	ldr	r3, [pc, #44]	@ (800600c <HAL_RCC_GetSysClockFreq+0x180>)
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	0c1b      	lsrs	r3, r3, #16
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005fec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ff6:	e002      	b.n	8005ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005ff8:	4b05      	ldr	r3, [pc, #20]	@ (8006010 <HAL_RCC_GetSysClockFreq+0x184>)
 8005ffa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006000:	4618      	mov	r0, r3
 8006002:	3740      	adds	r7, #64	@ 0x40
 8006004:	46bd      	mov	sp, r7
 8006006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800600a:	bf00      	nop
 800600c:	40023800 	.word	0x40023800
 8006010:	00f42400 	.word	0x00f42400
 8006014:	017d7840 	.word	0x017d7840

08006018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006018:	b480      	push	{r7}
 800601a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800601c:	4b03      	ldr	r3, [pc, #12]	@ (800602c <HAL_RCC_GetHCLKFreq+0x14>)
 800601e:	681b      	ldr	r3, [r3, #0]
}
 8006020:	4618      	mov	r0, r3
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
 800602a:	bf00      	nop
 800602c:	20000004 	.word	0x20000004

08006030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006034:	f7ff fff0 	bl	8006018 <HAL_RCC_GetHCLKFreq>
 8006038:	4602      	mov	r2, r0
 800603a:	4b05      	ldr	r3, [pc, #20]	@ (8006050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	0a9b      	lsrs	r3, r3, #10
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	4903      	ldr	r1, [pc, #12]	@ (8006054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006046:	5ccb      	ldrb	r3, [r1, r3]
 8006048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800604c:	4618      	mov	r0, r3
 800604e:	bd80      	pop	{r7, pc}
 8006050:	40023800 	.word	0x40023800
 8006054:	0800fdcc 	.word	0x0800fdcc

08006058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800605c:	f7ff ffdc 	bl	8006018 <HAL_RCC_GetHCLKFreq>
 8006060:	4602      	mov	r2, r0
 8006062:	4b05      	ldr	r3, [pc, #20]	@ (8006078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	0b5b      	lsrs	r3, r3, #13
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	4903      	ldr	r1, [pc, #12]	@ (800607c <HAL_RCC_GetPCLK2Freq+0x24>)
 800606e:	5ccb      	ldrb	r3, [r1, r3]
 8006070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006074:	4618      	mov	r0, r3
 8006076:	bd80      	pop	{r7, pc}
 8006078:	40023800 	.word	0x40023800
 800607c:	0800fdcc 	.word	0x0800fdcc

08006080 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e022      	b.n	80060d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d105      	bne.n	80060aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f7fc fba5 	bl	80027f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2203      	movs	r2, #3
 80060ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f814 	bl	80060e0 <HAL_SD_InitCard>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d001      	beq.n	80060c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e00a      	b.n	80060d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2201      	movs	r2, #1
 80060d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80060d6:	2300      	movs	r3, #0
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3708      	adds	r7, #8
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}

080060e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80060e0:	b5b0      	push	{r4, r5, r7, lr}
 80060e2:	b08e      	sub	sp, #56	@ 0x38
 80060e4:	af04      	add	r7, sp, #16
 80060e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80060e8:	2300      	movs	r3, #0
 80060ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80060f8:	2300      	movs	r3, #0
 80060fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80060fc:	2376      	movs	r3, #118	@ 0x76
 80060fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681d      	ldr	r5, [r3, #0]
 8006104:	466c      	mov	r4, sp
 8006106:	f107 0314 	add.w	r3, r7, #20
 800610a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800610e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006112:	f107 0308 	add.w	r3, r7, #8
 8006116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006118:	4628      	mov	r0, r5
 800611a:	f002 fed9 	bl	8008ed0 <SDIO_Init>
 800611e:	4603      	mov	r3, r0
 8006120:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8006124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	e04f      	b.n	80061d0 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006130:	4b29      	ldr	r3, [pc, #164]	@ (80061d8 <HAL_SD_InitCard+0xf8>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4618      	mov	r0, r3
 800613c:	f002 ff11 	bl	8008f62 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006140:	4b25      	ldr	r3, [pc, #148]	@ (80061d8 <HAL_SD_InitCard+0xf8>)
 8006142:	2201      	movs	r2, #1
 8006144:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006146:	2002      	movs	r0, #2
 8006148:	f7fc ff36 	bl	8002fb8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f001 f805 	bl	800715c <SD_PowerON>
 8006152:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006154:	6a3b      	ldr	r3, [r7, #32]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00b      	beq.n	8006172 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2201      	movs	r2, #1
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006166:	6a3b      	ldr	r3, [r7, #32]
 8006168:	431a      	orrs	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e02e      	b.n	80061d0 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 ff24 	bl	8006fc0 <SD_InitCard>
 8006178:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800618c:	6a3b      	ldr	r3, [r7, #32]
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	e01b      	b.n	80061d0 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80061a0:	4618      	mov	r0, r3
 80061a2:	f002 ff70 	bl	8009086 <SDMMC_CmdBlockLength>
 80061a6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d00f      	beq.n	80061ce <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a0a      	ldr	r2, [pc, #40]	@ (80061dc <HAL_SD_InitCard+0xfc>)
 80061b4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e000      	b.n	80061d0 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3728      	adds	r7, #40	@ 0x28
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bdb0      	pop	{r4, r5, r7, pc}
 80061d8:	422580a0 	.word	0x422580a0
 80061dc:	004005ff 	.word	0x004005ff

080061e0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b08c      	sub	sp, #48	@ 0x30
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	60f8      	str	r0, [r7, #12]
 80061e8:	60b9      	str	r1, [r7, #8]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d107      	bne.n	8006208 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061fc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	e0c0      	b.n	800638a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800620e:	b2db      	uxtb	r3, r3
 8006210:	2b01      	cmp	r3, #1
 8006212:	f040 80b9 	bne.w	8006388 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	2200      	movs	r2, #0
 800621a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800621c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	441a      	add	r2, r3
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006226:	429a      	cmp	r2, r3
 8006228:	d907      	bls.n	800623a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
 8006238:	e0a7      	b.n	800638a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2203      	movs	r2, #3
 800623e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2200      	movs	r2, #0
 8006248:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006250:	68fa      	ldr	r2, [r7, #12]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8006258:	f043 0302 	orr.w	r3, r3, #2
 800625c:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006262:	4a4c      	ldr	r2, [pc, #304]	@ (8006394 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006264:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800626a:	4a4b      	ldr	r2, [pc, #300]	@ (8006398 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800626c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006272:	2200      	movs	r2, #0
 8006274:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	2200      	movs	r2, #0
 800627c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	430a      	orrs	r2, r1
 8006298:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	3380      	adds	r3, #128	@ 0x80
 80062a4:	4619      	mov	r1, r3
 80062a6:	68ba      	ldr	r2, [r7, #8]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	025b      	lsls	r3, r3, #9
 80062ac:	089b      	lsrs	r3, r3, #2
 80062ae:	f7fd fad9 	bl	8003864 <HAL_DMA_Start_IT>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d017      	beq.n	80062e8 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80062c6:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a33      	ldr	r2, [pc, #204]	@ (800639c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80062ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062d4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e050      	b.n	800638a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80062e8:	4b2d      	ldr	r3, [pc, #180]	@ (80063a0 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80062ea:	2201      	movs	r2, #1
 80062ec:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d002      	beq.n	80062fc <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80062f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f8:	025b      	lsls	r3, r3, #9
 80062fa:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80062fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006300:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	025b      	lsls	r3, r3, #9
 8006306:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006308:	2390      	movs	r3, #144	@ 0x90
 800630a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800630c:	2302      	movs	r3, #2
 800630e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006310:	2300      	movs	r3, #0
 8006312:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006314:	2301      	movs	r3, #1
 8006316:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f107 0210 	add.w	r2, r7, #16
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f002 fe83 	bl	800902e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d90a      	bls.n	8006344 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2282      	movs	r2, #130	@ 0x82
 8006332:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800633a:	4618      	mov	r0, r3
 800633c:	f002 fee7 	bl	800910e <SDMMC_CmdReadMultiBlock>
 8006340:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006342:	e009      	b.n	8006358 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2281      	movs	r2, #129	@ 0x81
 8006348:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006350:	4618      	mov	r0, r3
 8006352:	f002 feba 	bl	80090ca <SDMMC_CmdReadSingleBlock>
 8006356:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635a:	2b00      	cmp	r3, #0
 800635c:	d012      	beq.n	8006384 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a0e      	ldr	r2, [pc, #56]	@ (800639c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006364:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800636a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800636c:	431a      	orrs	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2201      	movs	r2, #1
 8006376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2200      	movs	r2, #0
 800637e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	e002      	b.n	800638a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006384:	2300      	movs	r3, #0
 8006386:	e000      	b.n	800638a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006388:	2302      	movs	r3, #2
  }
}
 800638a:	4618      	mov	r0, r3
 800638c:	3730      	adds	r7, #48	@ 0x30
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	08006dcf 	.word	0x08006dcf
 8006398:	08006e41 	.word	0x08006e41
 800639c:	004005ff 	.word	0x004005ff
 80063a0:	4225858c 	.word	0x4225858c

080063a4 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b08c      	sub	sp, #48	@ 0x30
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	607a      	str	r2, [r7, #4]
 80063b0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d107      	bne.n	80063cc <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063c0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e0c5      	b.n	8006558 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	f040 80be 	bne.w	8006556 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80063e0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	441a      	add	r2, r3
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d907      	bls.n	80063fe <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	e0ac      	b.n	8006558 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2203      	movs	r2, #3
 8006402:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2200      	movs	r2, #0
 800640c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 800641c:	f043 0302 	orr.w	r3, r3, #2
 8006420:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006426:	4a4e      	ldr	r2, [pc, #312]	@ (8006560 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006428:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800642e:	4a4d      	ldr	r2, [pc, #308]	@ (8006564 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006430:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006436:	2200      	movs	r2, #0
 8006438:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800643e:	2b01      	cmp	r3, #1
 8006440:	d002      	beq.n	8006448 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	025b      	lsls	r3, r3, #9
 8006446:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b01      	cmp	r3, #1
 800644c:	d90a      	bls.n	8006464 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	22a0      	movs	r2, #160	@ 0xa0
 8006452:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800645a:	4618      	mov	r0, r3
 800645c:	f002 fe9b 	bl	8009196 <SDMMC_CmdWriteMultiBlock>
 8006460:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006462:	e009      	b.n	8006478 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2290      	movs	r2, #144	@ 0x90
 8006468:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006470:	4618      	mov	r0, r3
 8006472:	f002 fe6e 	bl	8009152 <SDMMC_CmdWriteSingleBlock>
 8006476:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006478:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647a:	2b00      	cmp	r3, #0
 800647c:	d012      	beq.n	80064a4 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a39      	ldr	r2, [pc, #228]	@ (8006568 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006484:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800648a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648c:	431a      	orrs	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80064a0:	2301      	movs	r3, #1
 80064a2:	e059      	b.n	8006558 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80064a4:	4b31      	ldr	r3, [pc, #196]	@ (800656c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ae:	2240      	movs	r2, #64	@ 0x40
 80064b0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c2:	689a      	ldr	r2, [r3, #8]
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	430a      	orrs	r2, r1
 80064cc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80064d2:	68b9      	ldr	r1, [r7, #8]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3380      	adds	r3, #128	@ 0x80
 80064da:	461a      	mov	r2, r3
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	025b      	lsls	r3, r3, #9
 80064e0:	089b      	lsrs	r3, r3, #2
 80064e2:	f7fd f9bf 	bl	8003864 <HAL_DMA_Start_IT>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01c      	beq.n	8006526 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	6812      	ldr	r2, [r2, #0]
 80064f6:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 80064fa:	f023 0302 	bic.w	r3, r3, #2
 80064fe:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	4a18      	ldr	r2, [pc, #96]	@ (8006568 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006506:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2200      	movs	r2, #0
 8006520:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	e018      	b.n	8006558 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006526:	f04f 33ff 	mov.w	r3, #4294967295
 800652a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	025b      	lsls	r3, r3, #9
 8006530:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006532:	2390      	movs	r3, #144	@ 0x90
 8006534:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006536:	2300      	movs	r3, #0
 8006538:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800653a:	2300      	movs	r3, #0
 800653c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800653e:	2301      	movs	r3, #1
 8006540:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f107 0210 	add.w	r2, r7, #16
 800654a:	4611      	mov	r1, r2
 800654c:	4618      	mov	r0, r3
 800654e:	f002 fd6e 	bl	800902e <SDIO_ConfigData>

      return HAL_OK;
 8006552:	2300      	movs	r3, #0
 8006554:	e000      	b.n	8006558 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006556:	2302      	movs	r3, #2
  }
}
 8006558:	4618      	mov	r0, r3
 800655a:	3730      	adds	r7, #48	@ 0x30
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}
 8006560:	08006da5 	.word	0x08006da5
 8006564:	08006e41 	.word	0x08006e41
 8006568:	004005ff 	.word	0x004005ff
 800656c:	4225858c 	.word	0x4225858c

08006570 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d008      	beq.n	800659e <HAL_SD_IRQHandler+0x2e>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f001 f806 	bl	80075a8 <SD_Read_IT>
 800659c:	e165      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 808f 	beq.w	80066cc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80065b6:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065be:	687a      	ldr	r2, [r7, #4]
 80065c0:	6812      	ldr	r2, [r2, #0]
 80065c2:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80065c6:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80065ca:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f022 0201 	bic.w	r2, r2, #1
 80065da:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 0308 	and.w	r3, r3, #8
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d039      	beq.n	800665a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f003 0302 	and.w	r3, r3, #2
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d104      	bne.n	80065fa <HAL_SD_IRQHandler+0x8a>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f003 0320 	and.w	r3, r3, #32
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d011      	beq.n	800661e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4618      	mov	r0, r3
 8006600:	f002 fdec 	bl	80091dc <SDMMC_CmdStopTransfer>
 8006604:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d008      	beq.n	800661e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	431a      	orrs	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f92f 	bl	800687c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006626:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d104      	bne.n	800664a <HAL_SD_IRQHandler+0xda>
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f003 fa52 	bl	8009af4 <HAL_SD_RxCpltCallback>
 8006650:	e10b      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f003 fa44 	bl	8009ae0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006658:	e107      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006660:	2b00      	cmp	r3, #0
 8006662:	f000 8102 	beq.w	800686a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 0320 	and.w	r3, r3, #32
 800666c:	2b00      	cmp	r3, #0
 800666e:	d011      	beq.n	8006694 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f002 fdb1 	bl	80091dc <SDMMC_CmdStopTransfer>
 800667a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d008      	beq.n	8006694 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f8f4 	bl	800687c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 0301 	and.w	r3, r3, #1
 800669a:	2b00      	cmp	r3, #0
 800669c:	f040 80e5 	bne.w	800686a <HAL_SD_IRQHandler+0x2fa>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f040 80df 	bne.w	800686a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f022 0208 	bic.w	r2, r2, #8
 80066ba:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f003 fa0b 	bl	8009ae0 <HAL_SD_TxCpltCallback>
}
 80066ca:	e0ce      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d008      	beq.n	80066ec <HAL_SD_IRQHandler+0x17c>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 ffb0 	bl	800764a <SD_Write_IT>
 80066ea:	e0be      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066f2:	f240 233a 	movw	r3, #570	@ 0x23a
 80066f6:	4013      	ands	r3, r2
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80b6 	beq.w	800686a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006704:	f003 0302 	and.w	r3, r3, #2
 8006708:	2b00      	cmp	r3, #0
 800670a:	d005      	beq.n	8006718 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006710:	f043 0202 	orr.w	r2, r3, #2
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800671e:	f003 0308 	and.w	r3, r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800672a:	f043 0208 	orr.w	r2, r3, #8
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006738:	f003 0320 	and.w	r3, r3, #32
 800673c:	2b00      	cmp	r3, #0
 800673e:	d005      	beq.n	800674c <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006744:	f043 0220 	orr.w	r2, r3, #32
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006752:	f003 0310 	and.w	r3, r3, #16
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800675e:	f043 0210 	orr.w	r2, r3, #16
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800676c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006770:	2b00      	cmp	r3, #0
 8006772:	d005      	beq.n	8006780 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006778:	f043 0208 	orr.w	r2, r3, #8
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f240 723a 	movw	r2, #1850	@ 0x73a
 8006788:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	6812      	ldr	r2, [r2, #0]
 8006794:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8006798:	f023 0302 	bic.w	r3, r3, #2
 800679c:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4618      	mov	r0, r3
 80067a4:	f002 fd1a 	bl	80091dc <SDMMC_CmdStopTransfer>
 80067a8:	4602      	mov	r2, r0
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ae:	431a      	orrs	r2, r3
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d00a      	beq.n	80067d4 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f000 f855 	bl	800687c <HAL_SD_ErrorCallback>
}
 80067d2:	e04a      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d045      	beq.n	800686a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	f003 0310 	and.w	r3, r3, #16
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d104      	bne.n	80067f2 <HAL_SD_IRQHandler+0x282>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d011      	beq.n	8006816 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067f6:	4a1f      	ldr	r2, [pc, #124]	@ (8006874 <HAL_SD_IRQHandler+0x304>)
 80067f8:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067fe:	4618      	mov	r0, r3
 8006800:	f7fd f8f8 	bl	80039f4 <HAL_DMA_Abort_IT>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d02f      	beq.n	800686a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fb68 	bl	8006ee4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006814:	e029      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f003 0301 	and.w	r3, r3, #1
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <HAL_SD_IRQHandler+0x2ba>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f003 0302 	and.w	r3, r3, #2
 8006826:	2b00      	cmp	r3, #0
 8006828:	d011      	beq.n	800684e <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	4a12      	ldr	r2, [pc, #72]	@ (8006878 <HAL_SD_IRQHandler+0x308>)
 8006830:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006836:	4618      	mov	r0, r3
 8006838:	f7fd f8dc 	bl	80039f4 <HAL_DMA_Abort_IT>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d013      	beq.n	800686a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006846:	4618      	mov	r0, r3
 8006848:	f000 fb83 	bl	8006f52 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800684c:	e00d      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2200      	movs	r2, #0
 8006852:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f003 f932 	bl	8009acc <HAL_SD_AbortCallback>
}
 8006868:	e7ff      	b.n	800686a <HAL_SD_IRQHandler+0x2fa>
 800686a:	bf00      	nop
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	08006ee5 	.word	0x08006ee5
 8006878:	08006f53 	.word	0x08006f53

0800687c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800689e:	0f9b      	lsrs	r3, r3, #30
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068aa:	0e9b      	lsrs	r3, r3, #26
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 030f 	and.w	r3, r3, #15
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068bc:	0e1b      	lsrs	r3, r3, #24
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	f003 0303 	and.w	r3, r3, #3
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068ce:	0c1b      	lsrs	r3, r3, #16
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068da:	0a1b      	lsrs	r3, r3, #8
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068e6:	b2da      	uxtb	r2, r3
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068f0:	0d1b      	lsrs	r3, r3, #20
 80068f2:	b29a      	uxth	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80068fc:	0c1b      	lsrs	r3, r3, #16
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	f003 030f 	and.w	r3, r3, #15
 8006904:	b2da      	uxtb	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800690e:	0bdb      	lsrs	r3, r3, #15
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0301 	and.w	r3, r3, #1
 8006916:	b2da      	uxtb	r2, r3
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006920:	0b9b      	lsrs	r3, r3, #14
 8006922:	b2db      	uxtb	r3, r3
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	b2da      	uxtb	r2, r3
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006932:	0b5b      	lsrs	r3, r3, #13
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	b2da      	uxtb	r2, r3
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006944:	0b1b      	lsrs	r3, r3, #12
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f003 0301 	and.w	r3, r3, #1
 800694c:	b2da      	uxtb	r2, r3
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2200      	movs	r2, #0
 8006956:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800695c:	2b00      	cmp	r3, #0
 800695e:	d163      	bne.n	8006a28 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006964:	009a      	lsls	r2, r3, #2
 8006966:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800696a:	4013      	ands	r3, r2
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8006970:	0f92      	lsrs	r2, r2, #30
 8006972:	431a      	orrs	r2, r3
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800697c:	0edb      	lsrs	r3, r3, #27
 800697e:	b2db      	uxtb	r3, r3
 8006980:	f003 0307 	and.w	r3, r3, #7
 8006984:	b2da      	uxtb	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800698e:	0e1b      	lsrs	r3, r3, #24
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0307 	and.w	r3, r3, #7
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069a0:	0d5b      	lsrs	r3, r3, #21
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	f003 0307 	and.w	r3, r3, #7
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069b2:	0c9b      	lsrs	r3, r3, #18
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	f003 0307 	and.w	r3, r3, #7
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80069c4:	0bdb      	lsrs	r3, r3, #15
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	b2da      	uxtb	r2, r3
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80069d2:	683b      	ldr	r3, [r7, #0]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	7e1b      	ldrb	r3, [r3, #24]
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	3302      	adds	r3, #2
 80069e8:	2201      	movs	r2, #1
 80069ea:	fa02 f303 	lsl.w	r3, r2, r3
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80069f2:	fb03 f202 	mul.w	r2, r3, r2
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	7a1b      	ldrb	r3, [r3, #8]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	f003 030f 	and.w	r3, r3, #15
 8006a04:	2201      	movs	r2, #1
 8006a06:	409a      	lsls	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8006a14:	0a52      	lsrs	r2, r2, #9
 8006a16:	fb03 f202 	mul.w	r2, r3, r2
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a24:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a26:	e031      	b.n	8006a8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d11d      	bne.n	8006a6c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006a34:	041b      	lsls	r3, r3, #16
 8006a36:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a3e:	0c1b      	lsrs	r3, r3, #16
 8006a40:	431a      	orrs	r2, r3
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	691b      	ldr	r3, [r3, #16]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	029a      	lsls	r2, r3, #10
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006a60:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	661a      	str	r2, [r3, #96]	@ 0x60
 8006a6a:	e00f      	b.n	8006a8c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a58      	ldr	r2, [pc, #352]	@ (8006bd4 <HAL_SD_GetCardCSD+0x344>)
 8006a72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a78:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e09d      	b.n	8006bc8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a90:	0b9b      	lsrs	r3, r3, #14
 8006a92:	b2db      	uxtb	r3, r3
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006aa2:	09db      	lsrs	r3, r3, #7
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ac4:	0fdb      	lsrs	r3, r3, #31
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ad0:	0f5b      	lsrs	r3, r3, #29
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	f003 0303 	and.w	r3, r3, #3
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae2:	0e9b      	lsrs	r3, r3, #26
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	f003 0307 	and.w	r3, r3, #7
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af4:	0d9b      	lsrs	r3, r3, #22
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	f003 030f 	and.w	r3, r3, #15
 8006afc:	b2da      	uxtb	r2, r3
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b06:	0d5b      	lsrs	r3, r3, #21
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	f003 0301 	and.w	r3, r3, #1
 8006b0e:	b2da      	uxtb	r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2200      	movs	r2, #0
 8006b1a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b22:	0c1b      	lsrs	r3, r3, #16
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	f003 0301 	and.w	r3, r3, #1
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b36:	0bdb      	lsrs	r3, r3, #15
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b4a:	0b9b      	lsrs	r3, r3, #14
 8006b4c:	b2db      	uxtb	r3, r3
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5e:	0b5b      	lsrs	r3, r3, #13
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b72:	0b1b      	lsrs	r3, r3, #12
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	f003 0301 	and.w	r3, r3, #1
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b86:	0a9b      	lsrs	r3, r3, #10
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	f003 0303 	and.w	r3, r3, #3
 8006b8e:	b2da      	uxtb	r2, r3
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b9a:	0a1b      	lsrs	r3, r3, #8
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	f003 0303 	and.w	r3, r3, #3
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006bae:	085b      	lsrs	r3, r3, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb6:	b2da      	uxtb	r2, r3
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006bc6:	2300      	movs	r3, #0
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	004005ff 	.word	0x004005ff

08006bd8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006c30:	b5b0      	push	{r4, r5, r7, lr}
 8006c32:	b08e      	sub	sp, #56	@ 0x38
 8006c34:	af04      	add	r7, sp, #16
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2203      	movs	r2, #3
 8006c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d02e      	beq.n	8006cae <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c56:	d106      	bne.n	8006c66 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c64:	e029      	b.n	8006cba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c6c:	d10a      	bne.n	8006c84 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fb2a 	bl	80072c8 <SD_WideBus_Enable>
 8006c74:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c7a:	6a3b      	ldr	r3, [r7, #32]
 8006c7c:	431a      	orrs	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c82:	e01a      	b.n	8006cba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10a      	bne.n	8006ca0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 fb67 	bl	800735e <SD_WideBus_Disable>
 8006c90:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c96:	6a3b      	ldr	r3, [r7, #32]
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c9e:	e00c      	b.n	8006cba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ca4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cac:	e005      	b.n	8006cba <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a26      	ldr	r2, [pc, #152]	@ (8006d60 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006cd8:	e01f      	b.n	8006d1a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	695b      	ldr	r3, [r3, #20]
 8006cf4:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	699b      	ldr	r3, [r3, #24]
 8006cfa:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681d      	ldr	r5, [r3, #0]
 8006d00:	466c      	mov	r4, sp
 8006d02:	f107 0314 	add.w	r3, r7, #20
 8006d06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006d0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006d0e:	f107 0308 	add.w	r3, r7, #8
 8006d12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d14:	4628      	mov	r0, r5
 8006d16:	f002 f8db 	bl	8008ed0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006d22:	4618      	mov	r0, r3
 8006d24:	f002 f9af 	bl	8009086 <SDMMC_CmdBlockLength>
 8006d28:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d00c      	beq.n	8006d4a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a0a      	ldr	r2, [pc, #40]	@ (8006d60 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006d36:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d3c:	6a3b      	ldr	r3, [r7, #32]
 8006d3e:	431a      	orrs	r2, r3
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8006d52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3728      	adds	r7, #40	@ 0x28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bdb0      	pop	{r4, r5, r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	004005ff 	.word	0x004005ff

08006d64 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006d70:	f107 030c 	add.w	r3, r7, #12
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fa7e 	bl	8007278 <SD_SendStatus>
 8006d7c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d005      	beq.n	8006d90 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	431a      	orrs	r2, r3
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	0a5b      	lsrs	r3, r3, #9
 8006d94:	f003 030f 	and.w	r3, r3, #15
 8006d98:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006d9a:	693b      	ldr	r3, [r7, #16]
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}

08006da4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006dc0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006dc2:	bf00      	nop
 8006dc4:	3714      	adds	r7, #20
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dcc:	4770      	bx	lr

08006dce <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dce:	b580      	push	{r7, lr}
 8006dd0:	b084      	sub	sp, #16
 8006dd2:	af00      	add	r7, sp, #0
 8006dd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dda:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006de0:	2b82      	cmp	r3, #130	@ 0x82
 8006de2:	d111      	bne.n	8006e08 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4618      	mov	r0, r3
 8006dea:	f002 f9f7 	bl	80091dc <SDMMC_CmdStopTransfer>
 8006dee:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d008      	beq.n	8006e08 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	431a      	orrs	r2, r3
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8006e02:	68f8      	ldr	r0, [r7, #12]
 8006e04:	f7ff fd3a 	bl	800687c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f022 0208 	bic.w	r2, r2, #8
 8006e16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006e20:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2201      	movs	r2, #1
 8006e26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006e30:	68f8      	ldr	r0, [r7, #12]
 8006e32:	f002 fe5f 	bl	8009af4 <HAL_SD_RxCpltCallback>
#endif
}
 8006e36:	bf00      	nop
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
	...

08006e40 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b086      	sub	sp, #24
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e4c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f7fc ff7c 	bl	8003d4c <HAL_DMA_GetError>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d03e      	beq.n	8006ed8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e60:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006e68:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d002      	beq.n	8006e76 <SD_DMAError+0x36>
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d12d      	bne.n	8006ed2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a19      	ldr	r2, [pc, #100]	@ (8006ee0 <SD_DMAError+0xa0>)
 8006e7c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8006e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e92:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8006e9a:	6978      	ldr	r0, [r7, #20]
 8006e9c:	f7ff ff62 	bl	8006d64 <HAL_SD_GetCardState>
 8006ea0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	2b06      	cmp	r3, #6
 8006ea6:	d002      	beq.n	8006eae <SD_DMAError+0x6e>
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2b05      	cmp	r3, #5
 8006eac:	d10a      	bne.n	8006ec4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f002 f992 	bl	80091dc <SDMMC_CmdStopTransfer>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006ed2:	6978      	ldr	r0, [r7, #20]
 8006ed4:	f7ff fcd2 	bl	800687c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	004005ff 	.word	0x004005ff

08006ee4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006efa:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006efc:	68f8      	ldr	r0, [r7, #12]
 8006efe:	f7ff ff31 	bl	8006d64 <HAL_SD_GetCardState>
 8006f02:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b06      	cmp	r3, #6
 8006f16:	d002      	beq.n	8006f1e <SD_DMATxAbort+0x3a>
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	2b05      	cmp	r3, #5
 8006f1c:	d10a      	bne.n	8006f34 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f002 f95a 	bl	80091dc <SDMMC_CmdStopTransfer>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d103      	bne.n	8006f44 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f002 fdc5 	bl	8009acc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006f42:	e002      	b.n	8006f4a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7ff fc99 	bl	800687c <HAL_SD_ErrorCallback>
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b084      	sub	sp, #16
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f5e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006f68:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f7ff fefa 	bl	8006d64 <HAL_SD_GetCardState>
 8006f70:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	2b06      	cmp	r3, #6
 8006f84:	d002      	beq.n	8006f8c <SD_DMARxAbort+0x3a>
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	2b05      	cmp	r3, #5
 8006f8a:	d10a      	bne.n	8006fa2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4618      	mov	r0, r3
 8006f92:	f002 f923 	bl	80091dc <SDMMC_CmdStopTransfer>
 8006f96:	4602      	mov	r2, r0
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d103      	bne.n	8006fb2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f002 fd8e 	bl	8009acc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006fb0:	e002      	b.n	8006fb8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006fb2:	68f8      	ldr	r0, [r7, #12]
 8006fb4:	f7ff fc62 	bl	800687c <HAL_SD_ErrorCallback>
}
 8006fb8:	bf00      	nop
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006fc0:	b5b0      	push	{r4, r5, r7, lr}
 8006fc2:	b094      	sub	sp, #80	@ 0x50
 8006fc4:	af04      	add	r7, sp, #16
 8006fc6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f001 ffd4 	bl	8008f7e <SDIO_GetPowerState>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d102      	bne.n	8006fe2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006fdc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006fe0:	e0b8      	b.n	8007154 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fe6:	2b03      	cmp	r3, #3
 8006fe8:	d02f      	beq.n	800704a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f002 f9fe 	bl	80093f0 <SDMMC_CmdSendCID>
 8006ff4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006ff6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d001      	beq.n	8007000 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ffc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ffe:	e0a9      	b.n	8007154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	2100      	movs	r1, #0
 8007006:	4618      	mov	r0, r3
 8007008:	f001 fffe 	bl	8009008 <SDIO_GetResponse>
 800700c:	4602      	mov	r2, r0
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2104      	movs	r1, #4
 8007018:	4618      	mov	r0, r3
 800701a:	f001 fff5 	bl	8009008 <SDIO_GetResponse>
 800701e:	4602      	mov	r2, r0
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2108      	movs	r1, #8
 800702a:	4618      	mov	r0, r3
 800702c:	f001 ffec 	bl	8009008 <SDIO_GetResponse>
 8007030:	4602      	mov	r2, r0
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	210c      	movs	r1, #12
 800703c:	4618      	mov	r0, r3
 800703e:	f001 ffe3 	bl	8009008 <SDIO_GetResponse>
 8007042:	4602      	mov	r2, r0
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800704e:	2b03      	cmp	r3, #3
 8007050:	d00d      	beq.n	800706e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f107 020e 	add.w	r2, r7, #14
 800705a:	4611      	mov	r1, r2
 800705c:	4618      	mov	r0, r3
 800705e:	f002 fa04 	bl	800946a <SDMMC_CmdSetRelAdd>
 8007062:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <SD_InitCard+0xae>
    {
      return errorstate;
 800706a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800706c:	e072      	b.n	8007154 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007072:	2b03      	cmp	r3, #3
 8007074:	d036      	beq.n	80070e4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007076:	89fb      	ldrh	r3, [r7, #14]
 8007078:	461a      	mov	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007086:	041b      	lsls	r3, r3, #16
 8007088:	4619      	mov	r1, r3
 800708a:	4610      	mov	r0, r2
 800708c:	f002 f9ce 	bl	800942c <SDMMC_CmdSendCSD>
 8007090:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007092:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <SD_InitCard+0xdc>
    {
      return errorstate;
 8007098:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800709a:	e05b      	b.n	8007154 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	2100      	movs	r1, #0
 80070a2:	4618      	mov	r0, r3
 80070a4:	f001 ffb0 	bl	8009008 <SDIO_GetResponse>
 80070a8:	4602      	mov	r2, r0
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	2104      	movs	r1, #4
 80070b4:	4618      	mov	r0, r3
 80070b6:	f001 ffa7 	bl	8009008 <SDIO_GetResponse>
 80070ba:	4602      	mov	r2, r0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2108      	movs	r1, #8
 80070c6:	4618      	mov	r0, r3
 80070c8:	f001 ff9e 	bl	8009008 <SDIO_GetResponse>
 80070cc:	4602      	mov	r2, r0
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	210c      	movs	r1, #12
 80070d8:	4618      	mov	r0, r3
 80070da:	f001 ff95 	bl	8009008 <SDIO_GetResponse>
 80070de:	4602      	mov	r2, r0
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	2104      	movs	r1, #4
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 ff8c 	bl	8009008 <SDIO_GetResponse>
 80070f0:	4603      	mov	r3, r0
 80070f2:	0d1a      	lsrs	r2, r3, #20
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80070f8:	f107 0310 	add.w	r3, r7, #16
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7ff fbc6 	bl	8006890 <HAL_SD_GetCardCSD>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800710a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800710e:	e021      	b.n	8007154 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6819      	ldr	r1, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007118:	041b      	lsls	r3, r3, #16
 800711a:	2200      	movs	r2, #0
 800711c:	461c      	mov	r4, r3
 800711e:	4615      	mov	r5, r2
 8007120:	4622      	mov	r2, r4
 8007122:	462b      	mov	r3, r5
 8007124:	4608      	mov	r0, r1
 8007126:	f002 f87b 	bl	8009220 <SDMMC_CmdSelDesel>
 800712a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800712c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <SD_InitCard+0x176>
  {
    return errorstate;
 8007132:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007134:	e00e      	b.n	8007154 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681d      	ldr	r5, [r3, #0]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	466c      	mov	r4, sp
 800713e:	f103 0210 	add.w	r2, r3, #16
 8007142:	ca07      	ldmia	r2, {r0, r1, r2}
 8007144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007148:	3304      	adds	r3, #4
 800714a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800714c:	4628      	mov	r0, r5
 800714e:	f001 febf 	bl	8008ed0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007152:	2300      	movs	r3, #0
}
 8007154:	4618      	mov	r0, r3
 8007156:	3740      	adds	r7, #64	@ 0x40
 8007158:	46bd      	mov	sp, r7
 800715a:	bdb0      	pop	{r4, r5, r7, pc}

0800715c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b086      	sub	sp, #24
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007168:	2300      	movs	r3, #0
 800716a:	617b      	str	r3, [r7, #20]
 800716c:	2300      	movs	r3, #0
 800716e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4618      	mov	r0, r3
 8007176:	f002 f876 	bl	8009266 <SDMMC_CmdGoIdleState>
 800717a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d001      	beq.n	8007186 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	e072      	b.n	800726c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f002 f889 	bl	80092a2 <SDMMC_CmdOperCond>
 8007190:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d00d      	beq.n	80071b4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4618      	mov	r0, r3
 80071a4:	f002 f85f 	bl	8009266 <SDMMC_CmdGoIdleState>
 80071a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d004      	beq.n	80071ba <SD_PowerON+0x5e>
    {
      return errorstate;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	e05b      	b.n	800726c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d137      	bne.n	8007232 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2100      	movs	r1, #0
 80071c8:	4618      	mov	r0, r3
 80071ca:	f002 f889 	bl	80092e0 <SDMMC_CmdAppCommand>
 80071ce:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d02d      	beq.n	8007232 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80071d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80071da:	e047      	b.n	800726c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2100      	movs	r1, #0
 80071e2:	4618      	mov	r0, r3
 80071e4:	f002 f87c 	bl	80092e0 <SDMMC_CmdAppCommand>
 80071e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <SD_PowerON+0x98>
    {
      return errorstate;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	e03b      	b.n	800726c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	491e      	ldr	r1, [pc, #120]	@ (8007274 <SD_PowerON+0x118>)
 80071fa:	4618      	mov	r0, r3
 80071fc:	f002 f892 	bl	8009324 <SDMMC_CmdAppOperCommand>
 8007200:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007208:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800720c:	e02e      	b.n	800726c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2100      	movs	r1, #0
 8007214:	4618      	mov	r0, r3
 8007216:	f001 fef7 	bl	8009008 <SDIO_GetResponse>
 800721a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	0fdb      	lsrs	r3, r3, #31
 8007220:	2b01      	cmp	r3, #1
 8007222:	d101      	bne.n	8007228 <SD_PowerON+0xcc>
 8007224:	2301      	movs	r3, #1
 8007226:	e000      	b.n	800722a <SD_PowerON+0xce>
 8007228:	2300      	movs	r3, #0
 800722a:	613b      	str	r3, [r7, #16]

    count++;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	3301      	adds	r3, #1
 8007230:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007238:	4293      	cmp	r3, r2
 800723a:	d802      	bhi.n	8007242 <SD_PowerON+0xe6>
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0cc      	beq.n	80071dc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8007248:	4293      	cmp	r3, r2
 800724a:	d902      	bls.n	8007252 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800724c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007250:	e00c      	b.n	800726c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2201      	movs	r2, #1
 8007260:	645a      	str	r2, [r3, #68]	@ 0x44
 8007262:	e002      	b.n	800726a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	c1100000 	.word	0xc1100000

08007278 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d102      	bne.n	800728e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007288:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800728c:	e018      	b.n	80072c0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681a      	ldr	r2, [r3, #0]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007296:	041b      	lsls	r3, r3, #16
 8007298:	4619      	mov	r1, r3
 800729a:	4610      	mov	r0, r2
 800729c:	f002 f906 	bl	80094ac <SDMMC_CmdSendStatus>
 80072a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <SD_SendStatus+0x34>
  {
    return errorstate;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	e009      	b.n	80072c0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2100      	movs	r1, #0
 80072b2:	4618      	mov	r0, r3
 80072b4:	f001 fea8 	bl	8009008 <SDIO_GetResponse>
 80072b8:	4602      	mov	r2, r0
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072be:	2300      	movs	r3, #0
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}

080072c8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b086      	sub	sp, #24
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80072d0:	2300      	movs	r3, #0
 80072d2:	60fb      	str	r3, [r7, #12]
 80072d4:	2300      	movs	r3, #0
 80072d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2100      	movs	r1, #0
 80072de:	4618      	mov	r0, r3
 80072e0:	f001 fe92 	bl	8009008 <SDIO_GetResponse>
 80072e4:	4603      	mov	r3, r0
 80072e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072ea:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80072ee:	d102      	bne.n	80072f6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80072f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80072f4:	e02f      	b.n	8007356 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80072f6:	f107 030c 	add.w	r3, r7, #12
 80072fa:	4619      	mov	r1, r3
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 f879 	bl	80073f4 <SD_FindSCR>
 8007302:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d001      	beq.n	800730e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	e023      	b.n	8007356 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01c      	beq.n	8007352 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007320:	041b      	lsls	r3, r3, #16
 8007322:	4619      	mov	r1, r3
 8007324:	4610      	mov	r0, r2
 8007326:	f001 ffdb 	bl	80092e0 <SDMMC_CmdAppCommand>
 800732a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d001      	beq.n	8007336 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	e00f      	b.n	8007356 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	2102      	movs	r1, #2
 800733c:	4618      	mov	r0, r3
 800733e:	f002 f814 	bl	800936a <SDMMC_CmdBusWidth>
 8007342:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	e003      	b.n	8007356 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800734e:	2300      	movs	r3, #0
 8007350:	e001      	b.n	8007356 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007352:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}

0800735e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800735e:	b580      	push	{r7, lr}
 8007360:	b086      	sub	sp, #24
 8007362:	af00      	add	r7, sp, #0
 8007364:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007366:	2300      	movs	r3, #0
 8007368:	60fb      	str	r3, [r7, #12]
 800736a:	2300      	movs	r3, #0
 800736c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2100      	movs	r1, #0
 8007374:	4618      	mov	r0, r3
 8007376:	f001 fe47 	bl	8009008 <SDIO_GetResponse>
 800737a:	4603      	mov	r3, r0
 800737c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007380:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007384:	d102      	bne.n	800738c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007386:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800738a:	e02f      	b.n	80073ec <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800738c:	f107 030c 	add.w	r3, r7, #12
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 f82e 	bl	80073f4 <SD_FindSCR>
 8007398:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d001      	beq.n	80073a4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	e023      	b.n	80073ec <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d01c      	beq.n	80073e8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073b6:	041b      	lsls	r3, r3, #16
 80073b8:	4619      	mov	r1, r3
 80073ba:	4610      	mov	r0, r2
 80073bc:	f001 ff90 	bl	80092e0 <SDMMC_CmdAppCommand>
 80073c0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	e00f      	b.n	80073ec <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2100      	movs	r1, #0
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 ffc9 	bl	800936a <SDMMC_CmdBusWidth>
 80073d8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d001      	beq.n	80073e4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	e003      	b.n	80073ec <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80073e4:	2300      	movs	r3, #0
 80073e6:	e001      	b.n	80073ec <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80073e8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80073f4:	b590      	push	{r4, r7, lr}
 80073f6:	b08f      	sub	sp, #60	@ 0x3c
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80073fe:	f7fb fdcf 	bl	8002fa0 <HAL_GetTick>
 8007402:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007408:	2300      	movs	r3, #0
 800740a:	60bb      	str	r3, [r7, #8]
 800740c:	2300      	movs	r3, #0
 800740e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2108      	movs	r1, #8
 800741a:	4618      	mov	r0, r3
 800741c:	f001 fe33 	bl	8009086 <SDMMC_CmdBlockLength>
 8007420:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	d001      	beq.n	800742c <SD_FindSCR+0x38>
  {
    return errorstate;
 8007428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800742a:	e0b9      	b.n	80075a0 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007434:	041b      	lsls	r3, r3, #16
 8007436:	4619      	mov	r1, r3
 8007438:	4610      	mov	r0, r2
 800743a:	f001 ff51 	bl	80092e0 <SDMMC_CmdAppCommand>
 800743e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007442:	2b00      	cmp	r3, #0
 8007444:	d001      	beq.n	800744a <SD_FindSCR+0x56>
  {
    return errorstate;
 8007446:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007448:	e0aa      	b.n	80075a0 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800744a:	f04f 33ff 	mov.w	r3, #4294967295
 800744e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007450:	2308      	movs	r3, #8
 8007452:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007454:	2330      	movs	r3, #48	@ 0x30
 8007456:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007458:	2302      	movs	r3, #2
 800745a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800745c:	2300      	movs	r3, #0
 800745e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007460:	2301      	movs	r3, #1
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	f107 0210 	add.w	r2, r7, #16
 800746c:	4611      	mov	r1, r2
 800746e:	4618      	mov	r0, r3
 8007470:	f001 fddd 	bl	800902e <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4618      	mov	r0, r3
 800747a:	f001 ff98 	bl	80093ae <SDMMC_CmdSendSCR>
 800747e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007482:	2b00      	cmp	r3, #0
 8007484:	d02a      	beq.n	80074dc <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	e08a      	b.n	80075a0 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007490:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d00f      	beq.n	80074b8 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6819      	ldr	r1, [r3, #0]
 800749c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800749e:	009b      	lsls	r3, r3, #2
 80074a0:	f107 0208 	add.w	r2, r7, #8
 80074a4:	18d4      	adds	r4, r2, r3
 80074a6:	4608      	mov	r0, r1
 80074a8:	f001 fd3d 	bl	8008f26 <SDIO_ReadFIFO>
 80074ac:	4603      	mov	r3, r0
 80074ae:	6023      	str	r3, [r4, #0]
      index++;
 80074b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b2:	3301      	adds	r3, #1
 80074b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80074b6:	e006      	b.n	80074c6 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d012      	beq.n	80074ec <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80074c6:	f7fb fd6b 	bl	8002fa0 <HAL_GetTick>
 80074ca:	4602      	mov	r2, r0
 80074cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074d4:	d102      	bne.n	80074dc <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80074d6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80074da:	e061      	b.n	80075a0 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074e2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d0cf      	beq.n	800748a <SD_FindSCR+0x96>
 80074ea:	e000      	b.n	80074ee <SD_FindSCR+0xfa>
      break;
 80074ec:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074f4:	f003 0308 	and.w	r3, r3, #8
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d106      	bne.n	800750a <SD_FindSCR+0x116>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007502:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007506:	2b00      	cmp	r3, #0
 8007508:	d005      	beq.n	8007516 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2208      	movs	r2, #8
 8007510:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007512:	2308      	movs	r3, #8
 8007514:	e044      	b.n	80075a0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d005      	beq.n	8007530 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2202      	movs	r2, #2
 800752a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800752c:	2302      	movs	r3, #2
 800752e:	e037      	b.n	80075a0 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007536:	f003 0320 	and.w	r3, r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	2220      	movs	r2, #32
 8007544:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007546:	2320      	movs	r3, #32
 8007548:	e02a      	b.n	80075a0 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8007552:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	061a      	lsls	r2, r3, #24
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007560:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	0a1b      	lsrs	r3, r3, #8
 8007566:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800756a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	0e1b      	lsrs	r3, r3, #24
 8007570:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007574:	601a      	str	r2, [r3, #0]
    scr++;
 8007576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007578:	3304      	adds	r3, #4
 800757a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	061a      	lsls	r2, r3, #24
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007588:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	0a1b      	lsrs	r3, r3, #8
 800758e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007592:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	0e1b      	lsrs	r3, r3, #24
 8007598:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800759a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800759c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	373c      	adds	r7, #60	@ 0x3c
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd90      	pop	{r4, r7, pc}

080075a8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ba:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d03f      	beq.n	8007642 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80075c2:	2300      	movs	r3, #0
 80075c4:	617b      	str	r3, [r7, #20]
 80075c6:	e033      	b.n	8007630 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f001 fcaa 	bl	8008f26 <SDIO_ReadFIFO>
 80075d2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	3301      	adds	r3, #1
 80075e0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	3b01      	subs	r3, #1
 80075e6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	0a1b      	lsrs	r3, r3, #8
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	3301      	adds	r3, #1
 80075f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3b01      	subs	r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	0c1b      	lsrs	r3, r3, #16
 8007602:	b2da      	uxtb	r2, r3
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	3301      	adds	r3, #1
 800760c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	3b01      	subs	r3, #1
 8007612:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	0e1b      	lsrs	r3, r3, #24
 8007618:	b2da      	uxtb	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	3301      	adds	r3, #1
 8007622:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	3b01      	subs	r3, #1
 8007628:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3301      	adds	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b07      	cmp	r3, #7
 8007634:	d9c8      	bls.n	80075c8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	693a      	ldr	r2, [r7, #16]
 8007640:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8007642:	bf00      	nop
 8007644:	3718      	adds	r7, #24
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b086      	sub	sp, #24
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d043      	beq.n	80076ec <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007664:	2300      	movs	r3, #0
 8007666:	617b      	str	r3, [r7, #20]
 8007668:	e037      	b.n	80076da <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	3b01      	subs	r3, #1
 800767a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	021a      	lsls	r2, r3, #8
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	4313      	orrs	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	3301      	adds	r3, #1
 800768c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	3b01      	subs	r3, #1
 8007692:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	041a      	lsls	r2, r3, #16
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4313      	orrs	r3, r2
 800769e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	3301      	adds	r3, #1
 80076a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	061a      	lsls	r2, r3, #24
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	3301      	adds	r3, #1
 80076bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	3b01      	subs	r3, #1
 80076c2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f107 0208 	add.w	r2, r7, #8
 80076cc:	4611      	mov	r1, r2
 80076ce:	4618      	mov	r0, r3
 80076d0:	f001 fc36 	bl	8008f40 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	3301      	adds	r3, #1
 80076d8:	617b      	str	r3, [r7, #20]
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	2b07      	cmp	r3, #7
 80076de:	d9c4      	bls.n	800766a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80076ec:	bf00      	nop
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b082      	sub	sp, #8
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d101      	bne.n	8007706 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e041      	b.n	800778a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800770c:	b2db      	uxtb	r3, r3
 800770e:	2b00      	cmp	r3, #0
 8007710:	d106      	bne.n	8007720 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f7fb f95a 	bl	80029d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2202      	movs	r2, #2
 8007724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681a      	ldr	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	3304      	adds	r3, #4
 8007730:	4619      	mov	r1, r3
 8007732:	4610      	mov	r0, r2
 8007734:	f000 f8f0 	bl	8007918 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2201      	movs	r2, #1
 800774c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2201      	movs	r2, #1
 800775c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2201      	movs	r2, #1
 800776c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b086      	sub	sp, #24
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80077a0:	2300      	movs	r3, #0
 80077a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e0ae      	b.n	8007910 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b0c      	cmp	r3, #12
 80077be:	f200 809f 	bhi.w	8007900 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80077c2:	a201      	add	r2, pc, #4	@ (adr r2, 80077c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80077c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c8:	080077fd 	.word	0x080077fd
 80077cc:	08007901 	.word	0x08007901
 80077d0:	08007901 	.word	0x08007901
 80077d4:	08007901 	.word	0x08007901
 80077d8:	0800783d 	.word	0x0800783d
 80077dc:	08007901 	.word	0x08007901
 80077e0:	08007901 	.word	0x08007901
 80077e4:	08007901 	.word	0x08007901
 80077e8:	0800787f 	.word	0x0800787f
 80077ec:	08007901 	.word	0x08007901
 80077f0:	08007901 	.word	0x08007901
 80077f4:	08007901 	.word	0x08007901
 80077f8:	080078bf 	.word	0x080078bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f914 	bl	8007a30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	699a      	ldr	r2, [r3, #24]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f042 0208 	orr.w	r2, r2, #8
 8007816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f022 0204 	bic.w	r2, r2, #4
 8007826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	6999      	ldr	r1, [r3, #24]
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	691a      	ldr	r2, [r3, #16]
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	619a      	str	r2, [r3, #24]
      break;
 800783a:	e064      	b.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68b9      	ldr	r1, [r7, #8]
 8007842:	4618      	mov	r0, r3
 8007844:	f000 f95a 	bl	8007afc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	699a      	ldr	r2, [r3, #24]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699a      	ldr	r2, [r3, #24]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6999      	ldr	r1, [r3, #24]
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	021a      	lsls	r2, r3, #8
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	619a      	str	r2, [r3, #24]
      break;
 800787c:	e043      	b.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	4618      	mov	r0, r3
 8007886:	f000 f9a5 	bl	8007bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69da      	ldr	r2, [r3, #28]
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	f042 0208 	orr.w	r2, r2, #8
 8007898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	69da      	ldr	r2, [r3, #28]
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f022 0204 	bic.w	r2, r2, #4
 80078a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	69d9      	ldr	r1, [r3, #28]
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	691a      	ldr	r2, [r3, #16]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	430a      	orrs	r2, r1
 80078ba:	61da      	str	r2, [r3, #28]
      break;
 80078bc:	e023      	b.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68b9      	ldr	r1, [r7, #8]
 80078c4:	4618      	mov	r0, r3
 80078c6:	f000 f9ef 	bl	8007ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	69da      	ldr	r2, [r3, #28]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80078d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	69da      	ldr	r2, [r3, #28]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80078e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	69d9      	ldr	r1, [r3, #28]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	021a      	lsls	r2, r3, #8
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	430a      	orrs	r2, r1
 80078fc:	61da      	str	r2, [r3, #28]
      break;
 80078fe:	e002      	b.n	8007906 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	75fb      	strb	r3, [r7, #23]
      break;
 8007904:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007910:	4618      	mov	r0, r3
 8007912:	3718      	adds	r7, #24
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007918:	b480      	push	{r7}
 800791a:	b085      	sub	sp, #20
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
 8007920:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a3a      	ldr	r2, [pc, #232]	@ (8007a14 <TIM_Base_SetConfig+0xfc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00f      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007936:	d00b      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	4a37      	ldr	r2, [pc, #220]	@ (8007a18 <TIM_Base_SetConfig+0x100>)
 800793c:	4293      	cmp	r3, r2
 800793e:	d007      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4a36      	ldr	r2, [pc, #216]	@ (8007a1c <TIM_Base_SetConfig+0x104>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d003      	beq.n	8007950 <TIM_Base_SetConfig+0x38>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	4a35      	ldr	r2, [pc, #212]	@ (8007a20 <TIM_Base_SetConfig+0x108>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d108      	bne.n	8007962 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007956:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	685b      	ldr	r3, [r3, #4]
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4313      	orrs	r3, r2
 8007960:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4a2b      	ldr	r2, [pc, #172]	@ (8007a14 <TIM_Base_SetConfig+0xfc>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d01b      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007970:	d017      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	4a28      	ldr	r2, [pc, #160]	@ (8007a18 <TIM_Base_SetConfig+0x100>)
 8007976:	4293      	cmp	r3, r2
 8007978:	d013      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	4a27      	ldr	r2, [pc, #156]	@ (8007a1c <TIM_Base_SetConfig+0x104>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d00f      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	4a26      	ldr	r2, [pc, #152]	@ (8007a20 <TIM_Base_SetConfig+0x108>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d00b      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a25      	ldr	r2, [pc, #148]	@ (8007a24 <TIM_Base_SetConfig+0x10c>)
 800798e:	4293      	cmp	r3, r2
 8007990:	d007      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	4a24      	ldr	r2, [pc, #144]	@ (8007a28 <TIM_Base_SetConfig+0x110>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d003      	beq.n	80079a2 <TIM_Base_SetConfig+0x8a>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4a23      	ldr	r2, [pc, #140]	@ (8007a2c <TIM_Base_SetConfig+0x114>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d108      	bne.n	80079b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	68db      	ldr	r3, [r3, #12]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	4313      	orrs	r3, r2
 80079b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68fa      	ldr	r2, [r7, #12]
 80079c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	689a      	ldr	r2, [r3, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	681a      	ldr	r2, [r3, #0]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a0e      	ldr	r2, [pc, #56]	@ (8007a14 <TIM_Base_SetConfig+0xfc>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d103      	bne.n	80079e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	691a      	ldr	r2, [r3, #16]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b01      	cmp	r3, #1
 80079f8:	d105      	bne.n	8007a06 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f023 0201 	bic.w	r2, r3, #1
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	611a      	str	r2, [r3, #16]
  }
}
 8007a06:	bf00      	nop
 8007a08:	3714      	adds	r7, #20
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	40010000 	.word	0x40010000
 8007a18:	40000400 	.word	0x40000400
 8007a1c:	40000800 	.word	0x40000800
 8007a20:	40000c00 	.word	0x40000c00
 8007a24:	40014000 	.word	0x40014000
 8007a28:	40014400 	.word	0x40014400
 8007a2c:	40014800 	.word	0x40014800

08007a30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b087      	sub	sp, #28
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6a1b      	ldr	r3, [r3, #32]
 8007a44:	f023 0201 	bic.w	r2, r3, #1
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	685b      	ldr	r3, [r3, #4]
 8007a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	699b      	ldr	r3, [r3, #24]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	f023 0303 	bic.w	r3, r3, #3
 8007a66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007a72:	697b      	ldr	r3, [r7, #20]
 8007a74:	f023 0302 	bic.w	r3, r3, #2
 8007a78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	697a      	ldr	r2, [r7, #20]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	4a1c      	ldr	r2, [pc, #112]	@ (8007af8 <TIM_OC1_SetConfig+0xc8>)
 8007a88:	4293      	cmp	r3, r2
 8007a8a:	d10c      	bne.n	8007aa6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f023 0308 	bic.w	r3, r3, #8
 8007a92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	697a      	ldr	r2, [r7, #20]
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	f023 0304 	bic.w	r3, r3, #4
 8007aa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	4a13      	ldr	r2, [pc, #76]	@ (8007af8 <TIM_OC1_SetConfig+0xc8>)
 8007aaa:	4293      	cmp	r3, r2
 8007aac:	d111      	bne.n	8007ad2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ab4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007abc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	693a      	ldr	r2, [r7, #16]
 8007ace:	4313      	orrs	r3, r2
 8007ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68fa      	ldr	r2, [r7, #12]
 8007adc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	685a      	ldr	r2, [r3, #4]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	697a      	ldr	r2, [r7, #20]
 8007aea:	621a      	str	r2, [r3, #32]
}
 8007aec:	bf00      	nop
 8007aee:	371c      	adds	r7, #28
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	40010000 	.word	0x40010000

08007afc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b087      	sub	sp, #28
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a1b      	ldr	r3, [r3, #32]
 8007b0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a1b      	ldr	r3, [r3, #32]
 8007b10:	f023 0210 	bic.w	r2, r3, #16
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	021b      	lsls	r3, r3, #8
 8007b3a:	68fa      	ldr	r2, [r7, #12]
 8007b3c:	4313      	orrs	r3, r2
 8007b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f023 0320 	bic.w	r3, r3, #32
 8007b46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	689b      	ldr	r3, [r3, #8]
 8007b4c:	011b      	lsls	r3, r3, #4
 8007b4e:	697a      	ldr	r2, [r7, #20]
 8007b50:	4313      	orrs	r3, r2
 8007b52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a1e      	ldr	r2, [pc, #120]	@ (8007bd0 <TIM_OC2_SetConfig+0xd4>)
 8007b58:	4293      	cmp	r3, r2
 8007b5a:	d10d      	bne.n	8007b78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a15      	ldr	r2, [pc, #84]	@ (8007bd0 <TIM_OC2_SetConfig+0xd4>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d113      	bne.n	8007ba8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	695b      	ldr	r3, [r3, #20]
 8007b94:	009b      	lsls	r3, r3, #2
 8007b96:	693a      	ldr	r2, [r7, #16]
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	699b      	ldr	r3, [r3, #24]
 8007ba0:	009b      	lsls	r3, r3, #2
 8007ba2:	693a      	ldr	r2, [r7, #16]
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	693a      	ldr	r2, [r7, #16]
 8007bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685a      	ldr	r2, [r3, #4]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	621a      	str	r2, [r3, #32]
}
 8007bc2:	bf00      	nop
 8007bc4:	371c      	adds	r7, #28
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	40010000 	.word	0x40010000

08007bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
 8007bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6a1b      	ldr	r3, [r3, #32]
 8007be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a1b      	ldr	r3, [r3, #32]
 8007be8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c0c:	683b      	ldr	r3, [r7, #0]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4313      	orrs	r3, r2
 8007c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007c16:	697b      	ldr	r3, [r7, #20]
 8007c18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	021b      	lsls	r3, r3, #8
 8007c24:	697a      	ldr	r2, [r7, #20]
 8007c26:	4313      	orrs	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca4 <TIM_OC3_SetConfig+0xd0>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d10d      	bne.n	8007c4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	021b      	lsls	r3, r3, #8
 8007c40:	697a      	ldr	r2, [r7, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	4a14      	ldr	r2, [pc, #80]	@ (8007ca4 <TIM_OC3_SetConfig+0xd0>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d113      	bne.n	8007c7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	011b      	lsls	r3, r3, #4
 8007c78:	693a      	ldr	r2, [r7, #16]
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	693a      	ldr	r2, [r7, #16]
 8007c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	685a      	ldr	r2, [r3, #4]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	697a      	ldr	r2, [r7, #20]
 8007c96:	621a      	str	r2, [r3, #32]
}
 8007c98:	bf00      	nop
 8007c9a:	371c      	adds	r7, #28
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca2:	4770      	bx	lr
 8007ca4:	40010000 	.word	0x40010000

08007ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a1b      	ldr	r3, [r3, #32]
 8007cbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	68fa      	ldr	r2, [r7, #12]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	031b      	lsls	r3, r3, #12
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	4a10      	ldr	r2, [pc, #64]	@ (8007d44 <TIM_OC4_SetConfig+0x9c>)
 8007d04:	4293      	cmp	r3, r2
 8007d06:	d109      	bne.n	8007d1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	019b      	lsls	r3, r3, #6
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	68fa      	ldr	r2, [r7, #12]
 8007d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007d28:	683b      	ldr	r3, [r7, #0]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	621a      	str	r2, [r3, #32]
}
 8007d36:	bf00      	nop
 8007d38:	371c      	adds	r7, #28
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	40010000 	.word	0x40010000

08007d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e050      	b.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a1c      	ldr	r2, [pc, #112]	@ (8007e10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d018      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dac:	d013      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a18      	ldr	r2, [pc, #96]	@ (8007e14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00e      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a16      	ldr	r2, [pc, #88]	@ (8007e18 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d009      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a15      	ldr	r2, [pc, #84]	@ (8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d004      	beq.n	8007dd6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a13      	ldr	r2, [pc, #76]	@ (8007e20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d10c      	bne.n	8007df0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ddc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007dde:	683b      	ldr	r3, [r7, #0]
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68ba      	ldr	r2, [r7, #8]
 8007dee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3714      	adds	r7, #20
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40010000 	.word	0x40010000
 8007e14:	40000400 	.word	0x40000400
 8007e18:	40000800 	.word	0x40000800
 8007e1c:	40000c00 	.word	0x40000c00
 8007e20:	40014000 	.word	0x40014000

08007e24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e042      	b.n	8007ebc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d106      	bne.n	8007e50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7fa fe1e 	bl	8002a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2224      	movs	r2, #36	@ 0x24
 8007e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fdbd 	bl	80089e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	691a      	ldr	r2, [r3, #16]
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007e7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	695a      	ldr	r2, [r3, #20]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007e8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	68da      	ldr	r2, [r3, #12]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2220      	movs	r2, #32
 8007eb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3708      	adds	r7, #8
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08a      	sub	sp, #40	@ 0x28
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	603b      	str	r3, [r7, #0]
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	2b20      	cmp	r3, #32
 8007ee2:	d175      	bne.n	8007fd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d002      	beq.n	8007ef0 <HAL_UART_Transmit+0x2c>
 8007eea:	88fb      	ldrh	r3, [r7, #6]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d101      	bne.n	8007ef4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e06e      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2221      	movs	r2, #33	@ 0x21
 8007efe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007f02:	f7fb f84d 	bl	8002fa0 <HAL_GetTick>
 8007f06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	88fa      	ldrh	r2, [r7, #6]
 8007f0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	88fa      	ldrh	r2, [r7, #6]
 8007f12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f1c:	d108      	bne.n	8007f30 <HAL_UART_Transmit+0x6c>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007f26:	2300      	movs	r3, #0
 8007f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	61bb      	str	r3, [r7, #24]
 8007f2e:	e003      	b.n	8007f38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007f34:	2300      	movs	r3, #0
 8007f36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007f38:	e02e      	b.n	8007f98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	2200      	movs	r2, #0
 8007f42:	2180      	movs	r1, #128	@ 0x80
 8007f44:	68f8      	ldr	r0, [r7, #12]
 8007f46:	f000 fb1f 	bl	8008588 <UART_WaitOnFlagUntilTimeout>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2220      	movs	r2, #32
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e03a      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10b      	bne.n	8007f7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007f62:	69bb      	ldr	r3, [r7, #24]
 8007f64:	881b      	ldrh	r3, [r3, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007f70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007f72:	69bb      	ldr	r3, [r7, #24]
 8007f74:	3302      	adds	r3, #2
 8007f76:	61bb      	str	r3, [r7, #24]
 8007f78:	e007      	b.n	8007f8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007f7a:	69fb      	ldr	r3, [r7, #28]
 8007f7c:	781a      	ldrb	r2, [r3, #0]
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	3301      	adds	r3, #1
 8007f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f8e:	b29b      	uxth	r3, r3
 8007f90:	3b01      	subs	r3, #1
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007f9c:	b29b      	uxth	r3, r3
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1cb      	bne.n	8007f3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	9300      	str	r3, [sp, #0]
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2140      	movs	r1, #64	@ 0x40
 8007fac:	68f8      	ldr	r0, [r7, #12]
 8007fae:	f000 faeb 	bl	8008588 <UART_WaitOnFlagUntilTimeout>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2220      	movs	r2, #32
 8007fbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e006      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	e000      	b.n	8007fd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007fd0:	2302      	movs	r3, #2
  }
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3720      	adds	r7, #32
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}

08007fda <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fda:	b580      	push	{r7, lr}
 8007fdc:	b084      	sub	sp, #16
 8007fde:	af00      	add	r7, sp, #0
 8007fe0:	60f8      	str	r0, [r7, #12]
 8007fe2:	60b9      	str	r1, [r7, #8]
 8007fe4:	4613      	mov	r3, r2
 8007fe6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d112      	bne.n	800801a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d002      	beq.n	8008000 <HAL_UART_Receive_IT+0x26>
 8007ffa:	88fb      	ldrh	r3, [r7, #6]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e00b      	b.n	800801c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2200      	movs	r2, #0
 8008008:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	461a      	mov	r2, r3
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f000 fb12 	bl	800863a <UART_Start_Receive_IT>
 8008016:	4603      	mov	r3, r0
 8008018:	e000      	b.n	800801c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800801a:	2302      	movs	r3, #2
  }
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b0ba      	sub	sp, #232	@ 0xe8
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
 800803c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800804a:	2300      	movs	r3, #0
 800804c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008050:	2300      	movs	r3, #0
 8008052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800805a:	f003 030f 	and.w	r3, r3, #15
 800805e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10f      	bne.n	800808a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800806a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800806e:	f003 0320 	and.w	r3, r3, #32
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <HAL_UART_IRQHandler+0x66>
 8008076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800807a:	f003 0320 	and.w	r3, r3, #32
 800807e:	2b00      	cmp	r3, #0
 8008080:	d003      	beq.n	800808a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f000 fbf2 	bl	800886c <UART_Receive_IT>
      return;
 8008088:	e25b      	b.n	8008542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800808a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 80de 	beq.w	8008250 <HAL_UART_IRQHandler+0x22c>
 8008094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008098:	f003 0301 	and.w	r3, r3, #1
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80080a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 80d1 	beq.w	8008250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080b2:	f003 0301 	and.w	r3, r3, #1
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d00b      	beq.n	80080d2 <HAL_UART_IRQHandler+0xae>
 80080ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80080be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d005      	beq.n	80080d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ca:	f043 0201 	orr.w	r2, r3, #1
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080d6:	f003 0304 	and.w	r3, r3, #4
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <HAL_UART_IRQHandler+0xd2>
 80080de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80080e2:	f003 0301 	and.w	r3, r3, #1
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d005      	beq.n	80080f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080ee:	f043 0202 	orr.w	r2, r3, #2
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80080f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80080fa:	f003 0302 	and.w	r3, r3, #2
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00b      	beq.n	800811a <HAL_UART_IRQHandler+0xf6>
 8008102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008106:	f003 0301 	and.w	r3, r3, #1
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008112:	f043 0204 	orr.w	r2, r3, #4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800811a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800811e:	f003 0308 	and.w	r3, r3, #8
 8008122:	2b00      	cmp	r3, #0
 8008124:	d011      	beq.n	800814a <HAL_UART_IRQHandler+0x126>
 8008126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b00      	cmp	r3, #0
 8008130:	d105      	bne.n	800813e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d005      	beq.n	800814a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008142:	f043 0208 	orr.w	r2, r3, #8
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800814e:	2b00      	cmp	r3, #0
 8008150:	f000 81f2 	beq.w	8008538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008158:	f003 0320 	and.w	r3, r3, #32
 800815c:	2b00      	cmp	r3, #0
 800815e:	d008      	beq.n	8008172 <HAL_UART_IRQHandler+0x14e>
 8008160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008164:	f003 0320 	and.w	r3, r3, #32
 8008168:	2b00      	cmp	r3, #0
 800816a:	d002      	beq.n	8008172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800816c:	6878      	ldr	r0, [r7, #4]
 800816e:	f000 fb7d 	bl	800886c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800817c:	2b40      	cmp	r3, #64	@ 0x40
 800817e:	bf0c      	ite	eq
 8008180:	2301      	moveq	r3, #1
 8008182:	2300      	movne	r3, #0
 8008184:	b2db      	uxtb	r3, r3
 8008186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800818e:	f003 0308 	and.w	r3, r3, #8
 8008192:	2b00      	cmp	r3, #0
 8008194:	d103      	bne.n	800819e <HAL_UART_IRQHandler+0x17a>
 8008196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800819a:	2b00      	cmp	r3, #0
 800819c:	d04f      	beq.n	800823e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 fa85 	bl	80086ae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	695b      	ldr	r3, [r3, #20]
 80081aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081ae:	2b40      	cmp	r3, #64	@ 0x40
 80081b0:	d141      	bne.n	8008236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	3314      	adds	r3, #20
 80081b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80081c0:	e853 3f00 	ldrex	r3, [r3]
 80081c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80081c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80081cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80081de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80081e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80081ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80081ee:	e841 2300 	strex	r3, r2, [r1]
 80081f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80081f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1d9      	bne.n	80081b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d013      	beq.n	800822e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800820a:	4a7e      	ldr	r2, [pc, #504]	@ (8008404 <HAL_UART_IRQHandler+0x3e0>)
 800820c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008212:	4618      	mov	r0, r3
 8008214:	f7fb fbee 	bl	80039f4 <HAL_DMA_Abort_IT>
 8008218:	4603      	mov	r3, r0
 800821a:	2b00      	cmp	r3, #0
 800821c:	d016      	beq.n	800824c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008224:	687a      	ldr	r2, [r7, #4]
 8008226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008228:	4610      	mov	r0, r2
 800822a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800822c:	e00e      	b.n	800824c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 f994 	bl	800855c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008234:	e00a      	b.n	800824c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f990 	bl	800855c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800823c:	e006      	b.n	800824c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f98c 	bl	800855c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2200      	movs	r2, #0
 8008248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800824a:	e175      	b.n	8008538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800824c:	bf00      	nop
    return;
 800824e:	e173      	b.n	8008538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008254:	2b01      	cmp	r3, #1
 8008256:	f040 814f 	bne.w	80084f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800825e:	f003 0310 	and.w	r3, r3, #16
 8008262:	2b00      	cmp	r3, #0
 8008264:	f000 8148 	beq.w	80084f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800826c:	f003 0310 	and.w	r3, r3, #16
 8008270:	2b00      	cmp	r3, #0
 8008272:	f000 8141 	beq.w	80084f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	60bb      	str	r3, [r7, #8]
 800828a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008296:	2b40      	cmp	r3, #64	@ 0x40
 8008298:	f040 80b6 	bne.w	8008408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80082a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	f000 8145 	beq.w	800853c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80082b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082ba:	429a      	cmp	r2, r3
 80082bc:	f080 813e 	bcs.w	800853c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80082c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80082d2:	f000 8088 	beq.w	80083e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	330c      	adds	r3, #12
 80082dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80082e4:	e853 3f00 	ldrex	r3, [r3]
 80082e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80082ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80082f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	330c      	adds	r3, #12
 80082fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800830a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800830e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008312:	e841 2300 	strex	r3, r2, [r1]
 8008316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800831a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1d9      	bne.n	80082d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	3314      	adds	r3, #20
 8008328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800832a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800832c:	e853 3f00 	ldrex	r3, [r3]
 8008330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008334:	f023 0301 	bic.w	r3, r3, #1
 8008338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	3314      	adds	r3, #20
 8008342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800834a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800834c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800834e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008352:	e841 2300 	strex	r3, r2, [r1]
 8008356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800835a:	2b00      	cmp	r3, #0
 800835c:	d1e1      	bne.n	8008322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3314      	adds	r3, #20
 8008364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008368:	e853 3f00 	ldrex	r3, [r3]
 800836c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800836e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	3314      	adds	r3, #20
 800837e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800838a:	e841 2300 	strex	r3, r2, [r1]
 800838e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008392:	2b00      	cmp	r3, #0
 8008394:	d1e3      	bne.n	800835e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2220      	movs	r2, #32
 800839a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	330c      	adds	r3, #12
 80083aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ae:	e853 3f00 	ldrex	r3, [r3]
 80083b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80083b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80083b6:	f023 0310 	bic.w	r3, r3, #16
 80083ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	330c      	adds	r3, #12
 80083c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80083c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80083ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80083ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80083d0:	e841 2300 	strex	r3, r2, [r1]
 80083d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80083d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d1e3      	bne.n	80083a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fb fa97 	bl	8003914 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2202      	movs	r2, #2
 80083ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80083f4:	b29b      	uxth	r3, r3
 80083f6:	1ad3      	subs	r3, r2, r3
 80083f8:	b29b      	uxth	r3, r3
 80083fa:	4619      	mov	r1, r3
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f000 f8b7 	bl	8008570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008402:	e09b      	b.n	800853c <HAL_UART_IRQHandler+0x518>
 8008404:	08008775 	.word	0x08008775
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008410:	b29b      	uxth	r3, r3
 8008412:	1ad3      	subs	r3, r2, r3
 8008414:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800841c:	b29b      	uxth	r3, r3
 800841e:	2b00      	cmp	r3, #0
 8008420:	f000 808e 	beq.w	8008540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8008424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008428:	2b00      	cmp	r3, #0
 800842a:	f000 8089 	beq.w	8008540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	330c      	adds	r3, #12
 8008434:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008438:	e853 3f00 	ldrex	r3, [r3]
 800843c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800843e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	330c      	adds	r3, #12
 800844e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8008452:	647a      	str	r2, [r7, #68]	@ 0x44
 8008454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800845a:	e841 2300 	strex	r3, r2, [r1]
 800845e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1e3      	bne.n	800842e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	3314      	adds	r3, #20
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008470:	e853 3f00 	ldrex	r3, [r3]
 8008474:	623b      	str	r3, [r7, #32]
   return(result);
 8008476:	6a3b      	ldr	r3, [r7, #32]
 8008478:	f023 0301 	bic.w	r3, r3, #1
 800847c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3314      	adds	r3, #20
 8008486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800848a:	633a      	str	r2, [r7, #48]	@ 0x30
 800848c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e3      	bne.n	8008466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2200      	movs	r2, #0
 80084aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	330c      	adds	r3, #12
 80084b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	e853 3f00 	ldrex	r3, [r3]
 80084ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f023 0310 	bic.w	r3, r3, #16
 80084c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	330c      	adds	r3, #12
 80084cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80084d0:	61fa      	str	r2, [r7, #28]
 80084d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d4:	69b9      	ldr	r1, [r7, #24]
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	e841 2300 	strex	r3, r2, [r1]
 80084dc:	617b      	str	r3, [r7, #20]
   return(result);
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d1e3      	bne.n	80084ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80084ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 f83d 	bl	8008570 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80084f6:	e023      	b.n	8008540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008500:	2b00      	cmp	r3, #0
 8008502:	d009      	beq.n	8008518 <HAL_UART_IRQHandler+0x4f4>
 8008504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800850c:	2b00      	cmp	r3, #0
 800850e:	d003      	beq.n	8008518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 f943 	bl	800879c <UART_Transmit_IT>
    return;
 8008516:	e014      	b.n	8008542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800851c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00e      	beq.n	8008542 <HAL_UART_IRQHandler+0x51e>
 8008524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f983 	bl	800883c <UART_EndTransmit_IT>
    return;
 8008536:	e004      	b.n	8008542 <HAL_UART_IRQHandler+0x51e>
    return;
 8008538:	bf00      	nop
 800853a:	e002      	b.n	8008542 <HAL_UART_IRQHandler+0x51e>
      return;
 800853c:	bf00      	nop
 800853e:	e000      	b.n	8008542 <HAL_UART_IRQHandler+0x51e>
      return;
 8008540:	bf00      	nop
  }
}
 8008542:	37e8      	adds	r7, #232	@ 0xe8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	460b      	mov	r3, r1
 800857a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800857c:	bf00      	nop
 800857e:	370c      	adds	r7, #12
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr

08008588 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	603b      	str	r3, [r7, #0]
 8008594:	4613      	mov	r3, r2
 8008596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008598:	e03b      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800859a:	6a3b      	ldr	r3, [r7, #32]
 800859c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a0:	d037      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80085a2:	f7fa fcfd 	bl	8002fa0 <HAL_GetTick>
 80085a6:	4602      	mov	r2, r0
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	1ad3      	subs	r3, r2, r3
 80085ac:	6a3a      	ldr	r2, [r7, #32]
 80085ae:	429a      	cmp	r2, r3
 80085b0:	d302      	bcc.n	80085b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d101      	bne.n	80085bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80085b8:	2303      	movs	r3, #3
 80085ba:	e03a      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	68db      	ldr	r3, [r3, #12]
 80085c2:	f003 0304 	and.w	r3, r3, #4
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d023      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0x8a>
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b80      	cmp	r3, #128	@ 0x80
 80085ce:	d020      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0x8a>
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2b40      	cmp	r3, #64	@ 0x40
 80085d4:	d01d      	beq.n	8008612 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d116      	bne.n	8008612 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	617b      	str	r3, [r7, #20]
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	617b      	str	r3, [r7, #20]
 80085f8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085fa:	68f8      	ldr	r0, [r7, #12]
 80085fc:	f000 f857 	bl	80086ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	2208      	movs	r2, #8
 8008604:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
 8008610:	e00f      	b.n	8008632 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	4013      	ands	r3, r2
 800861c:	68ba      	ldr	r2, [r7, #8]
 800861e:	429a      	cmp	r2, r3
 8008620:	bf0c      	ite	eq
 8008622:	2301      	moveq	r3, #1
 8008624:	2300      	movne	r3, #0
 8008626:	b2db      	uxtb	r3, r3
 8008628:	461a      	mov	r2, r3
 800862a:	79fb      	ldrb	r3, [r7, #7]
 800862c:	429a      	cmp	r2, r3
 800862e:	d0b4      	beq.n	800859a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3718      	adds	r7, #24
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800863a:	b480      	push	{r7}
 800863c:	b085      	sub	sp, #20
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	4613      	mov	r3, r2
 8008646:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	88fa      	ldrh	r2, [r7, #6]
 8008652:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	88fa      	ldrh	r2, [r7, #6]
 8008658:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2222      	movs	r2, #34	@ 0x22
 8008664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	691b      	ldr	r3, [r3, #16]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d007      	beq.n	8008680 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68da      	ldr	r2, [r3, #12]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800867e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	695a      	ldr	r2, [r3, #20]
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f042 0201 	orr.w	r2, r2, #1
 800868e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f042 0220 	orr.w	r2, r2, #32
 800869e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80086a0:	2300      	movs	r3, #0
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3714      	adds	r7, #20
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b095      	sub	sp, #84	@ 0x54
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	330c      	adds	r3, #12
 80086bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80086c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	330c      	adds	r3, #12
 80086d4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80086d6:	643a      	str	r2, [r7, #64]	@ 0x40
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80086dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e5      	bne.n	80086b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	3314      	adds	r3, #20
 80086f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086f2:	6a3b      	ldr	r3, [r7, #32]
 80086f4:	e853 3f00 	ldrex	r3, [r3]
 80086f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	f023 0301 	bic.w	r3, r3, #1
 8008700:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	3314      	adds	r3, #20
 8008708:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800870a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800870c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008710:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1e5      	bne.n	80086ea <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	2b01      	cmp	r3, #1
 8008724:	d119      	bne.n	800875a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	330c      	adds	r3, #12
 800872c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	60bb      	str	r3, [r7, #8]
   return(result);
 8008736:	68bb      	ldr	r3, [r7, #8]
 8008738:	f023 0310 	bic.w	r3, r3, #16
 800873c:	647b      	str	r3, [r7, #68]	@ 0x44
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
 8008744:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008746:	61ba      	str	r2, [r7, #24]
 8008748:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6979      	ldr	r1, [r7, #20]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	613b      	str	r3, [r7, #16]
   return(result);
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e5      	bne.n	8008726 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	2220      	movs	r2, #32
 800875e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2200      	movs	r2, #0
 8008766:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008768:	bf00      	nop
 800876a:	3754      	adds	r7, #84	@ 0x54
 800876c:	46bd      	mov	sp, r7
 800876e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008772:	4770      	bx	lr

08008774 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008774:	b580      	push	{r7, lr}
 8008776:	b084      	sub	sp, #16
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008780:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	2200      	movs	r2, #0
 8008786:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2200      	movs	r2, #0
 800878c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f7ff fee4 	bl	800855c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008794:	bf00      	nop
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	2b21      	cmp	r3, #33	@ 0x21
 80087ae:	d13e      	bne.n	800882e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087b8:	d114      	bne.n	80087e4 <UART_Transmit_IT+0x48>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d110      	bne.n	80087e4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6a1b      	ldr	r3, [r3, #32]
 80087c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	881b      	ldrh	r3, [r3, #0]
 80087cc:	461a      	mov	r2, r3
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80087d6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6a1b      	ldr	r3, [r3, #32]
 80087dc:	1c9a      	adds	r2, r3, #2
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	621a      	str	r2, [r3, #32]
 80087e2:	e008      	b.n	80087f6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	1c59      	adds	r1, r3, #1
 80087ea:	687a      	ldr	r2, [r7, #4]
 80087ec:	6211      	str	r1, [r2, #32]
 80087ee:	781a      	ldrb	r2, [r3, #0]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	3b01      	subs	r3, #1
 80087fe:	b29b      	uxth	r3, r3
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	4619      	mov	r1, r3
 8008804:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008806:	2b00      	cmp	r3, #0
 8008808:	d10f      	bne.n	800882a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008818:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68da      	ldr	r2, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008828:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800882a:	2300      	movs	r3, #0
 800882c:	e000      	b.n	8008830 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800882e:	2302      	movs	r3, #2
  }
}
 8008830:	4618      	mov	r0, r3
 8008832:	3714      	adds	r7, #20
 8008834:	46bd      	mov	sp, r7
 8008836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883a:	4770      	bx	lr

0800883c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	68da      	ldr	r2, [r3, #12]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008852:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7ff fe73 	bl	8008548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008862:	2300      	movs	r3, #0
}
 8008864:	4618      	mov	r0, r3
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b08c      	sub	sp, #48	@ 0x30
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b22      	cmp	r3, #34	@ 0x22
 800887e:	f040 80ae 	bne.w	80089de <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800888a:	d117      	bne.n	80088bc <UART_Receive_IT+0x50>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d113      	bne.n	80088bc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008894:	2300      	movs	r3, #0
 8008896:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800889c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	b29a      	uxth	r2, r3
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b4:	1c9a      	adds	r2, r3, #2
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80088ba:	e026      	b.n	800890a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80088c2:	2300      	movs	r3, #0
 80088c4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088ce:	d007      	beq.n	80088e0 <UART_Receive_IT+0x74>
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10a      	bne.n	80088ee <UART_Receive_IT+0x82>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	691b      	ldr	r3, [r3, #16]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d106      	bne.n	80088ee <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ea:	701a      	strb	r2, [r3, #0]
 80088ec:	e008      	b.n	8008900 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	b2db      	uxtb	r3, r3
 80088f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088fa:	b2da      	uxtb	r2, r3
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008904:	1c5a      	adds	r2, r3, #1
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800890e:	b29b      	uxth	r3, r3
 8008910:	3b01      	subs	r3, #1
 8008912:	b29b      	uxth	r3, r3
 8008914:	687a      	ldr	r2, [r7, #4]
 8008916:	4619      	mov	r1, r3
 8008918:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800891a:	2b00      	cmp	r3, #0
 800891c:	d15d      	bne.n	80089da <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68da      	ldr	r2, [r3, #12]
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f022 0220 	bic.w	r2, r2, #32
 800892c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68da      	ldr	r2, [r3, #12]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800893c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	695a      	ldr	r2, [r3, #20]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	f022 0201 	bic.w	r2, r2, #1
 800894c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2220      	movs	r2, #32
 8008952:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2200      	movs	r2, #0
 800895a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008960:	2b01      	cmp	r3, #1
 8008962:	d135      	bne.n	80089d0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	330c      	adds	r3, #12
 8008970:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	e853 3f00 	ldrex	r3, [r3]
 8008978:	613b      	str	r3, [r7, #16]
   return(result);
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f023 0310 	bic.w	r3, r3, #16
 8008980:	627b      	str	r3, [r7, #36]	@ 0x24
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	330c      	adds	r3, #12
 8008988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800898a:	623a      	str	r2, [r7, #32]
 800898c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898e:	69f9      	ldr	r1, [r7, #28]
 8008990:	6a3a      	ldr	r2, [r7, #32]
 8008992:	e841 2300 	strex	r3, r2, [r1]
 8008996:	61bb      	str	r3, [r7, #24]
   return(result);
 8008998:	69bb      	ldr	r3, [r7, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1e5      	bne.n	800896a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	2b10      	cmp	r3, #16
 80089aa:	d10a      	bne.n	80089c2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ac:	2300      	movs	r3, #0
 80089ae:	60fb      	str	r3, [r7, #12]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089c6:	4619      	mov	r1, r3
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7ff fdd1 	bl	8008570 <HAL_UARTEx_RxEventCallback>
 80089ce:	e002      	b.n	80089d6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f7f8 fcdf 	bl	8001394 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	e002      	b.n	80089e0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80089da:	2300      	movs	r3, #0
 80089dc:	e000      	b.n	80089e0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80089de:	2302      	movs	r3, #2
  }
}
 80089e0:	4618      	mov	r0, r3
 80089e2:	3730      	adds	r7, #48	@ 0x30
 80089e4:	46bd      	mov	sp, r7
 80089e6:	bd80      	pop	{r7, pc}

080089e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089ec:	b0c0      	sub	sp, #256	@ 0x100
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	691b      	ldr	r3, [r3, #16]
 80089fc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a04:	68d9      	ldr	r1, [r3, #12]
 8008a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a0a:	681a      	ldr	r2, [r3, #0]
 8008a0c:	ea40 0301 	orr.w	r3, r0, r1
 8008a10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	431a      	orrs	r2, r3
 8008a28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a2c:	69db      	ldr	r3, [r3, #28]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008a40:	f021 010c 	bic.w	r1, r1, #12
 8008a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a4e:	430b      	orrs	r3, r1
 8008a50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695b      	ldr	r3, [r3, #20]
 8008a5a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a62:	6999      	ldr	r1, [r3, #24]
 8008a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a68:	681a      	ldr	r2, [r3, #0]
 8008a6a:	ea40 0301 	orr.w	r3, r0, r1
 8008a6e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	4b8f      	ldr	r3, [pc, #572]	@ (8008cb4 <UART_SetConfig+0x2cc>)
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d005      	beq.n	8008a88 <UART_SetConfig+0xa0>
 8008a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b8d      	ldr	r3, [pc, #564]	@ (8008cb8 <UART_SetConfig+0x2d0>)
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d104      	bne.n	8008a92 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a88:	f7fd fae6 	bl	8006058 <HAL_RCC_GetPCLK2Freq>
 8008a8c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008a90:	e003      	b.n	8008a9a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a92:	f7fd facd 	bl	8006030 <HAL_RCC_GetPCLK1Freq>
 8008a96:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008aa4:	f040 810c 	bne.w	8008cc0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008ab2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008ab6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008aba:	4622      	mov	r2, r4
 8008abc:	462b      	mov	r3, r5
 8008abe:	1891      	adds	r1, r2, r2
 8008ac0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008ac2:	415b      	adcs	r3, r3
 8008ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ac6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008aca:	4621      	mov	r1, r4
 8008acc:	eb12 0801 	adds.w	r8, r2, r1
 8008ad0:	4629      	mov	r1, r5
 8008ad2:	eb43 0901 	adc.w	r9, r3, r1
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	f04f 0300 	mov.w	r3, #0
 8008ade:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008ae2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ae6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008aea:	4690      	mov	r8, r2
 8008aec:	4699      	mov	r9, r3
 8008aee:	4623      	mov	r3, r4
 8008af0:	eb18 0303 	adds.w	r3, r8, r3
 8008af4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008af8:	462b      	mov	r3, r5
 8008afa:	eb49 0303 	adc.w	r3, r9, r3
 8008afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008b02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	2200      	movs	r2, #0
 8008b0a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008b0e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008b12:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008b16:	460b      	mov	r3, r1
 8008b18:	18db      	adds	r3, r3, r3
 8008b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	eb42 0303 	adc.w	r3, r2, r3
 8008b22:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b24:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008b28:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008b2c:	f7f8 f8b4 	bl	8000c98 <__aeabi_uldivmod>
 8008b30:	4602      	mov	r2, r0
 8008b32:	460b      	mov	r3, r1
 8008b34:	4b61      	ldr	r3, [pc, #388]	@ (8008cbc <UART_SetConfig+0x2d4>)
 8008b36:	fba3 2302 	umull	r2, r3, r3, r2
 8008b3a:	095b      	lsrs	r3, r3, #5
 8008b3c:	011c      	lsls	r4, r3, #4
 8008b3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b48:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008b4c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008b50:	4642      	mov	r2, r8
 8008b52:	464b      	mov	r3, r9
 8008b54:	1891      	adds	r1, r2, r2
 8008b56:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008b58:	415b      	adcs	r3, r3
 8008b5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b5c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b60:	4641      	mov	r1, r8
 8008b62:	eb12 0a01 	adds.w	sl, r2, r1
 8008b66:	4649      	mov	r1, r9
 8008b68:	eb43 0b01 	adc.w	fp, r3, r1
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	f04f 0300 	mov.w	r3, #0
 8008b74:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b78:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b80:	4692      	mov	sl, r2
 8008b82:	469b      	mov	fp, r3
 8008b84:	4643      	mov	r3, r8
 8008b86:	eb1a 0303 	adds.w	r3, sl, r3
 8008b8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b8e:	464b      	mov	r3, r9
 8008b90:	eb4b 0303 	adc.w	r3, fp, r3
 8008b94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ba4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008ba8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008bac:	460b      	mov	r3, r1
 8008bae:	18db      	adds	r3, r3, r3
 8008bb0:	643b      	str	r3, [r7, #64]	@ 0x40
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	eb42 0303 	adc.w	r3, r2, r3
 8008bb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bba:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008bbe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008bc2:	f7f8 f869 	bl	8000c98 <__aeabi_uldivmod>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4b3b      	ldr	r3, [pc, #236]	@ (8008cbc <UART_SetConfig+0x2d4>)
 8008bce:	fba3 2301 	umull	r2, r3, r3, r1
 8008bd2:	095b      	lsrs	r3, r3, #5
 8008bd4:	2264      	movs	r2, #100	@ 0x64
 8008bd6:	fb02 f303 	mul.w	r3, r2, r3
 8008bda:	1acb      	subs	r3, r1, r3
 8008bdc:	00db      	lsls	r3, r3, #3
 8008bde:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008be2:	4b36      	ldr	r3, [pc, #216]	@ (8008cbc <UART_SetConfig+0x2d4>)
 8008be4:	fba3 2302 	umull	r2, r3, r3, r2
 8008be8:	095b      	lsrs	r3, r3, #5
 8008bea:	005b      	lsls	r3, r3, #1
 8008bec:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008bf0:	441c      	add	r4, r3
 8008bf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bfc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008c00:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	1891      	adds	r1, r2, r2
 8008c0a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008c0c:	415b      	adcs	r3, r3
 8008c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c10:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008c14:	4641      	mov	r1, r8
 8008c16:	1851      	adds	r1, r2, r1
 8008c18:	6339      	str	r1, [r7, #48]	@ 0x30
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	414b      	adcs	r3, r1
 8008c1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	00cb      	lsls	r3, r1, #3
 8008c30:	4651      	mov	r1, sl
 8008c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c36:	4651      	mov	r1, sl
 8008c38:	00ca      	lsls	r2, r1, #3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4642      	mov	r2, r8
 8008c42:	189b      	adds	r3, r3, r2
 8008c44:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c48:	464b      	mov	r3, r9
 8008c4a:	460a      	mov	r2, r1
 8008c4c:	eb42 0303 	adc.w	r3, r2, r3
 8008c50:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c60:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008c64:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008c68:	460b      	mov	r3, r1
 8008c6a:	18db      	adds	r3, r3, r3
 8008c6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c6e:	4613      	mov	r3, r2
 8008c70:	eb42 0303 	adc.w	r3, r2, r3
 8008c74:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c7a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008c7e:	f7f8 f80b 	bl	8000c98 <__aeabi_uldivmod>
 8008c82:	4602      	mov	r2, r0
 8008c84:	460b      	mov	r3, r1
 8008c86:	4b0d      	ldr	r3, [pc, #52]	@ (8008cbc <UART_SetConfig+0x2d4>)
 8008c88:	fba3 1302 	umull	r1, r3, r3, r2
 8008c8c:	095b      	lsrs	r3, r3, #5
 8008c8e:	2164      	movs	r1, #100	@ 0x64
 8008c90:	fb01 f303 	mul.w	r3, r1, r3
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	00db      	lsls	r3, r3, #3
 8008c98:	3332      	adds	r3, #50	@ 0x32
 8008c9a:	4a08      	ldr	r2, [pc, #32]	@ (8008cbc <UART_SetConfig+0x2d4>)
 8008c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	f003 0207 	and.w	r2, r3, #7
 8008ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	4422      	add	r2, r4
 8008cae:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008cb0:	e106      	b.n	8008ec0 <UART_SetConfig+0x4d8>
 8008cb2:	bf00      	nop
 8008cb4:	40011000 	.word	0x40011000
 8008cb8:	40011400 	.word	0x40011400
 8008cbc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008cc0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008cca:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008cce:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008cd2:	4642      	mov	r2, r8
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	1891      	adds	r1, r2, r2
 8008cd8:	6239      	str	r1, [r7, #32]
 8008cda:	415b      	adcs	r3, r3
 8008cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008cde:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008ce2:	4641      	mov	r1, r8
 8008ce4:	1854      	adds	r4, r2, r1
 8008ce6:	4649      	mov	r1, r9
 8008ce8:	eb43 0501 	adc.w	r5, r3, r1
 8008cec:	f04f 0200 	mov.w	r2, #0
 8008cf0:	f04f 0300 	mov.w	r3, #0
 8008cf4:	00eb      	lsls	r3, r5, #3
 8008cf6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cfa:	00e2      	lsls	r2, r4, #3
 8008cfc:	4614      	mov	r4, r2
 8008cfe:	461d      	mov	r5, r3
 8008d00:	4643      	mov	r3, r8
 8008d02:	18e3      	adds	r3, r4, r3
 8008d04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008d08:	464b      	mov	r3, r9
 8008d0a:	eb45 0303 	adc.w	r3, r5, r3
 8008d0e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d16:	685b      	ldr	r3, [r3, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008d1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008d22:	f04f 0200 	mov.w	r2, #0
 8008d26:	f04f 0300 	mov.w	r3, #0
 8008d2a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008d2e:	4629      	mov	r1, r5
 8008d30:	008b      	lsls	r3, r1, #2
 8008d32:	4621      	mov	r1, r4
 8008d34:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d38:	4621      	mov	r1, r4
 8008d3a:	008a      	lsls	r2, r1, #2
 8008d3c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008d40:	f7f7 ffaa 	bl	8000c98 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4b60      	ldr	r3, [pc, #384]	@ (8008ecc <UART_SetConfig+0x4e4>)
 8008d4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008d4e:	095b      	lsrs	r3, r3, #5
 8008d50:	011c      	lsls	r4, r3, #4
 8008d52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d56:	2200      	movs	r2, #0
 8008d58:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d5c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008d60:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008d64:	4642      	mov	r2, r8
 8008d66:	464b      	mov	r3, r9
 8008d68:	1891      	adds	r1, r2, r2
 8008d6a:	61b9      	str	r1, [r7, #24]
 8008d6c:	415b      	adcs	r3, r3
 8008d6e:	61fb      	str	r3, [r7, #28]
 8008d70:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d74:	4641      	mov	r1, r8
 8008d76:	1851      	adds	r1, r2, r1
 8008d78:	6139      	str	r1, [r7, #16]
 8008d7a:	4649      	mov	r1, r9
 8008d7c:	414b      	adcs	r3, r1
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	f04f 0200 	mov.w	r2, #0
 8008d84:	f04f 0300 	mov.w	r3, #0
 8008d88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d8c:	4659      	mov	r1, fp
 8008d8e:	00cb      	lsls	r3, r1, #3
 8008d90:	4651      	mov	r1, sl
 8008d92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d96:	4651      	mov	r1, sl
 8008d98:	00ca      	lsls	r2, r1, #3
 8008d9a:	4610      	mov	r0, r2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	4603      	mov	r3, r0
 8008da0:	4642      	mov	r2, r8
 8008da2:	189b      	adds	r3, r3, r2
 8008da4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008da8:	464b      	mov	r3, r9
 8008daa:	460a      	mov	r2, r1
 8008dac:	eb42 0303 	adc.w	r3, r2, r3
 8008db0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008dbe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008dc0:	f04f 0200 	mov.w	r2, #0
 8008dc4:	f04f 0300 	mov.w	r3, #0
 8008dc8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008dcc:	4649      	mov	r1, r9
 8008dce:	008b      	lsls	r3, r1, #2
 8008dd0:	4641      	mov	r1, r8
 8008dd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008dd6:	4641      	mov	r1, r8
 8008dd8:	008a      	lsls	r2, r1, #2
 8008dda:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008dde:	f7f7 ff5b 	bl	8000c98 <__aeabi_uldivmod>
 8008de2:	4602      	mov	r2, r0
 8008de4:	460b      	mov	r3, r1
 8008de6:	4611      	mov	r1, r2
 8008de8:	4b38      	ldr	r3, [pc, #224]	@ (8008ecc <UART_SetConfig+0x4e4>)
 8008dea:	fba3 2301 	umull	r2, r3, r3, r1
 8008dee:	095b      	lsrs	r3, r3, #5
 8008df0:	2264      	movs	r2, #100	@ 0x64
 8008df2:	fb02 f303 	mul.w	r3, r2, r3
 8008df6:	1acb      	subs	r3, r1, r3
 8008df8:	011b      	lsls	r3, r3, #4
 8008dfa:	3332      	adds	r3, #50	@ 0x32
 8008dfc:	4a33      	ldr	r2, [pc, #204]	@ (8008ecc <UART_SetConfig+0x4e4>)
 8008dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8008e02:	095b      	lsrs	r3, r3, #5
 8008e04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008e08:	441c      	add	r4, r3
 8008e0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e0e:	2200      	movs	r2, #0
 8008e10:	673b      	str	r3, [r7, #112]	@ 0x70
 8008e12:	677a      	str	r2, [r7, #116]	@ 0x74
 8008e14:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008e18:	4642      	mov	r2, r8
 8008e1a:	464b      	mov	r3, r9
 8008e1c:	1891      	adds	r1, r2, r2
 8008e1e:	60b9      	str	r1, [r7, #8]
 8008e20:	415b      	adcs	r3, r3
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008e28:	4641      	mov	r1, r8
 8008e2a:	1851      	adds	r1, r2, r1
 8008e2c:	6039      	str	r1, [r7, #0]
 8008e2e:	4649      	mov	r1, r9
 8008e30:	414b      	adcs	r3, r1
 8008e32:	607b      	str	r3, [r7, #4]
 8008e34:	f04f 0200 	mov.w	r2, #0
 8008e38:	f04f 0300 	mov.w	r3, #0
 8008e3c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e40:	4659      	mov	r1, fp
 8008e42:	00cb      	lsls	r3, r1, #3
 8008e44:	4651      	mov	r1, sl
 8008e46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e4a:	4651      	mov	r1, sl
 8008e4c:	00ca      	lsls	r2, r1, #3
 8008e4e:	4610      	mov	r0, r2
 8008e50:	4619      	mov	r1, r3
 8008e52:	4603      	mov	r3, r0
 8008e54:	4642      	mov	r2, r8
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e5a:	464b      	mov	r3, r9
 8008e5c:	460a      	mov	r2, r1
 8008e5e:	eb42 0303 	adc.w	r3, r2, r3
 8008e62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e6e:	667a      	str	r2, [r7, #100]	@ 0x64
 8008e70:	f04f 0200 	mov.w	r2, #0
 8008e74:	f04f 0300 	mov.w	r3, #0
 8008e78:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008e7c:	4649      	mov	r1, r9
 8008e7e:	008b      	lsls	r3, r1, #2
 8008e80:	4641      	mov	r1, r8
 8008e82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e86:	4641      	mov	r1, r8
 8008e88:	008a      	lsls	r2, r1, #2
 8008e8a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008e8e:	f7f7 ff03 	bl	8000c98 <__aeabi_uldivmod>
 8008e92:	4602      	mov	r2, r0
 8008e94:	460b      	mov	r3, r1
 8008e96:	4b0d      	ldr	r3, [pc, #52]	@ (8008ecc <UART_SetConfig+0x4e4>)
 8008e98:	fba3 1302 	umull	r1, r3, r3, r2
 8008e9c:	095b      	lsrs	r3, r3, #5
 8008e9e:	2164      	movs	r1, #100	@ 0x64
 8008ea0:	fb01 f303 	mul.w	r3, r1, r3
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	3332      	adds	r3, #50	@ 0x32
 8008eaa:	4a08      	ldr	r2, [pc, #32]	@ (8008ecc <UART_SetConfig+0x4e4>)
 8008eac:	fba2 2303 	umull	r2, r3, r2, r3
 8008eb0:	095b      	lsrs	r3, r3, #5
 8008eb2:	f003 020f 	and.w	r2, r3, #15
 8008eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4422      	add	r2, r4
 8008ebe:	609a      	str	r2, [r3, #8]
}
 8008ec0:	bf00      	nop
 8008ec2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ecc:	51eb851f 	.word	0x51eb851f

08008ed0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008ed0:	b084      	sub	sp, #16
 8008ed2:	b480      	push	{r7}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	6078      	str	r0, [r7, #4]
 8008eda:	f107 001c 	add.w	r0, r7, #28
 8008ede:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008ee6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008eea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8008eee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008ef0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8008ef2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008ef4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8008ef6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8008efa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008efc:	68fa      	ldr	r2, [r7, #12]
 8008efe:	4313      	orrs	r3, r2
 8008f00:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8008f0a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	431a      	orrs	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008f16:	2300      	movs	r3, #0
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	b004      	add	sp, #16
 8008f24:	4770      	bx	lr

08008f26 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008f26:	b480      	push	{r7}
 8008f28:	b083      	sub	sp, #12
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008f40:	b480      	push	{r7}
 8008f42:	b083      	sub	sp, #12
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008f54:	2300      	movs	r3, #0
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr

08008f62 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008f62:	b480      	push	{r7}
 8008f64:	b083      	sub	sp, #12
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2203      	movs	r2, #3
 8008f6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f003 0303 	and.w	r3, r3, #3
}
 8008f8e:	4618      	mov	r0, r3
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008f9a:	b480      	push	{r7}
 8008f9c:	b085      	sub	sp, #20
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
 8008fa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fb8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008fbe:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008fc4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8008fd4:	f023 030f 	bic.w	r3, r3, #15
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	431a      	orrs	r2, r3
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008fe0:	2300      	movs	r3, #0
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3714      	adds	r7, #20
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr

08008fee <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	691b      	ldr	r3, [r3, #16]
 8008ffa:	b2db      	uxtb	r3, r3
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	3314      	adds	r3, #20
 8009016:	461a      	mov	r2, r3
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	4413      	add	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
}  
 8009022:	4618      	mov	r0, r3
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr

0800902e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800902e:	b480      	push	{r7}
 8009030:	b085      	sub	sp, #20
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009038:	2300      	movs	r3, #0
 800903a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009054:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800905a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009060:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800906c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8009078:	2300      	movs	r3, #0

}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b088      	sub	sp, #32
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
 800908e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009094:	2310      	movs	r3, #16
 8009096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009098:	2340      	movs	r3, #64	@ 0x40
 800909a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800909c:	2300      	movs	r3, #0
 800909e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090a6:	f107 0308 	add.w	r3, r7, #8
 80090aa:	4619      	mov	r1, r3
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f7ff ff74 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80090b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090b6:	2110      	movs	r1, #16
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fa19 	bl	80094f0 <SDMMC_GetCmdResp1>
 80090be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090c0:	69fb      	ldr	r3, [r7, #28]
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3720      	adds	r7, #32
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b088      	sub	sp, #32
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80090d8:	2311      	movs	r3, #17
 80090da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80090dc:	2340      	movs	r3, #64	@ 0x40
 80090de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80090e0:	2300      	movs	r3, #0
 80090e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80090e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80090ea:	f107 0308 	add.w	r3, r7, #8
 80090ee:	4619      	mov	r1, r3
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f7ff ff52 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80090f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80090fa:	2111      	movs	r1, #17
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f9f7 	bl	80094f0 <SDMMC_GetCmdResp1>
 8009102:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009104:	69fb      	ldr	r3, [r7, #28]
}
 8009106:	4618      	mov	r0, r3
 8009108:	3720      	adds	r7, #32
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}

0800910e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800910e:	b580      	push	{r7, lr}
 8009110:	b088      	sub	sp, #32
 8009112:	af00      	add	r7, sp, #0
 8009114:	6078      	str	r0, [r7, #4]
 8009116:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800911c:	2312      	movs	r3, #18
 800911e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009120:	2340      	movs	r3, #64	@ 0x40
 8009122:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009124:	2300      	movs	r3, #0
 8009126:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009128:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800912c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800912e:	f107 0308 	add.w	r3, r7, #8
 8009132:	4619      	mov	r1, r3
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f7ff ff30 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800913a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800913e:	2112      	movs	r1, #18
 8009140:	6878      	ldr	r0, [r7, #4]
 8009142:	f000 f9d5 	bl	80094f0 <SDMMC_GetCmdResp1>
 8009146:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009148:	69fb      	ldr	r3, [r7, #28]
}
 800914a:	4618      	mov	r0, r3
 800914c:	3720      	adds	r7, #32
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}

08009152 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b088      	sub	sp, #32
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009160:	2318      	movs	r3, #24
 8009162:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009164:	2340      	movs	r3, #64	@ 0x40
 8009166:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009168:	2300      	movs	r3, #0
 800916a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800916c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009170:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	4619      	mov	r1, r3
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f7ff ff0e 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800917e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009182:	2118      	movs	r1, #24
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9b3 	bl	80094f0 <SDMMC_GetCmdResp1>
 800918a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800918c:	69fb      	ldr	r3, [r7, #28]
}
 800918e:	4618      	mov	r0, r3
 8009190:	3720      	adds	r7, #32
 8009192:	46bd      	mov	sp, r7
 8009194:	bd80      	pop	{r7, pc}

08009196 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009196:	b580      	push	{r7, lr}
 8009198:	b088      	sub	sp, #32
 800919a:	af00      	add	r7, sp, #0
 800919c:	6078      	str	r0, [r7, #4]
 800919e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80091a4:	2319      	movs	r3, #25
 80091a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091a8:	2340      	movs	r3, #64	@ 0x40
 80091aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091ac:	2300      	movs	r3, #0
 80091ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091b6:	f107 0308 	add.w	r3, r7, #8
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f7ff feec 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80091c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091c6:	2119      	movs	r1, #25
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f000 f991 	bl	80094f0 <SDMMC_GetCmdResp1>
 80091ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091d0:	69fb      	ldr	r3, [r7, #28]
}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3720      	adds	r7, #32
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}
	...

080091dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b088      	sub	sp, #32
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80091e4:	2300      	movs	r3, #0
 80091e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80091e8:	230c      	movs	r3, #12
 80091ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091ec:	2340      	movs	r3, #64	@ 0x40
 80091ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091f0:	2300      	movs	r3, #0
 80091f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091fa:	f107 0308 	add.w	r3, r7, #8
 80091fe:	4619      	mov	r1, r3
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7ff feca 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009206:	4a05      	ldr	r2, [pc, #20]	@ (800921c <SDMMC_CmdStopTransfer+0x40>)
 8009208:	210c      	movs	r1, #12
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f970 	bl	80094f0 <SDMMC_GetCmdResp1>
 8009210:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009212:	69fb      	ldr	r3, [r7, #28]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3720      	adds	r7, #32
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	05f5e100 	.word	0x05f5e100

08009220 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b08a      	sub	sp, #40	@ 0x28
 8009224:	af00      	add	r7, sp, #0
 8009226:	60f8      	str	r0, [r7, #12]
 8009228:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009230:	2307      	movs	r3, #7
 8009232:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009234:	2340      	movs	r3, #64	@ 0x40
 8009236:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009238:	2300      	movs	r3, #0
 800923a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800923c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009240:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009242:	f107 0310 	add.w	r3, r7, #16
 8009246:	4619      	mov	r1, r3
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f7ff fea6 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800924e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009252:	2107      	movs	r1, #7
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 f94b 	bl	80094f0 <SDMMC_GetCmdResp1>
 800925a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800925c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800925e:	4618      	mov	r0, r3
 8009260:	3728      	adds	r7, #40	@ 0x28
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800926e:	2300      	movs	r3, #0
 8009270:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009272:	2300      	movs	r3, #0
 8009274:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009276:	2300      	movs	r3, #0
 8009278:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800927e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009282:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009284:	f107 0308 	add.w	r3, r7, #8
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff fe85 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fb65 	bl	8009960 <SDMMC_GetCmdError>
 8009296:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009298:	69fb      	ldr	r3, [r7, #28]
}
 800929a:	4618      	mov	r0, r3
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}

080092a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80092a2:	b580      	push	{r7, lr}
 80092a4:	b088      	sub	sp, #32
 80092a6:	af00      	add	r7, sp, #0
 80092a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80092aa:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80092ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80092b0:	2308      	movs	r3, #8
 80092b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092b4:	2340      	movs	r3, #64	@ 0x40
 80092b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092b8:	2300      	movs	r3, #0
 80092ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f7ff fe66 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f000 faf8 	bl	80098c4 <SDMMC_GetCmdResp7>
 80092d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092d6:	69fb      	ldr	r3, [r7, #28]
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3720      	adds	r7, #32
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80092ee:	2337      	movs	r3, #55	@ 0x37
 80092f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092f2:	2340      	movs	r3, #64	@ 0x40
 80092f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092f6:	2300      	movs	r3, #0
 80092f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009300:	f107 0308 	add.w	r3, r7, #8
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff fe47 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800930c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009310:	2137      	movs	r1, #55	@ 0x37
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f8ec 	bl	80094f0 <SDMMC_GetCmdResp1>
 8009318:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800931a:	69fb      	ldr	r3, [r7, #28]
}
 800931c:	4618      	mov	r0, r3
 800931e:	3720      	adds	r7, #32
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b088      	sub	sp, #32
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009338:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800933a:	2329      	movs	r3, #41	@ 0x29
 800933c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800933e:	2340      	movs	r3, #64	@ 0x40
 8009340:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009342:	2300      	movs	r3, #0
 8009344:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009346:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800934a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800934c:	f107 0308 	add.w	r3, r7, #8
 8009350:	4619      	mov	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff fe21 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 f9ff 	bl	800975c <SDMMC_GetCmdResp3>
 800935e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009360:	69fb      	ldr	r3, [r7, #28]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b088      	sub	sp, #32
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
 8009372:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009378:	2306      	movs	r3, #6
 800937a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800937c:	2340      	movs	r3, #64	@ 0x40
 800937e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009380:	2300      	movs	r3, #0
 8009382:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009384:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009388:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800938a:	f107 0308 	add.w	r3, r7, #8
 800938e:	4619      	mov	r1, r3
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f7ff fe02 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800939a:	2106      	movs	r1, #6
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 f8a7 	bl	80094f0 <SDMMC_GetCmdResp1>
 80093a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a4:	69fb      	ldr	r3, [r7, #28]
}
 80093a6:	4618      	mov	r0, r3
 80093a8:	3720      	adds	r7, #32
 80093aa:	46bd      	mov	sp, r7
 80093ac:	bd80      	pop	{r7, pc}

080093ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80093ae:	b580      	push	{r7, lr}
 80093b0:	b088      	sub	sp, #32
 80093b2:	af00      	add	r7, sp, #0
 80093b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80093ba:	2333      	movs	r3, #51	@ 0x33
 80093bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093be:	2340      	movs	r3, #64	@ 0x40
 80093c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80093ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093cc:	f107 0308 	add.w	r3, r7, #8
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fde1 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80093d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093dc:	2133      	movs	r1, #51	@ 0x33
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f886 	bl	80094f0 <SDMMC_GetCmdResp1>
 80093e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093e6:	69fb      	ldr	r3, [r7, #28]
}
 80093e8:	4618      	mov	r0, r3
 80093ea:	3720      	adds	r7, #32
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b088      	sub	sp, #32
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80093f8:	2300      	movs	r3, #0
 80093fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80093fc:	2302      	movs	r3, #2
 80093fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009400:	23c0      	movs	r3, #192	@ 0xc0
 8009402:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009404:	2300      	movs	r3, #0
 8009406:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800940c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800940e:	f107 0308 	add.w	r3, r7, #8
 8009412:	4619      	mov	r1, r3
 8009414:	6878      	ldr	r0, [r7, #4]
 8009416:	f7ff fdc0 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f956 	bl	80096cc <SDMMC_GetCmdResp2>
 8009420:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009422:	69fb      	ldr	r3, [r7, #28]
}
 8009424:	4618      	mov	r0, r3
 8009426:	3720      	adds	r7, #32
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b088      	sub	sp, #32
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
 8009434:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800943a:	2309      	movs	r3, #9
 800943c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800943e:	23c0      	movs	r3, #192	@ 0xc0
 8009440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009442:	2300      	movs	r3, #0
 8009444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800944a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800944c:	f107 0308 	add.w	r3, r7, #8
 8009450:	4619      	mov	r1, r3
 8009452:	6878      	ldr	r0, [r7, #4]
 8009454:	f7ff fda1 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f937 	bl	80096cc <SDMMC_GetCmdResp2>
 800945e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009460:	69fb      	ldr	r3, [r7, #28]
}
 8009462:	4618      	mov	r0, r3
 8009464:	3720      	adds	r7, #32
 8009466:	46bd      	mov	sp, r7
 8009468:	bd80      	pop	{r7, pc}

0800946a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800946a:	b580      	push	{r7, lr}
 800946c:	b088      	sub	sp, #32
 800946e:	af00      	add	r7, sp, #0
 8009470:	6078      	str	r0, [r7, #4]
 8009472:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009474:	2300      	movs	r3, #0
 8009476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009478:	2303      	movs	r3, #3
 800947a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800947c:	2340      	movs	r3, #64	@ 0x40
 800947e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009480:	2300      	movs	r3, #0
 8009482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009488:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4619      	mov	r1, r3
 8009490:	6878      	ldr	r0, [r7, #4]
 8009492:	f7ff fd82 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009496:	683a      	ldr	r2, [r7, #0]
 8009498:	2103      	movs	r1, #3
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f99c 	bl	80097d8 <SDMMC_GetCmdResp6>
 80094a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094a2:	69fb      	ldr	r3, [r7, #28]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3720      	adds	r7, #32
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b088      	sub	sp, #32
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
 80094b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80094ba:	230d      	movs	r3, #13
 80094bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80094be:	2340      	movs	r3, #64	@ 0x40
 80094c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80094c2:	2300      	movs	r3, #0
 80094c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80094c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80094ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80094cc:	f107 0308 	add.w	r3, r7, #8
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f7ff fd61 	bl	8008f9a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80094d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80094dc:	210d      	movs	r1, #13
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 f806 	bl	80094f0 <SDMMC_GetCmdResp1>
 80094e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80094e6:	69fb      	ldr	r3, [r7, #28]
}
 80094e8:	4618      	mov	r0, r3
 80094ea:	3720      	adds	r7, #32
 80094ec:	46bd      	mov	sp, r7
 80094ee:	bd80      	pop	{r7, pc}

080094f0 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b088      	sub	sp, #32
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	60f8      	str	r0, [r7, #12]
 80094f8:	460b      	mov	r3, r1
 80094fa:	607a      	str	r2, [r7, #4]
 80094fc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80094fe:	4b70      	ldr	r3, [pc, #448]	@ (80096c0 <SDMMC_GetCmdResp1+0x1d0>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a70      	ldr	r2, [pc, #448]	@ (80096c4 <SDMMC_GetCmdResp1+0x1d4>)
 8009504:	fba2 2303 	umull	r2, r3, r2, r3
 8009508:	0a5a      	lsrs	r2, r3, #9
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	fb02 f303 	mul.w	r3, r2, r3
 8009510:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009512:	69fb      	ldr	r3, [r7, #28]
 8009514:	1e5a      	subs	r2, r3, #1
 8009516:	61fa      	str	r2, [r7, #28]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d102      	bne.n	8009522 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800951c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009520:	e0c9      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009526:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009528:	69bb      	ldr	r3, [r7, #24]
 800952a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0ef      	beq.n	8009512 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009538:	2b00      	cmp	r3, #0
 800953a:	d1ea      	bne.n	8009512 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d004      	beq.n	8009552 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	2204      	movs	r2, #4
 800954c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800954e:	2304      	movs	r3, #4
 8009550:	e0b1      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d004      	beq.n	8009568 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2201      	movs	r2, #1
 8009562:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009564:	2301      	movs	r3, #1
 8009566:	e0a6      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	22c5      	movs	r2, #197	@ 0xc5
 800956c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	f7ff fd3d 	bl	8008fee <SDIO_GetCommandResponse>
 8009574:	4603      	mov	r3, r0
 8009576:	461a      	mov	r2, r3
 8009578:	7afb      	ldrb	r3, [r7, #11]
 800957a:	4293      	cmp	r3, r2
 800957c:	d001      	beq.n	8009582 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800957e:	2301      	movs	r3, #1
 8009580:	e099      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009582:	2100      	movs	r1, #0
 8009584:	68f8      	ldr	r0, [r7, #12]
 8009586:	f7ff fd3f 	bl	8009008 <SDIO_GetResponse>
 800958a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800958c:	697a      	ldr	r2, [r7, #20]
 800958e:	4b4e      	ldr	r3, [pc, #312]	@ (80096c8 <SDMMC_GetCmdResp1+0x1d8>)
 8009590:	4013      	ands	r3, r2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d101      	bne.n	800959a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009596:	2300      	movs	r3, #0
 8009598:	e08d      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	2b00      	cmp	r3, #0
 800959e:	da02      	bge.n	80095a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80095a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80095a4:	e087      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d001      	beq.n	80095b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80095b0:	2340      	movs	r3, #64	@ 0x40
 80095b2:	e080      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d001      	beq.n	80095c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80095be:	2380      	movs	r3, #128	@ 0x80
 80095c0:	e079      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80095cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80095d0:	e071      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d002      	beq.n	80095e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80095dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80095e0:	e069      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80095ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80095f0:	e061      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80095f2:	697b      	ldr	r3, [r7, #20]
 80095f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80095fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009600:	e059      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009602:	697b      	ldr	r3, [r7, #20]
 8009604:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009608:	2b00      	cmp	r3, #0
 800960a:	d002      	beq.n	8009612 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800960c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009610:	e051      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009618:	2b00      	cmp	r3, #0
 800961a:	d002      	beq.n	8009622 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800961c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009620:	e049      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d002      	beq.n	8009632 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800962c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009630:	e041      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009638:	2b00      	cmp	r3, #0
 800963a:	d002      	beq.n	8009642 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800963c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009640:	e039      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009648:	2b00      	cmp	r3, #0
 800964a:	d002      	beq.n	8009652 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800964c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009650:	e031      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009652:	697b      	ldr	r3, [r7, #20]
 8009654:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009658:	2b00      	cmp	r3, #0
 800965a:	d002      	beq.n	8009662 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800965c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009660:	e029      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800966c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009670:	e021      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009678:	2b00      	cmp	r3, #0
 800967a:	d002      	beq.n	8009682 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800967c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009680:	e019      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009688:	2b00      	cmp	r3, #0
 800968a:	d002      	beq.n	8009692 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800968c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009690:	e011      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009692:	697b      	ldr	r3, [r7, #20]
 8009694:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d002      	beq.n	80096a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800969c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80096a0:	e009      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	f003 0308 	and.w	r3, r3, #8
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d002      	beq.n	80096b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80096ac:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80096b0:	e001      	b.n	80096b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80096b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3720      	adds	r7, #32
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
 80096be:	bf00      	nop
 80096c0:	20000004 	.word	0x20000004
 80096c4:	10624dd3 	.word	0x10624dd3
 80096c8:	fdffe008 	.word	0xfdffe008

080096cc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b085      	sub	sp, #20
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096d4:	4b1f      	ldr	r3, [pc, #124]	@ (8009754 <SDMMC_GetCmdResp2+0x88>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	4a1f      	ldr	r2, [pc, #124]	@ (8009758 <SDMMC_GetCmdResp2+0x8c>)
 80096da:	fba2 2303 	umull	r2, r3, r2, r3
 80096de:	0a5b      	lsrs	r3, r3, #9
 80096e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096e4:	fb02 f303 	mul.w	r3, r2, r3
 80096e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	1e5a      	subs	r2, r3, #1
 80096ee:	60fa      	str	r2, [r7, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d102      	bne.n	80096fa <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096f4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80096f8:	e026      	b.n	8009748 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80096fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009700:	68bb      	ldr	r3, [r7, #8]
 8009702:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009706:	2b00      	cmp	r3, #0
 8009708:	d0ef      	beq.n	80096ea <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800970a:	68bb      	ldr	r3, [r7, #8]
 800970c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1ea      	bne.n	80096ea <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009718:	f003 0304 	and.w	r3, r3, #4
 800971c:	2b00      	cmp	r3, #0
 800971e:	d004      	beq.n	800972a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2204      	movs	r2, #4
 8009724:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009726:	2304      	movs	r3, #4
 8009728:	e00e      	b.n	8009748 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d004      	beq.n	8009740 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2201      	movs	r2, #1
 800973a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800973c:	2301      	movs	r3, #1
 800973e:	e003      	b.n	8009748 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	22c5      	movs	r2, #197	@ 0xc5
 8009744:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009746:	2300      	movs	r3, #0
}
 8009748:	4618      	mov	r0, r3
 800974a:	3714      	adds	r7, #20
 800974c:	46bd      	mov	sp, r7
 800974e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009752:	4770      	bx	lr
 8009754:	20000004 	.word	0x20000004
 8009758:	10624dd3 	.word	0x10624dd3

0800975c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009764:	4b1a      	ldr	r3, [pc, #104]	@ (80097d0 <SDMMC_GetCmdResp3+0x74>)
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a1a      	ldr	r2, [pc, #104]	@ (80097d4 <SDMMC_GetCmdResp3+0x78>)
 800976a:	fba2 2303 	umull	r2, r3, r2, r3
 800976e:	0a5b      	lsrs	r3, r3, #9
 8009770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009774:	fb02 f303 	mul.w	r3, r2, r3
 8009778:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	1e5a      	subs	r2, r3, #1
 800977e:	60fa      	str	r2, [r7, #12]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d102      	bne.n	800978a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009784:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009788:	e01b      	b.n	80097c2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800978e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0ef      	beq.n	800977a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1ea      	bne.n	800977a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80097a8:	f003 0304 	and.w	r3, r3, #4
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d004      	beq.n	80097ba <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2204      	movs	r2, #4
 80097b4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80097b6:	2304      	movs	r3, #4
 80097b8:	e003      	b.n	80097c2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	22c5      	movs	r2, #197	@ 0xc5
 80097be:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80097c0:	2300      	movs	r3, #0
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	20000004 	.word	0x20000004
 80097d4:	10624dd3 	.word	0x10624dd3

080097d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80097d8:	b580      	push	{r7, lr}
 80097da:	b088      	sub	sp, #32
 80097dc:	af00      	add	r7, sp, #0
 80097de:	60f8      	str	r0, [r7, #12]
 80097e0:	460b      	mov	r3, r1
 80097e2:	607a      	str	r2, [r7, #4]
 80097e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80097e6:	4b35      	ldr	r3, [pc, #212]	@ (80098bc <SDMMC_GetCmdResp6+0xe4>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a35      	ldr	r2, [pc, #212]	@ (80098c0 <SDMMC_GetCmdResp6+0xe8>)
 80097ec:	fba2 2303 	umull	r2, r3, r2, r3
 80097f0:	0a5b      	lsrs	r3, r3, #9
 80097f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80097f6:	fb02 f303 	mul.w	r3, r2, r3
 80097fa:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	1e5a      	subs	r2, r3, #1
 8009800:	61fa      	str	r2, [r7, #28]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d102      	bne.n	800980c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009806:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800980a:	e052      	b.n	80098b2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009810:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009818:	2b00      	cmp	r3, #0
 800981a:	d0ef      	beq.n	80097fc <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1ea      	bne.n	80097fc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800982a:	f003 0304 	and.w	r3, r3, #4
 800982e:	2b00      	cmp	r3, #0
 8009830:	d004      	beq.n	800983c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2204      	movs	r2, #4
 8009836:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009838:	2304      	movs	r3, #4
 800983a:	e03a      	b.n	80098b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	2201      	movs	r2, #1
 800984c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800984e:	2301      	movs	r3, #1
 8009850:	e02f      	b.n	80098b2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009852:	68f8      	ldr	r0, [r7, #12]
 8009854:	f7ff fbcb 	bl	8008fee <SDIO_GetCommandResponse>
 8009858:	4603      	mov	r3, r0
 800985a:	461a      	mov	r2, r3
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	4293      	cmp	r3, r2
 8009860:	d001      	beq.n	8009866 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009862:	2301      	movs	r3, #1
 8009864:	e025      	b.n	80098b2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	22c5      	movs	r2, #197	@ 0xc5
 800986a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800986c:	2100      	movs	r1, #0
 800986e:	68f8      	ldr	r0, [r7, #12]
 8009870:	f7ff fbca 	bl	8009008 <SDIO_GetResponse>
 8009874:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009876:	697b      	ldr	r3, [r7, #20]
 8009878:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 800987c:	2b00      	cmp	r3, #0
 800987e:	d106      	bne.n	800988e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009880:	697b      	ldr	r3, [r7, #20]
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	b29a      	uxth	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800988a:	2300      	movs	r3, #0
 800988c:	e011      	b.n	80098b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009894:	2b00      	cmp	r3, #0
 8009896:	d002      	beq.n	800989e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009898:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800989c:	e009      	b.n	80098b2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800989e:	697b      	ldr	r3, [r7, #20]
 80098a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d002      	beq.n	80098ae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80098a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098ac:	e001      	b.n	80098b2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80098ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3720      	adds	r7, #32
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}
 80098ba:	bf00      	nop
 80098bc:	20000004 	.word	0x20000004
 80098c0:	10624dd3 	.word	0x10624dd3

080098c4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b085      	sub	sp, #20
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80098cc:	4b22      	ldr	r3, [pc, #136]	@ (8009958 <SDMMC_GetCmdResp7+0x94>)
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a22      	ldr	r2, [pc, #136]	@ (800995c <SDMMC_GetCmdResp7+0x98>)
 80098d2:	fba2 2303 	umull	r2, r3, r2, r3
 80098d6:	0a5b      	lsrs	r3, r3, #9
 80098d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80098dc:	fb02 f303 	mul.w	r3, r2, r3
 80098e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	1e5a      	subs	r2, r3, #1
 80098e6:	60fa      	str	r2, [r7, #12]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d102      	bne.n	80098f2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80098ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80098f0:	e02c      	b.n	800994c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0ef      	beq.n	80098e2 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009908:	2b00      	cmp	r3, #0
 800990a:	d1ea      	bne.n	80098e2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009910:	f003 0304 	and.w	r3, r3, #4
 8009914:	2b00      	cmp	r3, #0
 8009916:	d004      	beq.n	8009922 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2204      	movs	r2, #4
 800991c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800991e:	2304      	movs	r3, #4
 8009920:	e014      	b.n	800994c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009926:	f003 0301 	and.w	r3, r3, #1
 800992a:	2b00      	cmp	r3, #0
 800992c:	d004      	beq.n	8009938 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	2201      	movs	r2, #1
 8009932:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009934:	2301      	movs	r3, #1
 8009936:	e009      	b.n	800994c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800993c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009940:	2b00      	cmp	r3, #0
 8009942:	d002      	beq.n	800994a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2240      	movs	r2, #64	@ 0x40
 8009948:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800994a:	2300      	movs	r3, #0
  
}
 800994c:	4618      	mov	r0, r3
 800994e:	3714      	adds	r7, #20
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr
 8009958:	20000004 	.word	0x20000004
 800995c:	10624dd3 	.word	0x10624dd3

08009960 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009960:	b480      	push	{r7}
 8009962:	b085      	sub	sp, #20
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009968:	4b11      	ldr	r3, [pc, #68]	@ (80099b0 <SDMMC_GetCmdError+0x50>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	4a11      	ldr	r2, [pc, #68]	@ (80099b4 <SDMMC_GetCmdError+0x54>)
 800996e:	fba2 2303 	umull	r2, r3, r2, r3
 8009972:	0a5b      	lsrs	r3, r3, #9
 8009974:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009978:	fb02 f303 	mul.w	r3, r2, r3
 800997c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	1e5a      	subs	r2, r3, #1
 8009982:	60fa      	str	r2, [r7, #12]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d102      	bne.n	800998e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009988:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800998c:	e009      	b.n	80099a2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009996:	2b00      	cmp	r3, #0
 8009998:	d0f1      	beq.n	800997e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	22c5      	movs	r2, #197	@ 0xc5
 800999e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3714      	adds	r7, #20
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr
 80099ae:	bf00      	nop
 80099b0:	20000004 	.word	0x20000004
 80099b4:	10624dd3 	.word	0x10624dd3

080099b8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80099bc:	4904      	ldr	r1, [pc, #16]	@ (80099d0 <MX_FATFS_Init+0x18>)
 80099be:	4805      	ldr	r0, [pc, #20]	@ (80099d4 <MX_FATFS_Init+0x1c>)
 80099c0:	f000 fa84 	bl	8009ecc <FATFS_LinkDriver>
 80099c4:	4603      	mov	r3, r0
 80099c6:	461a      	mov	r2, r3
 80099c8:	4b03      	ldr	r3, [pc, #12]	@ (80099d8 <MX_FATFS_Init+0x20>)
 80099ca:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80099cc:	bf00      	nop
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	2000073c 	.word	0x2000073c
 80099d4:	0800fddc 	.word	0x0800fddc
 80099d8:	20000738 	.word	0x20000738

080099dc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80099e2:	2300      	movs	r3, #0
 80099e4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80099e6:	f000 f896 	bl	8009b16 <BSP_SD_IsDetected>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d001      	beq.n	80099f4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80099f0:	2301      	movs	r3, #1
 80099f2:	e012      	b.n	8009a1a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80099f4:	480b      	ldr	r0, [pc, #44]	@ (8009a24 <BSP_SD_Init+0x48>)
 80099f6:	f7fc fb43 	bl	8006080 <HAL_SD_Init>
 80099fa:	4603      	mov	r3, r0
 80099fc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80099fe:	79fb      	ldrb	r3, [r7, #7]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d109      	bne.n	8009a18 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009a04:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8009a08:	4806      	ldr	r0, [pc, #24]	@ (8009a24 <BSP_SD_Init+0x48>)
 8009a0a:	f7fd f911 	bl	8006c30 <HAL_SD_ConfigWideBusOperation>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d001      	beq.n	8009a18 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009a14:	2301      	movs	r3, #1
 8009a16:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009a18:	79fb      	ldrb	r3, [r7, #7]
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000388 	.word	0x20000388

08009a28 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a34:	2300      	movs	r3, #0
 8009a36:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	68f9      	ldr	r1, [r7, #12]
 8009a3e:	4806      	ldr	r0, [pc, #24]	@ (8009a58 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009a40:	f7fc fbce 	bl	80061e0 <HAL_SD_ReadBlocks_DMA>
 8009a44:	4603      	mov	r3, r0
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d001      	beq.n	8009a4e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3718      	adds	r7, #24
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20000388 	.word	0x20000388

08009a5c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	60f8      	str	r0, [r7, #12]
 8009a64:	60b9      	str	r1, [r7, #8]
 8009a66:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	68ba      	ldr	r2, [r7, #8]
 8009a70:	68f9      	ldr	r1, [r7, #12]
 8009a72:	4806      	ldr	r0, [pc, #24]	@ (8009a8c <BSP_SD_WriteBlocks_DMA+0x30>)
 8009a74:	f7fc fc96 	bl	80063a4 <HAL_SD_WriteBlocks_DMA>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d001      	beq.n	8009a82 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a84:	4618      	mov	r0, r3
 8009a86:	3718      	adds	r7, #24
 8009a88:	46bd      	mov	sp, r7
 8009a8a:	bd80      	pop	{r7, pc}
 8009a8c:	20000388 	.word	0x20000388

08009a90 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009a94:	4805      	ldr	r0, [pc, #20]	@ (8009aac <BSP_SD_GetCardState+0x1c>)
 8009a96:	f7fd f965 	bl	8006d64 <HAL_SD_GetCardState>
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	2b04      	cmp	r3, #4
 8009a9e:	bf14      	ite	ne
 8009aa0:	2301      	movne	r3, #1
 8009aa2:	2300      	moveq	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	bd80      	pop	{r7, pc}
 8009aaa:	bf00      	nop
 8009aac:	20000388 	.word	0x20000388

08009ab0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009ab8:	6879      	ldr	r1, [r7, #4]
 8009aba:	4803      	ldr	r0, [pc, #12]	@ (8009ac8 <BSP_SD_GetCardInfo+0x18>)
 8009abc:	f7fd f88c 	bl	8006bd8 <HAL_SD_GetCardInfo>
}
 8009ac0:	bf00      	nop
 8009ac2:	3708      	adds	r7, #8
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	20000388 	.word	0x20000388

08009acc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b082      	sub	sp, #8
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009ad4:	f000 f818 	bl	8009b08 <BSP_SD_AbortCallback>
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009ae8:	f000 f98c 	bl	8009e04 <BSP_SD_WriteCpltCallback>
}
 8009aec:	bf00      	nop
 8009aee:	3708      	adds	r7, #8
 8009af0:	46bd      	mov	sp, r7
 8009af2:	bd80      	pop	{r7, pc}

08009af4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b082      	sub	sp, #8
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009afc:	f000 f98e 	bl	8009e1c <BSP_SD_ReadCpltCallback>
}
 8009b00:	bf00      	nop
 8009b02:	3708      	adds	r7, #8
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}

08009b08 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	af00      	add	r7, sp, #0

}
 8009b0c:	bf00      	nop
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009b1c:	2301      	movs	r3, #1
 8009b1e:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8009b20:	79fb      	ldrb	r3, [r7, #7]
 8009b22:	b2db      	uxtb	r3, r3
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	370c      	adds	r7, #12
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr

08009b30 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009b38:	f7f9 fa32 	bl	8002fa0 <HAL_GetTick>
 8009b3c:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009b3e:	e006      	b.n	8009b4e <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009b40:	f7ff ffa6 	bl	8009a90 <BSP_SD_GetCardState>
 8009b44:	4603      	mov	r3, r0
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d101      	bne.n	8009b4e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	e009      	b.n	8009b62 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8009b4e:	f7f9 fa27 	bl	8002fa0 <HAL_GetTick>
 8009b52:	4602      	mov	r2, r0
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	1ad3      	subs	r3, r2, r3
 8009b58:	687a      	ldr	r2, [r7, #4]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d8f0      	bhi.n	8009b40 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009b5e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3710      	adds	r7, #16
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
	...

08009b6c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	b082      	sub	sp, #8
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	4603      	mov	r3, r0
 8009b74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009b76:	4b0b      	ldr	r3, [pc, #44]	@ (8009ba4 <SD_CheckStatus+0x38>)
 8009b78:	2201      	movs	r2, #1
 8009b7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009b7c:	f7ff ff88 	bl	8009a90 <BSP_SD_GetCardState>
 8009b80:	4603      	mov	r3, r0
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d107      	bne.n	8009b96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009b86:	4b07      	ldr	r3, [pc, #28]	@ (8009ba4 <SD_CheckStatus+0x38>)
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	f023 0301 	bic.w	r3, r3, #1
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	4b04      	ldr	r3, [pc, #16]	@ (8009ba4 <SD_CheckStatus+0x38>)
 8009b94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009b96:	4b03      	ldr	r3, [pc, #12]	@ (8009ba4 <SD_CheckStatus+0x38>)
 8009b98:	781b      	ldrb	r3, [r3, #0]
 8009b9a:	b2db      	uxtb	r3, r3
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	2000000d 	.word	0x2000000d

08009ba8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8009bb2:	f7ff ff13 	bl	80099dc <BSP_SD_Init>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d107      	bne.n	8009bcc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009bbc:	79fb      	ldrb	r3, [r7, #7]
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff ffd4 	bl	8009b6c <SD_CheckStatus>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	4b04      	ldr	r3, [pc, #16]	@ (8009bdc <SD_initialize+0x34>)
 8009bca:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009bcc:	4b03      	ldr	r3, [pc, #12]	@ (8009bdc <SD_initialize+0x34>)
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	b2db      	uxtb	r3, r3
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	2000000d 	.word	0x2000000d

08009be0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f7ff ffbd 	bl	8009b6c <SD_CheckStatus>
 8009bf2:	4603      	mov	r3, r0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3708      	adds	r7, #8
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60b9      	str	r1, [r7, #8]
 8009c04:	607a      	str	r2, [r7, #4]
 8009c06:	603b      	str	r3, [r7, #0]
 8009c08:	4603      	mov	r3, r0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009c10:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009c14:	f7ff ff8c 	bl	8009b30 <SD_CheckStatusWithTimeout>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	da01      	bge.n	8009c22 <SD_read+0x26>
  {
    return res;
 8009c1e:	7dfb      	ldrb	r3, [r7, #23]
 8009c20:	e03b      	b.n	8009c9a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8009c22:	683a      	ldr	r2, [r7, #0]
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	68b8      	ldr	r0, [r7, #8]
 8009c28:	f7ff fefe 	bl	8009a28 <BSP_SD_ReadBlocks_DMA>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d132      	bne.n	8009c98 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8009c32:	4b1c      	ldr	r3, [pc, #112]	@ (8009ca4 <SD_read+0xa8>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009c38:	f7f9 f9b2 	bl	8002fa0 <HAL_GetTick>
 8009c3c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009c3e:	bf00      	nop
 8009c40:	4b18      	ldr	r3, [pc, #96]	@ (8009ca4 <SD_read+0xa8>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d108      	bne.n	8009c5a <SD_read+0x5e>
 8009c48:	f7f9 f9aa 	bl	8002fa0 <HAL_GetTick>
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	1ad3      	subs	r3, r2, r3
 8009c52:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d9f2      	bls.n	8009c40 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 8009c5a:	4b12      	ldr	r3, [pc, #72]	@ (8009ca4 <SD_read+0xa8>)
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	75fb      	strb	r3, [r7, #23]
 8009c66:	e017      	b.n	8009c98 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009c68:	4b0e      	ldr	r3, [pc, #56]	@ (8009ca4 <SD_read+0xa8>)
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009c6e:	f7f9 f997 	bl	8002fa0 <HAL_GetTick>
 8009c72:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c74:	e007      	b.n	8009c86 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c76:	f7ff ff0b 	bl	8009a90 <BSP_SD_GetCardState>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d102      	bne.n	8009c86 <SD_read+0x8a>
          {
            res = RES_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8009c84:	e008      	b.n	8009c98 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009c86:	f7f9 f98b 	bl	8002fa0 <HAL_GetTick>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	1ad3      	subs	r3, r2, r3
 8009c90:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d9ee      	bls.n	8009c76 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	3718      	adds	r7, #24
 8009c9e:	46bd      	mov	sp, r7
 8009ca0:	bd80      	pop	{r7, pc}
 8009ca2:	bf00      	nop
 8009ca4:	20000744 	.word	0x20000744

08009ca8 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60b9      	str	r1, [r7, #8]
 8009cb0:	607a      	str	r2, [r7, #4]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009cb8:	2301      	movs	r3, #1
 8009cba:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009cbc:	4b24      	ldr	r3, [pc, #144]	@ (8009d50 <SD_write+0xa8>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009cc2:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009cc6:	f7ff ff33 	bl	8009b30 <SD_CheckStatusWithTimeout>
 8009cca:	4603      	mov	r3, r0
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	da01      	bge.n	8009cd4 <SD_write+0x2c>
  {
    return res;
 8009cd0:	7dfb      	ldrb	r3, [r7, #23]
 8009cd2:	e038      	b.n	8009d46 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	6879      	ldr	r1, [r7, #4]
 8009cd8:	68b8      	ldr	r0, [r7, #8]
 8009cda:	f7ff febf 	bl	8009a5c <BSP_SD_WriteBlocks_DMA>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d12f      	bne.n	8009d44 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8009ce4:	f7f9 f95c 	bl	8002fa0 <HAL_GetTick>
 8009ce8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009cea:	bf00      	nop
 8009cec:	4b18      	ldr	r3, [pc, #96]	@ (8009d50 <SD_write+0xa8>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d108      	bne.n	8009d06 <SD_write+0x5e>
 8009cf4:	f7f9 f954 	bl	8002fa0 <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	693b      	ldr	r3, [r7, #16]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d9f2      	bls.n	8009cec <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 8009d06:	4b12      	ldr	r3, [pc, #72]	@ (8009d50 <SD_write+0xa8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d102      	bne.n	8009d14 <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	75fb      	strb	r3, [r7, #23]
 8009d12:	e017      	b.n	8009d44 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8009d14:	4b0e      	ldr	r3, [pc, #56]	@ (8009d50 <SD_write+0xa8>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009d1a:	f7f9 f941 	bl	8002fa0 <HAL_GetTick>
 8009d1e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d20:	e007      	b.n	8009d32 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d22:	f7ff feb5 	bl	8009a90 <BSP_SD_GetCardState>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d102      	bne.n	8009d32 <SD_write+0x8a>
          {
            res = RES_OK;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	75fb      	strb	r3, [r7, #23]
            break;
 8009d30:	e008      	b.n	8009d44 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009d32:	f7f9 f935 	bl	8002fa0 <HAL_GetTick>
 8009d36:	4602      	mov	r2, r0
 8009d38:	693b      	ldr	r3, [r7, #16]
 8009d3a:	1ad3      	subs	r3, r2, r3
 8009d3c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d9ee      	bls.n	8009d22 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8009d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	20000740 	.word	0x20000740

08009d54 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b08c      	sub	sp, #48	@ 0x30
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	603a      	str	r2, [r7, #0]
 8009d5e:	71fb      	strb	r3, [r7, #7]
 8009d60:	460b      	mov	r3, r1
 8009d62:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009d6a:	4b25      	ldr	r3, [pc, #148]	@ (8009e00 <SD_ioctl+0xac>)
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f003 0301 	and.w	r3, r3, #1
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <SD_ioctl+0x28>
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e03c      	b.n	8009df6 <SD_ioctl+0xa2>

  switch (cmd)
 8009d7c:	79bb      	ldrb	r3, [r7, #6]
 8009d7e:	2b03      	cmp	r3, #3
 8009d80:	d834      	bhi.n	8009dec <SD_ioctl+0x98>
 8009d82:	a201      	add	r2, pc, #4	@ (adr r2, 8009d88 <SD_ioctl+0x34>)
 8009d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d88:	08009d99 	.word	0x08009d99
 8009d8c:	08009da1 	.word	0x08009da1
 8009d90:	08009db9 	.word	0x08009db9
 8009d94:	08009dd3 	.word	0x08009dd3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009d9e:	e028      	b.n	8009df2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009da0:	f107 030c 	add.w	r3, r7, #12
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7ff fe83 	bl	8009ab0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009daa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009db6:	e01c      	b.n	8009df2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009db8:	f107 030c 	add.w	r3, r7, #12
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7ff fe77 	bl	8009ab0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009dd0:	e00f      	b.n	8009df2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009dd2:	f107 030c 	add.w	r3, r7, #12
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f7ff fe6a 	bl	8009ab0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dde:	0a5a      	lsrs	r2, r3, #9
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009dea:	e002      	b.n	8009df2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009dec:	2304      	movs	r3, #4
 8009dee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009df2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3730      	adds	r7, #48	@ 0x30
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
 8009dfe:	bf00      	nop
 8009e00:	2000000d 	.word	0x2000000d

08009e04 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009e04:	b480      	push	{r7}
 8009e06:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009e08:	4b03      	ldr	r3, [pc, #12]	@ (8009e18 <BSP_SD_WriteCpltCallback+0x14>)
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]
}
 8009e0e:	bf00      	nop
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr
 8009e18:	20000740 	.word	0x20000740

08009e1c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009e1c:	b480      	push	{r7}
 8009e1e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009e20:	4b03      	ldr	r3, [pc, #12]	@ (8009e30 <BSP_SD_ReadCpltCallback+0x14>)
 8009e22:	2201      	movs	r2, #1
 8009e24:	601a      	str	r2, [r3, #0]
}
 8009e26:	bf00      	nop
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2e:	4770      	bx	lr
 8009e30:	20000744 	.word	0x20000744

08009e34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b087      	sub	sp, #28
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009e42:	2301      	movs	r3, #1
 8009e44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009e46:	2300      	movs	r3, #0
 8009e48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e4c:	7a5b      	ldrb	r3, [r3, #9]
 8009e4e:	b2db      	uxtb	r3, r3
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d131      	bne.n	8009eb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009e54:	4b1c      	ldr	r3, [pc, #112]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e56:	7a5b      	ldrb	r3, [r3, #9]
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	4b1a      	ldr	r3, [pc, #104]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e5e:	2100      	movs	r1, #0
 8009e60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009e62:	4b19      	ldr	r3, [pc, #100]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e64:	7a5b      	ldrb	r3, [r3, #9]
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	4a17      	ldr	r2, [pc, #92]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	4413      	add	r3, r2
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009e72:	4b15      	ldr	r3, [pc, #84]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e74:	7a5b      	ldrb	r3, [r3, #9]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	461a      	mov	r2, r3
 8009e7a:	4b13      	ldr	r3, [pc, #76]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e7c:	4413      	add	r3, r2
 8009e7e:	79fa      	ldrb	r2, [r7, #7]
 8009e80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009e82:	4b11      	ldr	r3, [pc, #68]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e84:	7a5b      	ldrb	r3, [r3, #9]
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	1c5a      	adds	r2, r3, #1
 8009e8a:	b2d1      	uxtb	r1, r2
 8009e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8009ec8 <FATFS_LinkDriverEx+0x94>)
 8009e8e:	7251      	strb	r1, [r2, #9]
 8009e90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009e92:	7dbb      	ldrb	r3, [r7, #22]
 8009e94:	3330      	adds	r3, #48	@ 0x30
 8009e96:	b2da      	uxtb	r2, r3
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	223a      	movs	r2, #58	@ 0x3a
 8009ea2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	3302      	adds	r3, #2
 8009ea8:	222f      	movs	r2, #47	@ 0x2f
 8009eaa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	3303      	adds	r3, #3
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	20000748 	.word	0x20000748

08009ecc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	6839      	ldr	r1, [r7, #0]
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f7ff ffaa 	bl	8009e34 <FATFS_LinkDriverEx>
 8009ee0:	4603      	mov	r3, r0
}
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	3708      	adds	r7, #8
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	bd80      	pop	{r7, pc}

08009eea <__cvt>:
 8009eea:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009eee:	ec57 6b10 	vmov	r6, r7, d0
 8009ef2:	2f00      	cmp	r7, #0
 8009ef4:	460c      	mov	r4, r1
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	463b      	mov	r3, r7
 8009efa:	bfbb      	ittet	lt
 8009efc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8009f00:	461f      	movlt	r7, r3
 8009f02:	2300      	movge	r3, #0
 8009f04:	232d      	movlt	r3, #45	@ 0x2d
 8009f06:	700b      	strb	r3, [r1, #0]
 8009f08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009f0a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8009f0e:	4691      	mov	r9, r2
 8009f10:	f023 0820 	bic.w	r8, r3, #32
 8009f14:	bfbc      	itt	lt
 8009f16:	4632      	movlt	r2, r6
 8009f18:	4616      	movlt	r6, r2
 8009f1a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f1e:	d005      	beq.n	8009f2c <__cvt+0x42>
 8009f20:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8009f24:	d100      	bne.n	8009f28 <__cvt+0x3e>
 8009f26:	3401      	adds	r4, #1
 8009f28:	2102      	movs	r1, #2
 8009f2a:	e000      	b.n	8009f2e <__cvt+0x44>
 8009f2c:	2103      	movs	r1, #3
 8009f2e:	ab03      	add	r3, sp, #12
 8009f30:	9301      	str	r3, [sp, #4]
 8009f32:	ab02      	add	r3, sp, #8
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	ec47 6b10 	vmov	d0, r6, r7
 8009f3a:	4653      	mov	r3, sl
 8009f3c:	4622      	mov	r2, r4
 8009f3e:	f001 f8b3 	bl	800b0a8 <_dtoa_r>
 8009f42:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8009f46:	4605      	mov	r5, r0
 8009f48:	d119      	bne.n	8009f7e <__cvt+0x94>
 8009f4a:	f019 0f01 	tst.w	r9, #1
 8009f4e:	d00e      	beq.n	8009f6e <__cvt+0x84>
 8009f50:	eb00 0904 	add.w	r9, r0, r4
 8009f54:	2200      	movs	r2, #0
 8009f56:	2300      	movs	r3, #0
 8009f58:	4630      	mov	r0, r6
 8009f5a:	4639      	mov	r1, r7
 8009f5c:	f7f6 fdbc 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f60:	b108      	cbz	r0, 8009f66 <__cvt+0x7c>
 8009f62:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f66:	2230      	movs	r2, #48	@ 0x30
 8009f68:	9b03      	ldr	r3, [sp, #12]
 8009f6a:	454b      	cmp	r3, r9
 8009f6c:	d31e      	bcc.n	8009fac <__cvt+0xc2>
 8009f6e:	9b03      	ldr	r3, [sp, #12]
 8009f70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009f72:	1b5b      	subs	r3, r3, r5
 8009f74:	4628      	mov	r0, r5
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	b004      	add	sp, #16
 8009f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009f82:	eb00 0904 	add.w	r9, r0, r4
 8009f86:	d1e5      	bne.n	8009f54 <__cvt+0x6a>
 8009f88:	7803      	ldrb	r3, [r0, #0]
 8009f8a:	2b30      	cmp	r3, #48	@ 0x30
 8009f8c:	d10a      	bne.n	8009fa4 <__cvt+0xba>
 8009f8e:	2200      	movs	r2, #0
 8009f90:	2300      	movs	r3, #0
 8009f92:	4630      	mov	r0, r6
 8009f94:	4639      	mov	r1, r7
 8009f96:	f7f6 fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8009f9a:	b918      	cbnz	r0, 8009fa4 <__cvt+0xba>
 8009f9c:	f1c4 0401 	rsb	r4, r4, #1
 8009fa0:	f8ca 4000 	str.w	r4, [sl]
 8009fa4:	f8da 3000 	ldr.w	r3, [sl]
 8009fa8:	4499      	add	r9, r3
 8009faa:	e7d3      	b.n	8009f54 <__cvt+0x6a>
 8009fac:	1c59      	adds	r1, r3, #1
 8009fae:	9103      	str	r1, [sp, #12]
 8009fb0:	701a      	strb	r2, [r3, #0]
 8009fb2:	e7d9      	b.n	8009f68 <__cvt+0x7e>

08009fb4 <__exponent>:
 8009fb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb6:	2900      	cmp	r1, #0
 8009fb8:	bfba      	itte	lt
 8009fba:	4249      	neglt	r1, r1
 8009fbc:	232d      	movlt	r3, #45	@ 0x2d
 8009fbe:	232b      	movge	r3, #43	@ 0x2b
 8009fc0:	2909      	cmp	r1, #9
 8009fc2:	7002      	strb	r2, [r0, #0]
 8009fc4:	7043      	strb	r3, [r0, #1]
 8009fc6:	dd29      	ble.n	800a01c <__exponent+0x68>
 8009fc8:	f10d 0307 	add.w	r3, sp, #7
 8009fcc:	461d      	mov	r5, r3
 8009fce:	270a      	movs	r7, #10
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	fbb1 f6f7 	udiv	r6, r1, r7
 8009fd6:	fb07 1416 	mls	r4, r7, r6, r1
 8009fda:	3430      	adds	r4, #48	@ 0x30
 8009fdc:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009fe0:	460c      	mov	r4, r1
 8009fe2:	2c63      	cmp	r4, #99	@ 0x63
 8009fe4:	f103 33ff 	add.w	r3, r3, #4294967295
 8009fe8:	4631      	mov	r1, r6
 8009fea:	dcf1      	bgt.n	8009fd0 <__exponent+0x1c>
 8009fec:	3130      	adds	r1, #48	@ 0x30
 8009fee:	1e94      	subs	r4, r2, #2
 8009ff0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009ff4:	1c41      	adds	r1, r0, #1
 8009ff6:	4623      	mov	r3, r4
 8009ff8:	42ab      	cmp	r3, r5
 8009ffa:	d30a      	bcc.n	800a012 <__exponent+0x5e>
 8009ffc:	f10d 0309 	add.w	r3, sp, #9
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	42ac      	cmp	r4, r5
 800a004:	bf88      	it	hi
 800a006:	2300      	movhi	r3, #0
 800a008:	3302      	adds	r3, #2
 800a00a:	4403      	add	r3, r0
 800a00c:	1a18      	subs	r0, r3, r0
 800a00e:	b003      	add	sp, #12
 800a010:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a012:	f813 6b01 	ldrb.w	r6, [r3], #1
 800a016:	f801 6f01 	strb.w	r6, [r1, #1]!
 800a01a:	e7ed      	b.n	8009ff8 <__exponent+0x44>
 800a01c:	2330      	movs	r3, #48	@ 0x30
 800a01e:	3130      	adds	r1, #48	@ 0x30
 800a020:	7083      	strb	r3, [r0, #2]
 800a022:	70c1      	strb	r1, [r0, #3]
 800a024:	1d03      	adds	r3, r0, #4
 800a026:	e7f1      	b.n	800a00c <__exponent+0x58>

0800a028 <_printf_float>:
 800a028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a02c:	b08d      	sub	sp, #52	@ 0x34
 800a02e:	460c      	mov	r4, r1
 800a030:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800a034:	4616      	mov	r6, r2
 800a036:	461f      	mov	r7, r3
 800a038:	4605      	mov	r5, r0
 800a03a:	f000 ff2d 	bl	800ae98 <_localeconv_r>
 800a03e:	6803      	ldr	r3, [r0, #0]
 800a040:	9304      	str	r3, [sp, #16]
 800a042:	4618      	mov	r0, r3
 800a044:	f7f6 f91c 	bl	8000280 <strlen>
 800a048:	2300      	movs	r3, #0
 800a04a:	930a      	str	r3, [sp, #40]	@ 0x28
 800a04c:	f8d8 3000 	ldr.w	r3, [r8]
 800a050:	9005      	str	r0, [sp, #20]
 800a052:	3307      	adds	r3, #7
 800a054:	f023 0307 	bic.w	r3, r3, #7
 800a058:	f103 0208 	add.w	r2, r3, #8
 800a05c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800a060:	f8d4 b000 	ldr.w	fp, [r4]
 800a064:	f8c8 2000 	str.w	r2, [r8]
 800a068:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a06c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800a070:	9307      	str	r3, [sp, #28]
 800a072:	f8cd 8018 	str.w	r8, [sp, #24]
 800a076:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800a07a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a07e:	4b9c      	ldr	r3, [pc, #624]	@ (800a2f0 <_printf_float+0x2c8>)
 800a080:	f04f 32ff 	mov.w	r2, #4294967295
 800a084:	f7f6 fd5a 	bl	8000b3c <__aeabi_dcmpun>
 800a088:	bb70      	cbnz	r0, 800a0e8 <_printf_float+0xc0>
 800a08a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a08e:	4b98      	ldr	r3, [pc, #608]	@ (800a2f0 <_printf_float+0x2c8>)
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	f7f6 fd34 	bl	8000b00 <__aeabi_dcmple>
 800a098:	bb30      	cbnz	r0, 800a0e8 <_printf_float+0xc0>
 800a09a:	2200      	movs	r2, #0
 800a09c:	2300      	movs	r3, #0
 800a09e:	4640      	mov	r0, r8
 800a0a0:	4649      	mov	r1, r9
 800a0a2:	f7f6 fd23 	bl	8000aec <__aeabi_dcmplt>
 800a0a6:	b110      	cbz	r0, 800a0ae <_printf_float+0x86>
 800a0a8:	232d      	movs	r3, #45	@ 0x2d
 800a0aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ae:	4a91      	ldr	r2, [pc, #580]	@ (800a2f4 <_printf_float+0x2cc>)
 800a0b0:	4b91      	ldr	r3, [pc, #580]	@ (800a2f8 <_printf_float+0x2d0>)
 800a0b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800a0b6:	bf94      	ite	ls
 800a0b8:	4690      	movls	r8, r2
 800a0ba:	4698      	movhi	r8, r3
 800a0bc:	2303      	movs	r3, #3
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	f02b 0304 	bic.w	r3, fp, #4
 800a0c4:	6023      	str	r3, [r4, #0]
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	9700      	str	r7, [sp, #0]
 800a0cc:	4633      	mov	r3, r6
 800a0ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 800a0d0:	4621      	mov	r1, r4
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f000 f9d2 	bl	800a47c <_printf_common>
 800a0d8:	3001      	adds	r0, #1
 800a0da:	f040 808d 	bne.w	800a1f8 <_printf_float+0x1d0>
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	b00d      	add	sp, #52	@ 0x34
 800a0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0e8:	4642      	mov	r2, r8
 800a0ea:	464b      	mov	r3, r9
 800a0ec:	4640      	mov	r0, r8
 800a0ee:	4649      	mov	r1, r9
 800a0f0:	f7f6 fd24 	bl	8000b3c <__aeabi_dcmpun>
 800a0f4:	b140      	cbz	r0, 800a108 <_printf_float+0xe0>
 800a0f6:	464b      	mov	r3, r9
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	bfbc      	itt	lt
 800a0fc:	232d      	movlt	r3, #45	@ 0x2d
 800a0fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800a102:	4a7e      	ldr	r2, [pc, #504]	@ (800a2fc <_printf_float+0x2d4>)
 800a104:	4b7e      	ldr	r3, [pc, #504]	@ (800a300 <_printf_float+0x2d8>)
 800a106:	e7d4      	b.n	800a0b2 <_printf_float+0x8a>
 800a108:	6863      	ldr	r3, [r4, #4]
 800a10a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800a10e:	9206      	str	r2, [sp, #24]
 800a110:	1c5a      	adds	r2, r3, #1
 800a112:	d13b      	bne.n	800a18c <_printf_float+0x164>
 800a114:	2306      	movs	r3, #6
 800a116:	6063      	str	r3, [r4, #4]
 800a118:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800a11c:	2300      	movs	r3, #0
 800a11e:	6022      	str	r2, [r4, #0]
 800a120:	9303      	str	r3, [sp, #12]
 800a122:	ab0a      	add	r3, sp, #40	@ 0x28
 800a124:	e9cd a301 	strd	sl, r3, [sp, #4]
 800a128:	ab09      	add	r3, sp, #36	@ 0x24
 800a12a:	9300      	str	r3, [sp, #0]
 800a12c:	6861      	ldr	r1, [r4, #4]
 800a12e:	ec49 8b10 	vmov	d0, r8, r9
 800a132:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800a136:	4628      	mov	r0, r5
 800a138:	f7ff fed7 	bl	8009eea <__cvt>
 800a13c:	9b06      	ldr	r3, [sp, #24]
 800a13e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a140:	2b47      	cmp	r3, #71	@ 0x47
 800a142:	4680      	mov	r8, r0
 800a144:	d129      	bne.n	800a19a <_printf_float+0x172>
 800a146:	1cc8      	adds	r0, r1, #3
 800a148:	db02      	blt.n	800a150 <_printf_float+0x128>
 800a14a:	6863      	ldr	r3, [r4, #4]
 800a14c:	4299      	cmp	r1, r3
 800a14e:	dd41      	ble.n	800a1d4 <_printf_float+0x1ac>
 800a150:	f1aa 0a02 	sub.w	sl, sl, #2
 800a154:	fa5f fa8a 	uxtb.w	sl, sl
 800a158:	3901      	subs	r1, #1
 800a15a:	4652      	mov	r2, sl
 800a15c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800a160:	9109      	str	r1, [sp, #36]	@ 0x24
 800a162:	f7ff ff27 	bl	8009fb4 <__exponent>
 800a166:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a168:	1813      	adds	r3, r2, r0
 800a16a:	2a01      	cmp	r2, #1
 800a16c:	4681      	mov	r9, r0
 800a16e:	6123      	str	r3, [r4, #16]
 800a170:	dc02      	bgt.n	800a178 <_printf_float+0x150>
 800a172:	6822      	ldr	r2, [r4, #0]
 800a174:	07d2      	lsls	r2, r2, #31
 800a176:	d501      	bpl.n	800a17c <_printf_float+0x154>
 800a178:	3301      	adds	r3, #1
 800a17a:	6123      	str	r3, [r4, #16]
 800a17c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800a180:	2b00      	cmp	r3, #0
 800a182:	d0a2      	beq.n	800a0ca <_printf_float+0xa2>
 800a184:	232d      	movs	r3, #45	@ 0x2d
 800a186:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a18a:	e79e      	b.n	800a0ca <_printf_float+0xa2>
 800a18c:	9a06      	ldr	r2, [sp, #24]
 800a18e:	2a47      	cmp	r2, #71	@ 0x47
 800a190:	d1c2      	bne.n	800a118 <_printf_float+0xf0>
 800a192:	2b00      	cmp	r3, #0
 800a194:	d1c0      	bne.n	800a118 <_printf_float+0xf0>
 800a196:	2301      	movs	r3, #1
 800a198:	e7bd      	b.n	800a116 <_printf_float+0xee>
 800a19a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a19e:	d9db      	bls.n	800a158 <_printf_float+0x130>
 800a1a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800a1a4:	d118      	bne.n	800a1d8 <_printf_float+0x1b0>
 800a1a6:	2900      	cmp	r1, #0
 800a1a8:	6863      	ldr	r3, [r4, #4]
 800a1aa:	dd0b      	ble.n	800a1c4 <_printf_float+0x19c>
 800a1ac:	6121      	str	r1, [r4, #16]
 800a1ae:	b913      	cbnz	r3, 800a1b6 <_printf_float+0x18e>
 800a1b0:	6822      	ldr	r2, [r4, #0]
 800a1b2:	07d0      	lsls	r0, r2, #31
 800a1b4:	d502      	bpl.n	800a1bc <_printf_float+0x194>
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	440b      	add	r3, r1
 800a1ba:	6123      	str	r3, [r4, #16]
 800a1bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800a1be:	f04f 0900 	mov.w	r9, #0
 800a1c2:	e7db      	b.n	800a17c <_printf_float+0x154>
 800a1c4:	b913      	cbnz	r3, 800a1cc <_printf_float+0x1a4>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	07d2      	lsls	r2, r2, #31
 800a1ca:	d501      	bpl.n	800a1d0 <_printf_float+0x1a8>
 800a1cc:	3302      	adds	r3, #2
 800a1ce:	e7f4      	b.n	800a1ba <_printf_float+0x192>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e7f2      	b.n	800a1ba <_printf_float+0x192>
 800a1d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800a1d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1da:	4299      	cmp	r1, r3
 800a1dc:	db05      	blt.n	800a1ea <_printf_float+0x1c2>
 800a1de:	6823      	ldr	r3, [r4, #0]
 800a1e0:	6121      	str	r1, [r4, #16]
 800a1e2:	07d8      	lsls	r0, r3, #31
 800a1e4:	d5ea      	bpl.n	800a1bc <_printf_float+0x194>
 800a1e6:	1c4b      	adds	r3, r1, #1
 800a1e8:	e7e7      	b.n	800a1ba <_printf_float+0x192>
 800a1ea:	2900      	cmp	r1, #0
 800a1ec:	bfd4      	ite	le
 800a1ee:	f1c1 0202 	rsble	r2, r1, #2
 800a1f2:	2201      	movgt	r2, #1
 800a1f4:	4413      	add	r3, r2
 800a1f6:	e7e0      	b.n	800a1ba <_printf_float+0x192>
 800a1f8:	6823      	ldr	r3, [r4, #0]
 800a1fa:	055a      	lsls	r2, r3, #21
 800a1fc:	d407      	bmi.n	800a20e <_printf_float+0x1e6>
 800a1fe:	6923      	ldr	r3, [r4, #16]
 800a200:	4642      	mov	r2, r8
 800a202:	4631      	mov	r1, r6
 800a204:	4628      	mov	r0, r5
 800a206:	47b8      	blx	r7
 800a208:	3001      	adds	r0, #1
 800a20a:	d12b      	bne.n	800a264 <_printf_float+0x23c>
 800a20c:	e767      	b.n	800a0de <_printf_float+0xb6>
 800a20e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800a212:	f240 80dd 	bls.w	800a3d0 <_printf_float+0x3a8>
 800a216:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a21a:	2200      	movs	r2, #0
 800a21c:	2300      	movs	r3, #0
 800a21e:	f7f6 fc5b 	bl	8000ad8 <__aeabi_dcmpeq>
 800a222:	2800      	cmp	r0, #0
 800a224:	d033      	beq.n	800a28e <_printf_float+0x266>
 800a226:	4a37      	ldr	r2, [pc, #220]	@ (800a304 <_printf_float+0x2dc>)
 800a228:	2301      	movs	r3, #1
 800a22a:	4631      	mov	r1, r6
 800a22c:	4628      	mov	r0, r5
 800a22e:	47b8      	blx	r7
 800a230:	3001      	adds	r0, #1
 800a232:	f43f af54 	beq.w	800a0de <_printf_float+0xb6>
 800a236:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800a23a:	4543      	cmp	r3, r8
 800a23c:	db02      	blt.n	800a244 <_printf_float+0x21c>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	07d8      	lsls	r0, r3, #31
 800a242:	d50f      	bpl.n	800a264 <_printf_float+0x23c>
 800a244:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a248:	4631      	mov	r1, r6
 800a24a:	4628      	mov	r0, r5
 800a24c:	47b8      	blx	r7
 800a24e:	3001      	adds	r0, #1
 800a250:	f43f af45 	beq.w	800a0de <_printf_float+0xb6>
 800a254:	f04f 0900 	mov.w	r9, #0
 800a258:	f108 38ff 	add.w	r8, r8, #4294967295
 800a25c:	f104 0a1a 	add.w	sl, r4, #26
 800a260:	45c8      	cmp	r8, r9
 800a262:	dc09      	bgt.n	800a278 <_printf_float+0x250>
 800a264:	6823      	ldr	r3, [r4, #0]
 800a266:	079b      	lsls	r3, r3, #30
 800a268:	f100 8103 	bmi.w	800a472 <_printf_float+0x44a>
 800a26c:	68e0      	ldr	r0, [r4, #12]
 800a26e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a270:	4298      	cmp	r0, r3
 800a272:	bfb8      	it	lt
 800a274:	4618      	movlt	r0, r3
 800a276:	e734      	b.n	800a0e2 <_printf_float+0xba>
 800a278:	2301      	movs	r3, #1
 800a27a:	4652      	mov	r2, sl
 800a27c:	4631      	mov	r1, r6
 800a27e:	4628      	mov	r0, r5
 800a280:	47b8      	blx	r7
 800a282:	3001      	adds	r0, #1
 800a284:	f43f af2b 	beq.w	800a0de <_printf_float+0xb6>
 800a288:	f109 0901 	add.w	r9, r9, #1
 800a28c:	e7e8      	b.n	800a260 <_printf_float+0x238>
 800a28e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a290:	2b00      	cmp	r3, #0
 800a292:	dc39      	bgt.n	800a308 <_printf_float+0x2e0>
 800a294:	4a1b      	ldr	r2, [pc, #108]	@ (800a304 <_printf_float+0x2dc>)
 800a296:	2301      	movs	r3, #1
 800a298:	4631      	mov	r1, r6
 800a29a:	4628      	mov	r0, r5
 800a29c:	47b8      	blx	r7
 800a29e:	3001      	adds	r0, #1
 800a2a0:	f43f af1d 	beq.w	800a0de <_printf_float+0xb6>
 800a2a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800a2a8:	ea59 0303 	orrs.w	r3, r9, r3
 800a2ac:	d102      	bne.n	800a2b4 <_printf_float+0x28c>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	07d9      	lsls	r1, r3, #31
 800a2b2:	d5d7      	bpl.n	800a264 <_printf_float+0x23c>
 800a2b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2b8:	4631      	mov	r1, r6
 800a2ba:	4628      	mov	r0, r5
 800a2bc:	47b8      	blx	r7
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f43f af0d 	beq.w	800a0de <_printf_float+0xb6>
 800a2c4:	f04f 0a00 	mov.w	sl, #0
 800a2c8:	f104 0b1a 	add.w	fp, r4, #26
 800a2cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2ce:	425b      	negs	r3, r3
 800a2d0:	4553      	cmp	r3, sl
 800a2d2:	dc01      	bgt.n	800a2d8 <_printf_float+0x2b0>
 800a2d4:	464b      	mov	r3, r9
 800a2d6:	e793      	b.n	800a200 <_printf_float+0x1d8>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	465a      	mov	r2, fp
 800a2dc:	4631      	mov	r1, r6
 800a2de:	4628      	mov	r0, r5
 800a2e0:	47b8      	blx	r7
 800a2e2:	3001      	adds	r0, #1
 800a2e4:	f43f aefb 	beq.w	800a0de <_printf_float+0xb6>
 800a2e8:	f10a 0a01 	add.w	sl, sl, #1
 800a2ec:	e7ee      	b.n	800a2cc <_printf_float+0x2a4>
 800a2ee:	bf00      	nop
 800a2f0:	7fefffff 	.word	0x7fefffff
 800a2f4:	0800fdf0 	.word	0x0800fdf0
 800a2f8:	0800fdf4 	.word	0x0800fdf4
 800a2fc:	0800fdf8 	.word	0x0800fdf8
 800a300:	0800fdfc 	.word	0x0800fdfc
 800a304:	08010190 	.word	0x08010190
 800a308:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a30a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a30e:	4553      	cmp	r3, sl
 800a310:	bfa8      	it	ge
 800a312:	4653      	movge	r3, sl
 800a314:	2b00      	cmp	r3, #0
 800a316:	4699      	mov	r9, r3
 800a318:	dc36      	bgt.n	800a388 <_printf_float+0x360>
 800a31a:	f04f 0b00 	mov.w	fp, #0
 800a31e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a322:	f104 021a 	add.w	r2, r4, #26
 800a326:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800a328:	9306      	str	r3, [sp, #24]
 800a32a:	eba3 0309 	sub.w	r3, r3, r9
 800a32e:	455b      	cmp	r3, fp
 800a330:	dc31      	bgt.n	800a396 <_printf_float+0x36e>
 800a332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a334:	459a      	cmp	sl, r3
 800a336:	dc3a      	bgt.n	800a3ae <_printf_float+0x386>
 800a338:	6823      	ldr	r3, [r4, #0]
 800a33a:	07da      	lsls	r2, r3, #31
 800a33c:	d437      	bmi.n	800a3ae <_printf_float+0x386>
 800a33e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a340:	ebaa 0903 	sub.w	r9, sl, r3
 800a344:	9b06      	ldr	r3, [sp, #24]
 800a346:	ebaa 0303 	sub.w	r3, sl, r3
 800a34a:	4599      	cmp	r9, r3
 800a34c:	bfa8      	it	ge
 800a34e:	4699      	movge	r9, r3
 800a350:	f1b9 0f00 	cmp.w	r9, #0
 800a354:	dc33      	bgt.n	800a3be <_printf_float+0x396>
 800a356:	f04f 0800 	mov.w	r8, #0
 800a35a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a35e:	f104 0b1a 	add.w	fp, r4, #26
 800a362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a364:	ebaa 0303 	sub.w	r3, sl, r3
 800a368:	eba3 0309 	sub.w	r3, r3, r9
 800a36c:	4543      	cmp	r3, r8
 800a36e:	f77f af79 	ble.w	800a264 <_printf_float+0x23c>
 800a372:	2301      	movs	r3, #1
 800a374:	465a      	mov	r2, fp
 800a376:	4631      	mov	r1, r6
 800a378:	4628      	mov	r0, r5
 800a37a:	47b8      	blx	r7
 800a37c:	3001      	adds	r0, #1
 800a37e:	f43f aeae 	beq.w	800a0de <_printf_float+0xb6>
 800a382:	f108 0801 	add.w	r8, r8, #1
 800a386:	e7ec      	b.n	800a362 <_printf_float+0x33a>
 800a388:	4642      	mov	r2, r8
 800a38a:	4631      	mov	r1, r6
 800a38c:	4628      	mov	r0, r5
 800a38e:	47b8      	blx	r7
 800a390:	3001      	adds	r0, #1
 800a392:	d1c2      	bne.n	800a31a <_printf_float+0x2f2>
 800a394:	e6a3      	b.n	800a0de <_printf_float+0xb6>
 800a396:	2301      	movs	r3, #1
 800a398:	4631      	mov	r1, r6
 800a39a:	4628      	mov	r0, r5
 800a39c:	9206      	str	r2, [sp, #24]
 800a39e:	47b8      	blx	r7
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	f43f ae9c 	beq.w	800a0de <_printf_float+0xb6>
 800a3a6:	9a06      	ldr	r2, [sp, #24]
 800a3a8:	f10b 0b01 	add.w	fp, fp, #1
 800a3ac:	e7bb      	b.n	800a326 <_printf_float+0x2fe>
 800a3ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	47b8      	blx	r7
 800a3b8:	3001      	adds	r0, #1
 800a3ba:	d1c0      	bne.n	800a33e <_printf_float+0x316>
 800a3bc:	e68f      	b.n	800a0de <_printf_float+0xb6>
 800a3be:	9a06      	ldr	r2, [sp, #24]
 800a3c0:	464b      	mov	r3, r9
 800a3c2:	4442      	add	r2, r8
 800a3c4:	4631      	mov	r1, r6
 800a3c6:	4628      	mov	r0, r5
 800a3c8:	47b8      	blx	r7
 800a3ca:	3001      	adds	r0, #1
 800a3cc:	d1c3      	bne.n	800a356 <_printf_float+0x32e>
 800a3ce:	e686      	b.n	800a0de <_printf_float+0xb6>
 800a3d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800a3d4:	f1ba 0f01 	cmp.w	sl, #1
 800a3d8:	dc01      	bgt.n	800a3de <_printf_float+0x3b6>
 800a3da:	07db      	lsls	r3, r3, #31
 800a3dc:	d536      	bpl.n	800a44c <_printf_float+0x424>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	4642      	mov	r2, r8
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b8      	blx	r7
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	f43f ae78 	beq.w	800a0de <_printf_float+0xb6>
 800a3ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b8      	blx	r7
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f43f ae70 	beq.w	800a0de <_printf_float+0xb6>
 800a3fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800a402:	2200      	movs	r2, #0
 800a404:	2300      	movs	r3, #0
 800a406:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a40a:	f7f6 fb65 	bl	8000ad8 <__aeabi_dcmpeq>
 800a40e:	b9c0      	cbnz	r0, 800a442 <_printf_float+0x41a>
 800a410:	4653      	mov	r3, sl
 800a412:	f108 0201 	add.w	r2, r8, #1
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	d10c      	bne.n	800a43a <_printf_float+0x412>
 800a420:	e65d      	b.n	800a0de <_printf_float+0xb6>
 800a422:	2301      	movs	r3, #1
 800a424:	465a      	mov	r2, fp
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae56 	beq.w	800a0de <_printf_float+0xb6>
 800a432:	f108 0801 	add.w	r8, r8, #1
 800a436:	45d0      	cmp	r8, sl
 800a438:	dbf3      	blt.n	800a422 <_printf_float+0x3fa>
 800a43a:	464b      	mov	r3, r9
 800a43c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800a440:	e6df      	b.n	800a202 <_printf_float+0x1da>
 800a442:	f04f 0800 	mov.w	r8, #0
 800a446:	f104 0b1a 	add.w	fp, r4, #26
 800a44a:	e7f4      	b.n	800a436 <_printf_float+0x40e>
 800a44c:	2301      	movs	r3, #1
 800a44e:	4642      	mov	r2, r8
 800a450:	e7e1      	b.n	800a416 <_printf_float+0x3ee>
 800a452:	2301      	movs	r3, #1
 800a454:	464a      	mov	r2, r9
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	47b8      	blx	r7
 800a45c:	3001      	adds	r0, #1
 800a45e:	f43f ae3e 	beq.w	800a0de <_printf_float+0xb6>
 800a462:	f108 0801 	add.w	r8, r8, #1
 800a466:	68e3      	ldr	r3, [r4, #12]
 800a468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800a46a:	1a5b      	subs	r3, r3, r1
 800a46c:	4543      	cmp	r3, r8
 800a46e:	dcf0      	bgt.n	800a452 <_printf_float+0x42a>
 800a470:	e6fc      	b.n	800a26c <_printf_float+0x244>
 800a472:	f04f 0800 	mov.w	r8, #0
 800a476:	f104 0919 	add.w	r9, r4, #25
 800a47a:	e7f4      	b.n	800a466 <_printf_float+0x43e>

0800a47c <_printf_common>:
 800a47c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a480:	4616      	mov	r6, r2
 800a482:	4698      	mov	r8, r3
 800a484:	688a      	ldr	r2, [r1, #8]
 800a486:	690b      	ldr	r3, [r1, #16]
 800a488:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a48c:	4293      	cmp	r3, r2
 800a48e:	bfb8      	it	lt
 800a490:	4613      	movlt	r3, r2
 800a492:	6033      	str	r3, [r6, #0]
 800a494:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a498:	4607      	mov	r7, r0
 800a49a:	460c      	mov	r4, r1
 800a49c:	b10a      	cbz	r2, 800a4a2 <_printf_common+0x26>
 800a49e:	3301      	adds	r3, #1
 800a4a0:	6033      	str	r3, [r6, #0]
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	0699      	lsls	r1, r3, #26
 800a4a6:	bf42      	ittt	mi
 800a4a8:	6833      	ldrmi	r3, [r6, #0]
 800a4aa:	3302      	addmi	r3, #2
 800a4ac:	6033      	strmi	r3, [r6, #0]
 800a4ae:	6825      	ldr	r5, [r4, #0]
 800a4b0:	f015 0506 	ands.w	r5, r5, #6
 800a4b4:	d106      	bne.n	800a4c4 <_printf_common+0x48>
 800a4b6:	f104 0a19 	add.w	sl, r4, #25
 800a4ba:	68e3      	ldr	r3, [r4, #12]
 800a4bc:	6832      	ldr	r2, [r6, #0]
 800a4be:	1a9b      	subs	r3, r3, r2
 800a4c0:	42ab      	cmp	r3, r5
 800a4c2:	dc26      	bgt.n	800a512 <_printf_common+0x96>
 800a4c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a4c8:	6822      	ldr	r2, [r4, #0]
 800a4ca:	3b00      	subs	r3, #0
 800a4cc:	bf18      	it	ne
 800a4ce:	2301      	movne	r3, #1
 800a4d0:	0692      	lsls	r2, r2, #26
 800a4d2:	d42b      	bmi.n	800a52c <_printf_common+0xb0>
 800a4d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a4d8:	4641      	mov	r1, r8
 800a4da:	4638      	mov	r0, r7
 800a4dc:	47c8      	blx	r9
 800a4de:	3001      	adds	r0, #1
 800a4e0:	d01e      	beq.n	800a520 <_printf_common+0xa4>
 800a4e2:	6823      	ldr	r3, [r4, #0]
 800a4e4:	6922      	ldr	r2, [r4, #16]
 800a4e6:	f003 0306 	and.w	r3, r3, #6
 800a4ea:	2b04      	cmp	r3, #4
 800a4ec:	bf02      	ittt	eq
 800a4ee:	68e5      	ldreq	r5, [r4, #12]
 800a4f0:	6833      	ldreq	r3, [r6, #0]
 800a4f2:	1aed      	subeq	r5, r5, r3
 800a4f4:	68a3      	ldr	r3, [r4, #8]
 800a4f6:	bf0c      	ite	eq
 800a4f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4fc:	2500      	movne	r5, #0
 800a4fe:	4293      	cmp	r3, r2
 800a500:	bfc4      	itt	gt
 800a502:	1a9b      	subgt	r3, r3, r2
 800a504:	18ed      	addgt	r5, r5, r3
 800a506:	2600      	movs	r6, #0
 800a508:	341a      	adds	r4, #26
 800a50a:	42b5      	cmp	r5, r6
 800a50c:	d11a      	bne.n	800a544 <_printf_common+0xc8>
 800a50e:	2000      	movs	r0, #0
 800a510:	e008      	b.n	800a524 <_printf_common+0xa8>
 800a512:	2301      	movs	r3, #1
 800a514:	4652      	mov	r2, sl
 800a516:	4641      	mov	r1, r8
 800a518:	4638      	mov	r0, r7
 800a51a:	47c8      	blx	r9
 800a51c:	3001      	adds	r0, #1
 800a51e:	d103      	bne.n	800a528 <_printf_common+0xac>
 800a520:	f04f 30ff 	mov.w	r0, #4294967295
 800a524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a528:	3501      	adds	r5, #1
 800a52a:	e7c6      	b.n	800a4ba <_printf_common+0x3e>
 800a52c:	18e1      	adds	r1, r4, r3
 800a52e:	1c5a      	adds	r2, r3, #1
 800a530:	2030      	movs	r0, #48	@ 0x30
 800a532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a536:	4422      	add	r2, r4
 800a538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a53c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a540:	3302      	adds	r3, #2
 800a542:	e7c7      	b.n	800a4d4 <_printf_common+0x58>
 800a544:	2301      	movs	r3, #1
 800a546:	4622      	mov	r2, r4
 800a548:	4641      	mov	r1, r8
 800a54a:	4638      	mov	r0, r7
 800a54c:	47c8      	blx	r9
 800a54e:	3001      	adds	r0, #1
 800a550:	d0e6      	beq.n	800a520 <_printf_common+0xa4>
 800a552:	3601      	adds	r6, #1
 800a554:	e7d9      	b.n	800a50a <_printf_common+0x8e>
	...

0800a558 <_printf_i>:
 800a558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a55c:	7e0f      	ldrb	r7, [r1, #24]
 800a55e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a560:	2f78      	cmp	r7, #120	@ 0x78
 800a562:	4691      	mov	r9, r2
 800a564:	4680      	mov	r8, r0
 800a566:	460c      	mov	r4, r1
 800a568:	469a      	mov	sl, r3
 800a56a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a56e:	d807      	bhi.n	800a580 <_printf_i+0x28>
 800a570:	2f62      	cmp	r7, #98	@ 0x62
 800a572:	d80a      	bhi.n	800a58a <_printf_i+0x32>
 800a574:	2f00      	cmp	r7, #0
 800a576:	f000 80d2 	beq.w	800a71e <_printf_i+0x1c6>
 800a57a:	2f58      	cmp	r7, #88	@ 0x58
 800a57c:	f000 80b9 	beq.w	800a6f2 <_printf_i+0x19a>
 800a580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a588:	e03a      	b.n	800a600 <_printf_i+0xa8>
 800a58a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a58e:	2b15      	cmp	r3, #21
 800a590:	d8f6      	bhi.n	800a580 <_printf_i+0x28>
 800a592:	a101      	add	r1, pc, #4	@ (adr r1, 800a598 <_printf_i+0x40>)
 800a594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a598:	0800a5f1 	.word	0x0800a5f1
 800a59c:	0800a605 	.word	0x0800a605
 800a5a0:	0800a581 	.word	0x0800a581
 800a5a4:	0800a581 	.word	0x0800a581
 800a5a8:	0800a581 	.word	0x0800a581
 800a5ac:	0800a581 	.word	0x0800a581
 800a5b0:	0800a605 	.word	0x0800a605
 800a5b4:	0800a581 	.word	0x0800a581
 800a5b8:	0800a581 	.word	0x0800a581
 800a5bc:	0800a581 	.word	0x0800a581
 800a5c0:	0800a581 	.word	0x0800a581
 800a5c4:	0800a705 	.word	0x0800a705
 800a5c8:	0800a62f 	.word	0x0800a62f
 800a5cc:	0800a6bf 	.word	0x0800a6bf
 800a5d0:	0800a581 	.word	0x0800a581
 800a5d4:	0800a581 	.word	0x0800a581
 800a5d8:	0800a727 	.word	0x0800a727
 800a5dc:	0800a581 	.word	0x0800a581
 800a5e0:	0800a62f 	.word	0x0800a62f
 800a5e4:	0800a581 	.word	0x0800a581
 800a5e8:	0800a581 	.word	0x0800a581
 800a5ec:	0800a6c7 	.word	0x0800a6c7
 800a5f0:	6833      	ldr	r3, [r6, #0]
 800a5f2:	1d1a      	adds	r2, r3, #4
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	6032      	str	r2, [r6, #0]
 800a5f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a600:	2301      	movs	r3, #1
 800a602:	e09d      	b.n	800a740 <_printf_i+0x1e8>
 800a604:	6833      	ldr	r3, [r6, #0]
 800a606:	6820      	ldr	r0, [r4, #0]
 800a608:	1d19      	adds	r1, r3, #4
 800a60a:	6031      	str	r1, [r6, #0]
 800a60c:	0606      	lsls	r6, r0, #24
 800a60e:	d501      	bpl.n	800a614 <_printf_i+0xbc>
 800a610:	681d      	ldr	r5, [r3, #0]
 800a612:	e003      	b.n	800a61c <_printf_i+0xc4>
 800a614:	0645      	lsls	r5, r0, #25
 800a616:	d5fb      	bpl.n	800a610 <_printf_i+0xb8>
 800a618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a61c:	2d00      	cmp	r5, #0
 800a61e:	da03      	bge.n	800a628 <_printf_i+0xd0>
 800a620:	232d      	movs	r3, #45	@ 0x2d
 800a622:	426d      	negs	r5, r5
 800a624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a628:	4859      	ldr	r0, [pc, #356]	@ (800a790 <_printf_i+0x238>)
 800a62a:	230a      	movs	r3, #10
 800a62c:	e011      	b.n	800a652 <_printf_i+0xfa>
 800a62e:	6821      	ldr	r1, [r4, #0]
 800a630:	6833      	ldr	r3, [r6, #0]
 800a632:	0608      	lsls	r0, r1, #24
 800a634:	f853 5b04 	ldr.w	r5, [r3], #4
 800a638:	d402      	bmi.n	800a640 <_printf_i+0xe8>
 800a63a:	0649      	lsls	r1, r1, #25
 800a63c:	bf48      	it	mi
 800a63e:	b2ad      	uxthmi	r5, r5
 800a640:	2f6f      	cmp	r7, #111	@ 0x6f
 800a642:	4853      	ldr	r0, [pc, #332]	@ (800a790 <_printf_i+0x238>)
 800a644:	6033      	str	r3, [r6, #0]
 800a646:	bf14      	ite	ne
 800a648:	230a      	movne	r3, #10
 800a64a:	2308      	moveq	r3, #8
 800a64c:	2100      	movs	r1, #0
 800a64e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a652:	6866      	ldr	r6, [r4, #4]
 800a654:	60a6      	str	r6, [r4, #8]
 800a656:	2e00      	cmp	r6, #0
 800a658:	bfa2      	ittt	ge
 800a65a:	6821      	ldrge	r1, [r4, #0]
 800a65c:	f021 0104 	bicge.w	r1, r1, #4
 800a660:	6021      	strge	r1, [r4, #0]
 800a662:	b90d      	cbnz	r5, 800a668 <_printf_i+0x110>
 800a664:	2e00      	cmp	r6, #0
 800a666:	d04b      	beq.n	800a700 <_printf_i+0x1a8>
 800a668:	4616      	mov	r6, r2
 800a66a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a66e:	fb03 5711 	mls	r7, r3, r1, r5
 800a672:	5dc7      	ldrb	r7, [r0, r7]
 800a674:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a678:	462f      	mov	r7, r5
 800a67a:	42bb      	cmp	r3, r7
 800a67c:	460d      	mov	r5, r1
 800a67e:	d9f4      	bls.n	800a66a <_printf_i+0x112>
 800a680:	2b08      	cmp	r3, #8
 800a682:	d10b      	bne.n	800a69c <_printf_i+0x144>
 800a684:	6823      	ldr	r3, [r4, #0]
 800a686:	07df      	lsls	r7, r3, #31
 800a688:	d508      	bpl.n	800a69c <_printf_i+0x144>
 800a68a:	6923      	ldr	r3, [r4, #16]
 800a68c:	6861      	ldr	r1, [r4, #4]
 800a68e:	4299      	cmp	r1, r3
 800a690:	bfde      	ittt	le
 800a692:	2330      	movle	r3, #48	@ 0x30
 800a694:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a698:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a69c:	1b92      	subs	r2, r2, r6
 800a69e:	6122      	str	r2, [r4, #16]
 800a6a0:	f8cd a000 	str.w	sl, [sp]
 800a6a4:	464b      	mov	r3, r9
 800a6a6:	aa03      	add	r2, sp, #12
 800a6a8:	4621      	mov	r1, r4
 800a6aa:	4640      	mov	r0, r8
 800a6ac:	f7ff fee6 	bl	800a47c <_printf_common>
 800a6b0:	3001      	adds	r0, #1
 800a6b2:	d14a      	bne.n	800a74a <_printf_i+0x1f2>
 800a6b4:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b8:	b004      	add	sp, #16
 800a6ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	f043 0320 	orr.w	r3, r3, #32
 800a6c4:	6023      	str	r3, [r4, #0]
 800a6c6:	4833      	ldr	r0, [pc, #204]	@ (800a794 <_printf_i+0x23c>)
 800a6c8:	2778      	movs	r7, #120	@ 0x78
 800a6ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a6ce:	6823      	ldr	r3, [r4, #0]
 800a6d0:	6831      	ldr	r1, [r6, #0]
 800a6d2:	061f      	lsls	r7, r3, #24
 800a6d4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a6d8:	d402      	bmi.n	800a6e0 <_printf_i+0x188>
 800a6da:	065f      	lsls	r7, r3, #25
 800a6dc:	bf48      	it	mi
 800a6de:	b2ad      	uxthmi	r5, r5
 800a6e0:	6031      	str	r1, [r6, #0]
 800a6e2:	07d9      	lsls	r1, r3, #31
 800a6e4:	bf44      	itt	mi
 800a6e6:	f043 0320 	orrmi.w	r3, r3, #32
 800a6ea:	6023      	strmi	r3, [r4, #0]
 800a6ec:	b11d      	cbz	r5, 800a6f6 <_printf_i+0x19e>
 800a6ee:	2310      	movs	r3, #16
 800a6f0:	e7ac      	b.n	800a64c <_printf_i+0xf4>
 800a6f2:	4827      	ldr	r0, [pc, #156]	@ (800a790 <_printf_i+0x238>)
 800a6f4:	e7e9      	b.n	800a6ca <_printf_i+0x172>
 800a6f6:	6823      	ldr	r3, [r4, #0]
 800a6f8:	f023 0320 	bic.w	r3, r3, #32
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	e7f6      	b.n	800a6ee <_printf_i+0x196>
 800a700:	4616      	mov	r6, r2
 800a702:	e7bd      	b.n	800a680 <_printf_i+0x128>
 800a704:	6833      	ldr	r3, [r6, #0]
 800a706:	6825      	ldr	r5, [r4, #0]
 800a708:	6961      	ldr	r1, [r4, #20]
 800a70a:	1d18      	adds	r0, r3, #4
 800a70c:	6030      	str	r0, [r6, #0]
 800a70e:	062e      	lsls	r6, r5, #24
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	d501      	bpl.n	800a718 <_printf_i+0x1c0>
 800a714:	6019      	str	r1, [r3, #0]
 800a716:	e002      	b.n	800a71e <_printf_i+0x1c6>
 800a718:	0668      	lsls	r0, r5, #25
 800a71a:	d5fb      	bpl.n	800a714 <_printf_i+0x1bc>
 800a71c:	8019      	strh	r1, [r3, #0]
 800a71e:	2300      	movs	r3, #0
 800a720:	6123      	str	r3, [r4, #16]
 800a722:	4616      	mov	r6, r2
 800a724:	e7bc      	b.n	800a6a0 <_printf_i+0x148>
 800a726:	6833      	ldr	r3, [r6, #0]
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	6032      	str	r2, [r6, #0]
 800a72c:	681e      	ldr	r6, [r3, #0]
 800a72e:	6862      	ldr	r2, [r4, #4]
 800a730:	2100      	movs	r1, #0
 800a732:	4630      	mov	r0, r6
 800a734:	f7f5 fd54 	bl	80001e0 <memchr>
 800a738:	b108      	cbz	r0, 800a73e <_printf_i+0x1e6>
 800a73a:	1b80      	subs	r0, r0, r6
 800a73c:	6060      	str	r0, [r4, #4]
 800a73e:	6863      	ldr	r3, [r4, #4]
 800a740:	6123      	str	r3, [r4, #16]
 800a742:	2300      	movs	r3, #0
 800a744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a748:	e7aa      	b.n	800a6a0 <_printf_i+0x148>
 800a74a:	6923      	ldr	r3, [r4, #16]
 800a74c:	4632      	mov	r2, r6
 800a74e:	4649      	mov	r1, r9
 800a750:	4640      	mov	r0, r8
 800a752:	47d0      	blx	sl
 800a754:	3001      	adds	r0, #1
 800a756:	d0ad      	beq.n	800a6b4 <_printf_i+0x15c>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	079b      	lsls	r3, r3, #30
 800a75c:	d413      	bmi.n	800a786 <_printf_i+0x22e>
 800a75e:	68e0      	ldr	r0, [r4, #12]
 800a760:	9b03      	ldr	r3, [sp, #12]
 800a762:	4298      	cmp	r0, r3
 800a764:	bfb8      	it	lt
 800a766:	4618      	movlt	r0, r3
 800a768:	e7a6      	b.n	800a6b8 <_printf_i+0x160>
 800a76a:	2301      	movs	r3, #1
 800a76c:	4632      	mov	r2, r6
 800a76e:	4649      	mov	r1, r9
 800a770:	4640      	mov	r0, r8
 800a772:	47d0      	blx	sl
 800a774:	3001      	adds	r0, #1
 800a776:	d09d      	beq.n	800a6b4 <_printf_i+0x15c>
 800a778:	3501      	adds	r5, #1
 800a77a:	68e3      	ldr	r3, [r4, #12]
 800a77c:	9903      	ldr	r1, [sp, #12]
 800a77e:	1a5b      	subs	r3, r3, r1
 800a780:	42ab      	cmp	r3, r5
 800a782:	dcf2      	bgt.n	800a76a <_printf_i+0x212>
 800a784:	e7eb      	b.n	800a75e <_printf_i+0x206>
 800a786:	2500      	movs	r5, #0
 800a788:	f104 0619 	add.w	r6, r4, #25
 800a78c:	e7f5      	b.n	800a77a <_printf_i+0x222>
 800a78e:	bf00      	nop
 800a790:	0800fe00 	.word	0x0800fe00
 800a794:	0800fe11 	.word	0x0800fe11

0800a798 <_scanf_float>:
 800a798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a79c:	b087      	sub	sp, #28
 800a79e:	4617      	mov	r7, r2
 800a7a0:	9303      	str	r3, [sp, #12]
 800a7a2:	688b      	ldr	r3, [r1, #8]
 800a7a4:	1e5a      	subs	r2, r3, #1
 800a7a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a7aa:	bf81      	itttt	hi
 800a7ac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a7b0:	eb03 0b05 	addhi.w	fp, r3, r5
 800a7b4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a7b8:	608b      	strhi	r3, [r1, #8]
 800a7ba:	680b      	ldr	r3, [r1, #0]
 800a7bc:	460a      	mov	r2, r1
 800a7be:	f04f 0500 	mov.w	r5, #0
 800a7c2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800a7c6:	f842 3b1c 	str.w	r3, [r2], #28
 800a7ca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a7ce:	4680      	mov	r8, r0
 800a7d0:	460c      	mov	r4, r1
 800a7d2:	bf98      	it	ls
 800a7d4:	f04f 0b00 	movls.w	fp, #0
 800a7d8:	9201      	str	r2, [sp, #4]
 800a7da:	4616      	mov	r6, r2
 800a7dc:	46aa      	mov	sl, r5
 800a7de:	46a9      	mov	r9, r5
 800a7e0:	9502      	str	r5, [sp, #8]
 800a7e2:	68a2      	ldr	r2, [r4, #8]
 800a7e4:	b152      	cbz	r2, 800a7fc <_scanf_float+0x64>
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	781b      	ldrb	r3, [r3, #0]
 800a7ea:	2b4e      	cmp	r3, #78	@ 0x4e
 800a7ec:	d864      	bhi.n	800a8b8 <_scanf_float+0x120>
 800a7ee:	2b40      	cmp	r3, #64	@ 0x40
 800a7f0:	d83c      	bhi.n	800a86c <_scanf_float+0xd4>
 800a7f2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800a7f6:	b2c8      	uxtb	r0, r1
 800a7f8:	280e      	cmp	r0, #14
 800a7fa:	d93a      	bls.n	800a872 <_scanf_float+0xda>
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	d003      	beq.n	800a80a <_scanf_float+0x72>
 800a802:	6823      	ldr	r3, [r4, #0]
 800a804:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a808:	6023      	str	r3, [r4, #0]
 800a80a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a80e:	f1ba 0f01 	cmp.w	sl, #1
 800a812:	f200 8117 	bhi.w	800aa44 <_scanf_float+0x2ac>
 800a816:	9b01      	ldr	r3, [sp, #4]
 800a818:	429e      	cmp	r6, r3
 800a81a:	f200 8108 	bhi.w	800aa2e <_scanf_float+0x296>
 800a81e:	2001      	movs	r0, #1
 800a820:	b007      	add	sp, #28
 800a822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a826:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800a82a:	2a0d      	cmp	r2, #13
 800a82c:	d8e6      	bhi.n	800a7fc <_scanf_float+0x64>
 800a82e:	a101      	add	r1, pc, #4	@ (adr r1, 800a834 <_scanf_float+0x9c>)
 800a830:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a834:	0800a97b 	.word	0x0800a97b
 800a838:	0800a7fd 	.word	0x0800a7fd
 800a83c:	0800a7fd 	.word	0x0800a7fd
 800a840:	0800a7fd 	.word	0x0800a7fd
 800a844:	0800a9db 	.word	0x0800a9db
 800a848:	0800a9b3 	.word	0x0800a9b3
 800a84c:	0800a7fd 	.word	0x0800a7fd
 800a850:	0800a7fd 	.word	0x0800a7fd
 800a854:	0800a989 	.word	0x0800a989
 800a858:	0800a7fd 	.word	0x0800a7fd
 800a85c:	0800a7fd 	.word	0x0800a7fd
 800a860:	0800a7fd 	.word	0x0800a7fd
 800a864:	0800a7fd 	.word	0x0800a7fd
 800a868:	0800a941 	.word	0x0800a941
 800a86c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800a870:	e7db      	b.n	800a82a <_scanf_float+0x92>
 800a872:	290e      	cmp	r1, #14
 800a874:	d8c2      	bhi.n	800a7fc <_scanf_float+0x64>
 800a876:	a001      	add	r0, pc, #4	@ (adr r0, 800a87c <_scanf_float+0xe4>)
 800a878:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a87c:	0800a931 	.word	0x0800a931
 800a880:	0800a7fd 	.word	0x0800a7fd
 800a884:	0800a931 	.word	0x0800a931
 800a888:	0800a9c7 	.word	0x0800a9c7
 800a88c:	0800a7fd 	.word	0x0800a7fd
 800a890:	0800a8d9 	.word	0x0800a8d9
 800a894:	0800a917 	.word	0x0800a917
 800a898:	0800a917 	.word	0x0800a917
 800a89c:	0800a917 	.word	0x0800a917
 800a8a0:	0800a917 	.word	0x0800a917
 800a8a4:	0800a917 	.word	0x0800a917
 800a8a8:	0800a917 	.word	0x0800a917
 800a8ac:	0800a917 	.word	0x0800a917
 800a8b0:	0800a917 	.word	0x0800a917
 800a8b4:	0800a917 	.word	0x0800a917
 800a8b8:	2b6e      	cmp	r3, #110	@ 0x6e
 800a8ba:	d809      	bhi.n	800a8d0 <_scanf_float+0x138>
 800a8bc:	2b60      	cmp	r3, #96	@ 0x60
 800a8be:	d8b2      	bhi.n	800a826 <_scanf_float+0x8e>
 800a8c0:	2b54      	cmp	r3, #84	@ 0x54
 800a8c2:	d07b      	beq.n	800a9bc <_scanf_float+0x224>
 800a8c4:	2b59      	cmp	r3, #89	@ 0x59
 800a8c6:	d199      	bne.n	800a7fc <_scanf_float+0x64>
 800a8c8:	2d07      	cmp	r5, #7
 800a8ca:	d197      	bne.n	800a7fc <_scanf_float+0x64>
 800a8cc:	2508      	movs	r5, #8
 800a8ce:	e02c      	b.n	800a92a <_scanf_float+0x192>
 800a8d0:	2b74      	cmp	r3, #116	@ 0x74
 800a8d2:	d073      	beq.n	800a9bc <_scanf_float+0x224>
 800a8d4:	2b79      	cmp	r3, #121	@ 0x79
 800a8d6:	e7f6      	b.n	800a8c6 <_scanf_float+0x12e>
 800a8d8:	6821      	ldr	r1, [r4, #0]
 800a8da:	05c8      	lsls	r0, r1, #23
 800a8dc:	d51b      	bpl.n	800a916 <_scanf_float+0x17e>
 800a8de:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800a8e2:	6021      	str	r1, [r4, #0]
 800a8e4:	f109 0901 	add.w	r9, r9, #1
 800a8e8:	f1bb 0f00 	cmp.w	fp, #0
 800a8ec:	d003      	beq.n	800a8f6 <_scanf_float+0x15e>
 800a8ee:	3201      	adds	r2, #1
 800a8f0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8f4:	60a2      	str	r2, [r4, #8]
 800a8f6:	68a3      	ldr	r3, [r4, #8]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	60a3      	str	r3, [r4, #8]
 800a8fc:	6923      	ldr	r3, [r4, #16]
 800a8fe:	3301      	adds	r3, #1
 800a900:	6123      	str	r3, [r4, #16]
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	3b01      	subs	r3, #1
 800a906:	2b00      	cmp	r3, #0
 800a908:	607b      	str	r3, [r7, #4]
 800a90a:	f340 8087 	ble.w	800aa1c <_scanf_float+0x284>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	3301      	adds	r3, #1
 800a912:	603b      	str	r3, [r7, #0]
 800a914:	e765      	b.n	800a7e2 <_scanf_float+0x4a>
 800a916:	eb1a 0105 	adds.w	r1, sl, r5
 800a91a:	f47f af6f 	bne.w	800a7fc <_scanf_float+0x64>
 800a91e:	6822      	ldr	r2, [r4, #0]
 800a920:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800a924:	6022      	str	r2, [r4, #0]
 800a926:	460d      	mov	r5, r1
 800a928:	468a      	mov	sl, r1
 800a92a:	f806 3b01 	strb.w	r3, [r6], #1
 800a92e:	e7e2      	b.n	800a8f6 <_scanf_float+0x15e>
 800a930:	6822      	ldr	r2, [r4, #0]
 800a932:	0610      	lsls	r0, r2, #24
 800a934:	f57f af62 	bpl.w	800a7fc <_scanf_float+0x64>
 800a938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a93c:	6022      	str	r2, [r4, #0]
 800a93e:	e7f4      	b.n	800a92a <_scanf_float+0x192>
 800a940:	f1ba 0f00 	cmp.w	sl, #0
 800a944:	d10e      	bne.n	800a964 <_scanf_float+0x1cc>
 800a946:	f1b9 0f00 	cmp.w	r9, #0
 800a94a:	d10e      	bne.n	800a96a <_scanf_float+0x1d2>
 800a94c:	6822      	ldr	r2, [r4, #0]
 800a94e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a952:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a956:	d108      	bne.n	800a96a <_scanf_float+0x1d2>
 800a958:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a95c:	6022      	str	r2, [r4, #0]
 800a95e:	f04f 0a01 	mov.w	sl, #1
 800a962:	e7e2      	b.n	800a92a <_scanf_float+0x192>
 800a964:	f1ba 0f02 	cmp.w	sl, #2
 800a968:	d055      	beq.n	800aa16 <_scanf_float+0x27e>
 800a96a:	2d01      	cmp	r5, #1
 800a96c:	d002      	beq.n	800a974 <_scanf_float+0x1dc>
 800a96e:	2d04      	cmp	r5, #4
 800a970:	f47f af44 	bne.w	800a7fc <_scanf_float+0x64>
 800a974:	3501      	adds	r5, #1
 800a976:	b2ed      	uxtb	r5, r5
 800a978:	e7d7      	b.n	800a92a <_scanf_float+0x192>
 800a97a:	f1ba 0f01 	cmp.w	sl, #1
 800a97e:	f47f af3d 	bne.w	800a7fc <_scanf_float+0x64>
 800a982:	f04f 0a02 	mov.w	sl, #2
 800a986:	e7d0      	b.n	800a92a <_scanf_float+0x192>
 800a988:	b97d      	cbnz	r5, 800a9aa <_scanf_float+0x212>
 800a98a:	f1b9 0f00 	cmp.w	r9, #0
 800a98e:	f47f af38 	bne.w	800a802 <_scanf_float+0x6a>
 800a992:	6822      	ldr	r2, [r4, #0]
 800a994:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800a998:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800a99c:	f040 8108 	bne.w	800abb0 <_scanf_float+0x418>
 800a9a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9a4:	6022      	str	r2, [r4, #0]
 800a9a6:	2501      	movs	r5, #1
 800a9a8:	e7bf      	b.n	800a92a <_scanf_float+0x192>
 800a9aa:	2d03      	cmp	r5, #3
 800a9ac:	d0e2      	beq.n	800a974 <_scanf_float+0x1dc>
 800a9ae:	2d05      	cmp	r5, #5
 800a9b0:	e7de      	b.n	800a970 <_scanf_float+0x1d8>
 800a9b2:	2d02      	cmp	r5, #2
 800a9b4:	f47f af22 	bne.w	800a7fc <_scanf_float+0x64>
 800a9b8:	2503      	movs	r5, #3
 800a9ba:	e7b6      	b.n	800a92a <_scanf_float+0x192>
 800a9bc:	2d06      	cmp	r5, #6
 800a9be:	f47f af1d 	bne.w	800a7fc <_scanf_float+0x64>
 800a9c2:	2507      	movs	r5, #7
 800a9c4:	e7b1      	b.n	800a92a <_scanf_float+0x192>
 800a9c6:	6822      	ldr	r2, [r4, #0]
 800a9c8:	0591      	lsls	r1, r2, #22
 800a9ca:	f57f af17 	bpl.w	800a7fc <_scanf_float+0x64>
 800a9ce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800a9d2:	6022      	str	r2, [r4, #0]
 800a9d4:	f8cd 9008 	str.w	r9, [sp, #8]
 800a9d8:	e7a7      	b.n	800a92a <_scanf_float+0x192>
 800a9da:	6822      	ldr	r2, [r4, #0]
 800a9dc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800a9e0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a9e4:	d006      	beq.n	800a9f4 <_scanf_float+0x25c>
 800a9e6:	0550      	lsls	r0, r2, #21
 800a9e8:	f57f af08 	bpl.w	800a7fc <_scanf_float+0x64>
 800a9ec:	f1b9 0f00 	cmp.w	r9, #0
 800a9f0:	f000 80de 	beq.w	800abb0 <_scanf_float+0x418>
 800a9f4:	0591      	lsls	r1, r2, #22
 800a9f6:	bf58      	it	pl
 800a9f8:	9902      	ldrpl	r1, [sp, #8]
 800a9fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800a9fe:	bf58      	it	pl
 800aa00:	eba9 0101 	subpl.w	r1, r9, r1
 800aa04:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800aa08:	bf58      	it	pl
 800aa0a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa0e:	6022      	str	r2, [r4, #0]
 800aa10:	f04f 0900 	mov.w	r9, #0
 800aa14:	e789      	b.n	800a92a <_scanf_float+0x192>
 800aa16:	f04f 0a03 	mov.w	sl, #3
 800aa1a:	e786      	b.n	800a92a <_scanf_float+0x192>
 800aa1c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800aa20:	4639      	mov	r1, r7
 800aa22:	4640      	mov	r0, r8
 800aa24:	4798      	blx	r3
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f43f aedb 	beq.w	800a7e2 <_scanf_float+0x4a>
 800aa2c:	e6e6      	b.n	800a7fc <_scanf_float+0x64>
 800aa2e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa36:	463a      	mov	r2, r7
 800aa38:	4640      	mov	r0, r8
 800aa3a:	4798      	blx	r3
 800aa3c:	6923      	ldr	r3, [r4, #16]
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	6123      	str	r3, [r4, #16]
 800aa42:	e6e8      	b.n	800a816 <_scanf_float+0x7e>
 800aa44:	1e6b      	subs	r3, r5, #1
 800aa46:	2b06      	cmp	r3, #6
 800aa48:	d824      	bhi.n	800aa94 <_scanf_float+0x2fc>
 800aa4a:	2d02      	cmp	r5, #2
 800aa4c:	d836      	bhi.n	800aabc <_scanf_float+0x324>
 800aa4e:	9b01      	ldr	r3, [sp, #4]
 800aa50:	429e      	cmp	r6, r3
 800aa52:	f67f aee4 	bls.w	800a81e <_scanf_float+0x86>
 800aa56:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa5e:	463a      	mov	r2, r7
 800aa60:	4640      	mov	r0, r8
 800aa62:	4798      	blx	r3
 800aa64:	6923      	ldr	r3, [r4, #16]
 800aa66:	3b01      	subs	r3, #1
 800aa68:	6123      	str	r3, [r4, #16]
 800aa6a:	e7f0      	b.n	800aa4e <_scanf_float+0x2b6>
 800aa6c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aa70:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800aa74:	463a      	mov	r2, r7
 800aa76:	4640      	mov	r0, r8
 800aa78:	4798      	blx	r3
 800aa7a:	6923      	ldr	r3, [r4, #16]
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	6123      	str	r3, [r4, #16]
 800aa80:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aa84:	fa5f fa8a 	uxtb.w	sl, sl
 800aa88:	f1ba 0f02 	cmp.w	sl, #2
 800aa8c:	d1ee      	bne.n	800aa6c <_scanf_float+0x2d4>
 800aa8e:	3d03      	subs	r5, #3
 800aa90:	b2ed      	uxtb	r5, r5
 800aa92:	1b76      	subs	r6, r6, r5
 800aa94:	6823      	ldr	r3, [r4, #0]
 800aa96:	05da      	lsls	r2, r3, #23
 800aa98:	d530      	bpl.n	800aafc <_scanf_float+0x364>
 800aa9a:	055b      	lsls	r3, r3, #21
 800aa9c:	d511      	bpl.n	800aac2 <_scanf_float+0x32a>
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	429e      	cmp	r6, r3
 800aaa2:	f67f aebc 	bls.w	800a81e <_scanf_float+0x86>
 800aaa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaae:	463a      	mov	r2, r7
 800aab0:	4640      	mov	r0, r8
 800aab2:	4798      	blx	r3
 800aab4:	6923      	ldr	r3, [r4, #16]
 800aab6:	3b01      	subs	r3, #1
 800aab8:	6123      	str	r3, [r4, #16]
 800aaba:	e7f0      	b.n	800aa9e <_scanf_float+0x306>
 800aabc:	46aa      	mov	sl, r5
 800aabe:	46b3      	mov	fp, r6
 800aac0:	e7de      	b.n	800aa80 <_scanf_float+0x2e8>
 800aac2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aac6:	6923      	ldr	r3, [r4, #16]
 800aac8:	2965      	cmp	r1, #101	@ 0x65
 800aaca:	f103 33ff 	add.w	r3, r3, #4294967295
 800aace:	f106 35ff 	add.w	r5, r6, #4294967295
 800aad2:	6123      	str	r3, [r4, #16]
 800aad4:	d00c      	beq.n	800aaf0 <_scanf_float+0x358>
 800aad6:	2945      	cmp	r1, #69	@ 0x45
 800aad8:	d00a      	beq.n	800aaf0 <_scanf_float+0x358>
 800aada:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aade:	463a      	mov	r2, r7
 800aae0:	4640      	mov	r0, r8
 800aae2:	4798      	blx	r3
 800aae4:	6923      	ldr	r3, [r4, #16]
 800aae6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800aaea:	3b01      	subs	r3, #1
 800aaec:	1eb5      	subs	r5, r6, #2
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800aaf4:	463a      	mov	r2, r7
 800aaf6:	4640      	mov	r0, r8
 800aaf8:	4798      	blx	r3
 800aafa:	462e      	mov	r6, r5
 800aafc:	6822      	ldr	r2, [r4, #0]
 800aafe:	f012 0210 	ands.w	r2, r2, #16
 800ab02:	d001      	beq.n	800ab08 <_scanf_float+0x370>
 800ab04:	2000      	movs	r0, #0
 800ab06:	e68b      	b.n	800a820 <_scanf_float+0x88>
 800ab08:	7032      	strb	r2, [r6, #0]
 800ab0a:	6823      	ldr	r3, [r4, #0]
 800ab0c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800ab10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab14:	d11c      	bne.n	800ab50 <_scanf_float+0x3b8>
 800ab16:	9b02      	ldr	r3, [sp, #8]
 800ab18:	454b      	cmp	r3, r9
 800ab1a:	eba3 0209 	sub.w	r2, r3, r9
 800ab1e:	d123      	bne.n	800ab68 <_scanf_float+0x3d0>
 800ab20:	9901      	ldr	r1, [sp, #4]
 800ab22:	2200      	movs	r2, #0
 800ab24:	4640      	mov	r0, r8
 800ab26:	f002 fc37 	bl	800d398 <_strtod_r>
 800ab2a:	9b03      	ldr	r3, [sp, #12]
 800ab2c:	6821      	ldr	r1, [r4, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f011 0f02 	tst.w	r1, #2
 800ab34:	ec57 6b10 	vmov	r6, r7, d0
 800ab38:	f103 0204 	add.w	r2, r3, #4
 800ab3c:	d01f      	beq.n	800ab7e <_scanf_float+0x3e6>
 800ab3e:	9903      	ldr	r1, [sp, #12]
 800ab40:	600a      	str	r2, [r1, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	e9c3 6700 	strd	r6, r7, [r3]
 800ab48:	68e3      	ldr	r3, [r4, #12]
 800ab4a:	3301      	adds	r3, #1
 800ab4c:	60e3      	str	r3, [r4, #12]
 800ab4e:	e7d9      	b.n	800ab04 <_scanf_float+0x36c>
 800ab50:	9b04      	ldr	r3, [sp, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d0e4      	beq.n	800ab20 <_scanf_float+0x388>
 800ab56:	9905      	ldr	r1, [sp, #20]
 800ab58:	230a      	movs	r3, #10
 800ab5a:	3101      	adds	r1, #1
 800ab5c:	4640      	mov	r0, r8
 800ab5e:	f002 fc9b 	bl	800d498 <_strtol_r>
 800ab62:	9b04      	ldr	r3, [sp, #16]
 800ab64:	9e05      	ldr	r6, [sp, #20]
 800ab66:	1ac2      	subs	r2, r0, r3
 800ab68:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800ab6c:	429e      	cmp	r6, r3
 800ab6e:	bf28      	it	cs
 800ab70:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800ab74:	4910      	ldr	r1, [pc, #64]	@ (800abb8 <_scanf_float+0x420>)
 800ab76:	4630      	mov	r0, r6
 800ab78:	f000 f8e4 	bl	800ad44 <siprintf>
 800ab7c:	e7d0      	b.n	800ab20 <_scanf_float+0x388>
 800ab7e:	f011 0f04 	tst.w	r1, #4
 800ab82:	9903      	ldr	r1, [sp, #12]
 800ab84:	600a      	str	r2, [r1, #0]
 800ab86:	d1dc      	bne.n	800ab42 <_scanf_float+0x3aa>
 800ab88:	681d      	ldr	r5, [r3, #0]
 800ab8a:	4632      	mov	r2, r6
 800ab8c:	463b      	mov	r3, r7
 800ab8e:	4630      	mov	r0, r6
 800ab90:	4639      	mov	r1, r7
 800ab92:	f7f5 ffd3 	bl	8000b3c <__aeabi_dcmpun>
 800ab96:	b128      	cbz	r0, 800aba4 <_scanf_float+0x40c>
 800ab98:	4808      	ldr	r0, [pc, #32]	@ (800abbc <_scanf_float+0x424>)
 800ab9a:	f000 f9f5 	bl	800af88 <nanf>
 800ab9e:	ed85 0a00 	vstr	s0, [r5]
 800aba2:	e7d1      	b.n	800ab48 <_scanf_float+0x3b0>
 800aba4:	4630      	mov	r0, r6
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f6 f826 	bl	8000bf8 <__aeabi_d2f>
 800abac:	6028      	str	r0, [r5, #0]
 800abae:	e7cb      	b.n	800ab48 <_scanf_float+0x3b0>
 800abb0:	f04f 0900 	mov.w	r9, #0
 800abb4:	e629      	b.n	800a80a <_scanf_float+0x72>
 800abb6:	bf00      	nop
 800abb8:	0800fe22 	.word	0x0800fe22
 800abbc:	080101d8 	.word	0x080101d8

0800abc0 <std>:
 800abc0:	2300      	movs	r3, #0
 800abc2:	b510      	push	{r4, lr}
 800abc4:	4604      	mov	r4, r0
 800abc6:	e9c0 3300 	strd	r3, r3, [r0]
 800abca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abce:	6083      	str	r3, [r0, #8]
 800abd0:	8181      	strh	r1, [r0, #12]
 800abd2:	6643      	str	r3, [r0, #100]	@ 0x64
 800abd4:	81c2      	strh	r2, [r0, #14]
 800abd6:	6183      	str	r3, [r0, #24]
 800abd8:	4619      	mov	r1, r3
 800abda:	2208      	movs	r2, #8
 800abdc:	305c      	adds	r0, #92	@ 0x5c
 800abde:	f000 f940 	bl	800ae62 <memset>
 800abe2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac18 <std+0x58>)
 800abe4:	6263      	str	r3, [r4, #36]	@ 0x24
 800abe6:	4b0d      	ldr	r3, [pc, #52]	@ (800ac1c <std+0x5c>)
 800abe8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800abea:	4b0d      	ldr	r3, [pc, #52]	@ (800ac20 <std+0x60>)
 800abec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800abee:	4b0d      	ldr	r3, [pc, #52]	@ (800ac24 <std+0x64>)
 800abf0:	6323      	str	r3, [r4, #48]	@ 0x30
 800abf2:	4b0d      	ldr	r3, [pc, #52]	@ (800ac28 <std+0x68>)
 800abf4:	6224      	str	r4, [r4, #32]
 800abf6:	429c      	cmp	r4, r3
 800abf8:	d006      	beq.n	800ac08 <std+0x48>
 800abfa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800abfe:	4294      	cmp	r4, r2
 800ac00:	d002      	beq.n	800ac08 <std+0x48>
 800ac02:	33d0      	adds	r3, #208	@ 0xd0
 800ac04:	429c      	cmp	r4, r3
 800ac06:	d105      	bne.n	800ac14 <std+0x54>
 800ac08:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ac0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac10:	f000 b9b6 	b.w	800af80 <__retarget_lock_init_recursive>
 800ac14:	bd10      	pop	{r4, pc}
 800ac16:	bf00      	nop
 800ac18:	0800add9 	.word	0x0800add9
 800ac1c:	0800adff 	.word	0x0800adff
 800ac20:	0800ae37 	.word	0x0800ae37
 800ac24:	0800ae5b 	.word	0x0800ae5b
 800ac28:	20000754 	.word	0x20000754

0800ac2c <stdio_exit_handler>:
 800ac2c:	4a02      	ldr	r2, [pc, #8]	@ (800ac38 <stdio_exit_handler+0xc>)
 800ac2e:	4903      	ldr	r1, [pc, #12]	@ (800ac3c <stdio_exit_handler+0x10>)
 800ac30:	4803      	ldr	r0, [pc, #12]	@ (800ac40 <stdio_exit_handler+0x14>)
 800ac32:	f000 b869 	b.w	800ad08 <_fwalk_sglue>
 800ac36:	bf00      	nop
 800ac38:	20000010 	.word	0x20000010
 800ac3c:	0800de89 	.word	0x0800de89
 800ac40:	20000020 	.word	0x20000020

0800ac44 <cleanup_stdio>:
 800ac44:	6841      	ldr	r1, [r0, #4]
 800ac46:	4b0c      	ldr	r3, [pc, #48]	@ (800ac78 <cleanup_stdio+0x34>)
 800ac48:	4299      	cmp	r1, r3
 800ac4a:	b510      	push	{r4, lr}
 800ac4c:	4604      	mov	r4, r0
 800ac4e:	d001      	beq.n	800ac54 <cleanup_stdio+0x10>
 800ac50:	f003 f91a 	bl	800de88 <_fflush_r>
 800ac54:	68a1      	ldr	r1, [r4, #8]
 800ac56:	4b09      	ldr	r3, [pc, #36]	@ (800ac7c <cleanup_stdio+0x38>)
 800ac58:	4299      	cmp	r1, r3
 800ac5a:	d002      	beq.n	800ac62 <cleanup_stdio+0x1e>
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	f003 f913 	bl	800de88 <_fflush_r>
 800ac62:	68e1      	ldr	r1, [r4, #12]
 800ac64:	4b06      	ldr	r3, [pc, #24]	@ (800ac80 <cleanup_stdio+0x3c>)
 800ac66:	4299      	cmp	r1, r3
 800ac68:	d004      	beq.n	800ac74 <cleanup_stdio+0x30>
 800ac6a:	4620      	mov	r0, r4
 800ac6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac70:	f003 b90a 	b.w	800de88 <_fflush_r>
 800ac74:	bd10      	pop	{r4, pc}
 800ac76:	bf00      	nop
 800ac78:	20000754 	.word	0x20000754
 800ac7c:	200007bc 	.word	0x200007bc
 800ac80:	20000824 	.word	0x20000824

0800ac84 <global_stdio_init.part.0>:
 800ac84:	b510      	push	{r4, lr}
 800ac86:	4b0b      	ldr	r3, [pc, #44]	@ (800acb4 <global_stdio_init.part.0+0x30>)
 800ac88:	4c0b      	ldr	r4, [pc, #44]	@ (800acb8 <global_stdio_init.part.0+0x34>)
 800ac8a:	4a0c      	ldr	r2, [pc, #48]	@ (800acbc <global_stdio_init.part.0+0x38>)
 800ac8c:	601a      	str	r2, [r3, #0]
 800ac8e:	4620      	mov	r0, r4
 800ac90:	2200      	movs	r2, #0
 800ac92:	2104      	movs	r1, #4
 800ac94:	f7ff ff94 	bl	800abc0 <std>
 800ac98:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac9c:	2201      	movs	r2, #1
 800ac9e:	2109      	movs	r1, #9
 800aca0:	f7ff ff8e 	bl	800abc0 <std>
 800aca4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800aca8:	2202      	movs	r2, #2
 800acaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acae:	2112      	movs	r1, #18
 800acb0:	f7ff bf86 	b.w	800abc0 <std>
 800acb4:	2000088c 	.word	0x2000088c
 800acb8:	20000754 	.word	0x20000754
 800acbc:	0800ac2d 	.word	0x0800ac2d

0800acc0 <__sfp_lock_acquire>:
 800acc0:	4801      	ldr	r0, [pc, #4]	@ (800acc8 <__sfp_lock_acquire+0x8>)
 800acc2:	f000 b95e 	b.w	800af82 <__retarget_lock_acquire_recursive>
 800acc6:	bf00      	nop
 800acc8:	20000895 	.word	0x20000895

0800accc <__sfp_lock_release>:
 800accc:	4801      	ldr	r0, [pc, #4]	@ (800acd4 <__sfp_lock_release+0x8>)
 800acce:	f000 b959 	b.w	800af84 <__retarget_lock_release_recursive>
 800acd2:	bf00      	nop
 800acd4:	20000895 	.word	0x20000895

0800acd8 <__sinit>:
 800acd8:	b510      	push	{r4, lr}
 800acda:	4604      	mov	r4, r0
 800acdc:	f7ff fff0 	bl	800acc0 <__sfp_lock_acquire>
 800ace0:	6a23      	ldr	r3, [r4, #32]
 800ace2:	b11b      	cbz	r3, 800acec <__sinit+0x14>
 800ace4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ace8:	f7ff bff0 	b.w	800accc <__sfp_lock_release>
 800acec:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <__sinit+0x28>)
 800acee:	6223      	str	r3, [r4, #32]
 800acf0:	4b04      	ldr	r3, [pc, #16]	@ (800ad04 <__sinit+0x2c>)
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d1f5      	bne.n	800ace4 <__sinit+0xc>
 800acf8:	f7ff ffc4 	bl	800ac84 <global_stdio_init.part.0>
 800acfc:	e7f2      	b.n	800ace4 <__sinit+0xc>
 800acfe:	bf00      	nop
 800ad00:	0800ac45 	.word	0x0800ac45
 800ad04:	2000088c 	.word	0x2000088c

0800ad08 <_fwalk_sglue>:
 800ad08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad0c:	4607      	mov	r7, r0
 800ad0e:	4688      	mov	r8, r1
 800ad10:	4614      	mov	r4, r2
 800ad12:	2600      	movs	r6, #0
 800ad14:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ad18:	f1b9 0901 	subs.w	r9, r9, #1
 800ad1c:	d505      	bpl.n	800ad2a <_fwalk_sglue+0x22>
 800ad1e:	6824      	ldr	r4, [r4, #0]
 800ad20:	2c00      	cmp	r4, #0
 800ad22:	d1f7      	bne.n	800ad14 <_fwalk_sglue+0xc>
 800ad24:	4630      	mov	r0, r6
 800ad26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad2a:	89ab      	ldrh	r3, [r5, #12]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d907      	bls.n	800ad40 <_fwalk_sglue+0x38>
 800ad30:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad34:	3301      	adds	r3, #1
 800ad36:	d003      	beq.n	800ad40 <_fwalk_sglue+0x38>
 800ad38:	4629      	mov	r1, r5
 800ad3a:	4638      	mov	r0, r7
 800ad3c:	47c0      	blx	r8
 800ad3e:	4306      	orrs	r6, r0
 800ad40:	3568      	adds	r5, #104	@ 0x68
 800ad42:	e7e9      	b.n	800ad18 <_fwalk_sglue+0x10>

0800ad44 <siprintf>:
 800ad44:	b40e      	push	{r1, r2, r3}
 800ad46:	b500      	push	{lr}
 800ad48:	b09c      	sub	sp, #112	@ 0x70
 800ad4a:	ab1d      	add	r3, sp, #116	@ 0x74
 800ad4c:	9002      	str	r0, [sp, #8]
 800ad4e:	9006      	str	r0, [sp, #24]
 800ad50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ad54:	4809      	ldr	r0, [pc, #36]	@ (800ad7c <siprintf+0x38>)
 800ad56:	9107      	str	r1, [sp, #28]
 800ad58:	9104      	str	r1, [sp, #16]
 800ad5a:	4909      	ldr	r1, [pc, #36]	@ (800ad80 <siprintf+0x3c>)
 800ad5c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad60:	9105      	str	r1, [sp, #20]
 800ad62:	6800      	ldr	r0, [r0, #0]
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	a902      	add	r1, sp, #8
 800ad68:	f002 fbf4 	bl	800d554 <_svfiprintf_r>
 800ad6c:	9b02      	ldr	r3, [sp, #8]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	701a      	strb	r2, [r3, #0]
 800ad72:	b01c      	add	sp, #112	@ 0x70
 800ad74:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad78:	b003      	add	sp, #12
 800ad7a:	4770      	bx	lr
 800ad7c:	2000001c 	.word	0x2000001c
 800ad80:	ffff0208 	.word	0xffff0208

0800ad84 <siscanf>:
 800ad84:	b40e      	push	{r1, r2, r3}
 800ad86:	b530      	push	{r4, r5, lr}
 800ad88:	b09c      	sub	sp, #112	@ 0x70
 800ad8a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800ad8c:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800ad90:	f854 5b04 	ldr.w	r5, [r4], #4
 800ad94:	f8ad 2014 	strh.w	r2, [sp, #20]
 800ad98:	9002      	str	r0, [sp, #8]
 800ad9a:	9006      	str	r0, [sp, #24]
 800ad9c:	f7f5 fa70 	bl	8000280 <strlen>
 800ada0:	4b0b      	ldr	r3, [pc, #44]	@ (800add0 <siscanf+0x4c>)
 800ada2:	9003      	str	r0, [sp, #12]
 800ada4:	9007      	str	r0, [sp, #28]
 800ada6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ada8:	480a      	ldr	r0, [pc, #40]	@ (800add4 <siscanf+0x50>)
 800adaa:	9401      	str	r4, [sp, #4]
 800adac:	2300      	movs	r3, #0
 800adae:	930f      	str	r3, [sp, #60]	@ 0x3c
 800adb0:	9314      	str	r3, [sp, #80]	@ 0x50
 800adb2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adb6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800adba:	462a      	mov	r2, r5
 800adbc:	4623      	mov	r3, r4
 800adbe:	a902      	add	r1, sp, #8
 800adc0:	6800      	ldr	r0, [r0, #0]
 800adc2:	f002 fd1b 	bl	800d7fc <__ssvfiscanf_r>
 800adc6:	b01c      	add	sp, #112	@ 0x70
 800adc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adcc:	b003      	add	sp, #12
 800adce:	4770      	bx	lr
 800add0:	0800adfb 	.word	0x0800adfb
 800add4:	2000001c 	.word	0x2000001c

0800add8 <__sread>:
 800add8:	b510      	push	{r4, lr}
 800adda:	460c      	mov	r4, r1
 800addc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ade0:	f000 f880 	bl	800aee4 <_read_r>
 800ade4:	2800      	cmp	r0, #0
 800ade6:	bfab      	itete	ge
 800ade8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800adea:	89a3      	ldrhlt	r3, [r4, #12]
 800adec:	181b      	addge	r3, r3, r0
 800adee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800adf2:	bfac      	ite	ge
 800adf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800adf6:	81a3      	strhlt	r3, [r4, #12]
 800adf8:	bd10      	pop	{r4, pc}

0800adfa <__seofread>:
 800adfa:	2000      	movs	r0, #0
 800adfc:	4770      	bx	lr

0800adfe <__swrite>:
 800adfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae02:	461f      	mov	r7, r3
 800ae04:	898b      	ldrh	r3, [r1, #12]
 800ae06:	05db      	lsls	r3, r3, #23
 800ae08:	4605      	mov	r5, r0
 800ae0a:	460c      	mov	r4, r1
 800ae0c:	4616      	mov	r6, r2
 800ae0e:	d505      	bpl.n	800ae1c <__swrite+0x1e>
 800ae10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae14:	2302      	movs	r3, #2
 800ae16:	2200      	movs	r2, #0
 800ae18:	f000 f852 	bl	800aec0 <_lseek_r>
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ae26:	81a3      	strh	r3, [r4, #12]
 800ae28:	4632      	mov	r2, r6
 800ae2a:	463b      	mov	r3, r7
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ae32:	f000 b869 	b.w	800af08 <_write_r>

0800ae36 <__sseek>:
 800ae36:	b510      	push	{r4, lr}
 800ae38:	460c      	mov	r4, r1
 800ae3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae3e:	f000 f83f 	bl	800aec0 <_lseek_r>
 800ae42:	1c43      	adds	r3, r0, #1
 800ae44:	89a3      	ldrh	r3, [r4, #12]
 800ae46:	bf15      	itete	ne
 800ae48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ae4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ae4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ae52:	81a3      	strheq	r3, [r4, #12]
 800ae54:	bf18      	it	ne
 800ae56:	81a3      	strhne	r3, [r4, #12]
 800ae58:	bd10      	pop	{r4, pc}

0800ae5a <__sclose>:
 800ae5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae5e:	f000 b81f 	b.w	800aea0 <_close_r>

0800ae62 <memset>:
 800ae62:	4402      	add	r2, r0
 800ae64:	4603      	mov	r3, r0
 800ae66:	4293      	cmp	r3, r2
 800ae68:	d100      	bne.n	800ae6c <memset+0xa>
 800ae6a:	4770      	bx	lr
 800ae6c:	f803 1b01 	strb.w	r1, [r3], #1
 800ae70:	e7f9      	b.n	800ae66 <memset+0x4>

0800ae72 <strncmp>:
 800ae72:	b510      	push	{r4, lr}
 800ae74:	b16a      	cbz	r2, 800ae92 <strncmp+0x20>
 800ae76:	3901      	subs	r1, #1
 800ae78:	1884      	adds	r4, r0, r2
 800ae7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae7e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ae82:	429a      	cmp	r2, r3
 800ae84:	d103      	bne.n	800ae8e <strncmp+0x1c>
 800ae86:	42a0      	cmp	r0, r4
 800ae88:	d001      	beq.n	800ae8e <strncmp+0x1c>
 800ae8a:	2a00      	cmp	r2, #0
 800ae8c:	d1f5      	bne.n	800ae7a <strncmp+0x8>
 800ae8e:	1ad0      	subs	r0, r2, r3
 800ae90:	bd10      	pop	{r4, pc}
 800ae92:	4610      	mov	r0, r2
 800ae94:	e7fc      	b.n	800ae90 <strncmp+0x1e>
	...

0800ae98 <_localeconv_r>:
 800ae98:	4800      	ldr	r0, [pc, #0]	@ (800ae9c <_localeconv_r+0x4>)
 800ae9a:	4770      	bx	lr
 800ae9c:	2000015c 	.word	0x2000015c

0800aea0 <_close_r>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	4d06      	ldr	r5, [pc, #24]	@ (800aebc <_close_r+0x1c>)
 800aea4:	2300      	movs	r3, #0
 800aea6:	4604      	mov	r4, r0
 800aea8:	4608      	mov	r0, r1
 800aeaa:	602b      	str	r3, [r5, #0]
 800aeac:	f7f7 ff6c 	bl	8002d88 <_close>
 800aeb0:	1c43      	adds	r3, r0, #1
 800aeb2:	d102      	bne.n	800aeba <_close_r+0x1a>
 800aeb4:	682b      	ldr	r3, [r5, #0]
 800aeb6:	b103      	cbz	r3, 800aeba <_close_r+0x1a>
 800aeb8:	6023      	str	r3, [r4, #0]
 800aeba:	bd38      	pop	{r3, r4, r5, pc}
 800aebc:	20000890 	.word	0x20000890

0800aec0 <_lseek_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d07      	ldr	r5, [pc, #28]	@ (800aee0 <_lseek_r+0x20>)
 800aec4:	4604      	mov	r4, r0
 800aec6:	4608      	mov	r0, r1
 800aec8:	4611      	mov	r1, r2
 800aeca:	2200      	movs	r2, #0
 800aecc:	602a      	str	r2, [r5, #0]
 800aece:	461a      	mov	r2, r3
 800aed0:	f7f7 ff81 	bl	8002dd6 <_lseek>
 800aed4:	1c43      	adds	r3, r0, #1
 800aed6:	d102      	bne.n	800aede <_lseek_r+0x1e>
 800aed8:	682b      	ldr	r3, [r5, #0]
 800aeda:	b103      	cbz	r3, 800aede <_lseek_r+0x1e>
 800aedc:	6023      	str	r3, [r4, #0]
 800aede:	bd38      	pop	{r3, r4, r5, pc}
 800aee0:	20000890 	.word	0x20000890

0800aee4 <_read_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d07      	ldr	r5, [pc, #28]	@ (800af04 <_read_r+0x20>)
 800aee8:	4604      	mov	r4, r0
 800aeea:	4608      	mov	r0, r1
 800aeec:	4611      	mov	r1, r2
 800aeee:	2200      	movs	r2, #0
 800aef0:	602a      	str	r2, [r5, #0]
 800aef2:	461a      	mov	r2, r3
 800aef4:	f7f7 ff0f 	bl	8002d16 <_read>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d102      	bne.n	800af02 <_read_r+0x1e>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	b103      	cbz	r3, 800af02 <_read_r+0x1e>
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	20000890 	.word	0x20000890

0800af08 <_write_r>:
 800af08:	b538      	push	{r3, r4, r5, lr}
 800af0a:	4d07      	ldr	r5, [pc, #28]	@ (800af28 <_write_r+0x20>)
 800af0c:	4604      	mov	r4, r0
 800af0e:	4608      	mov	r0, r1
 800af10:	4611      	mov	r1, r2
 800af12:	2200      	movs	r2, #0
 800af14:	602a      	str	r2, [r5, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	f7f7 ff1a 	bl	8002d50 <_write>
 800af1c:	1c43      	adds	r3, r0, #1
 800af1e:	d102      	bne.n	800af26 <_write_r+0x1e>
 800af20:	682b      	ldr	r3, [r5, #0]
 800af22:	b103      	cbz	r3, 800af26 <_write_r+0x1e>
 800af24:	6023      	str	r3, [r4, #0]
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	20000890 	.word	0x20000890

0800af2c <__errno>:
 800af2c:	4b01      	ldr	r3, [pc, #4]	@ (800af34 <__errno+0x8>)
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	2000001c 	.word	0x2000001c

0800af38 <__libc_init_array>:
 800af38:	b570      	push	{r4, r5, r6, lr}
 800af3a:	4d0d      	ldr	r5, [pc, #52]	@ (800af70 <__libc_init_array+0x38>)
 800af3c:	4c0d      	ldr	r4, [pc, #52]	@ (800af74 <__libc_init_array+0x3c>)
 800af3e:	1b64      	subs	r4, r4, r5
 800af40:	10a4      	asrs	r4, r4, #2
 800af42:	2600      	movs	r6, #0
 800af44:	42a6      	cmp	r6, r4
 800af46:	d109      	bne.n	800af5c <__libc_init_array+0x24>
 800af48:	4d0b      	ldr	r5, [pc, #44]	@ (800af78 <__libc_init_array+0x40>)
 800af4a:	4c0c      	ldr	r4, [pc, #48]	@ (800af7c <__libc_init_array+0x44>)
 800af4c:	f004 febe 	bl	800fccc <_init>
 800af50:	1b64      	subs	r4, r4, r5
 800af52:	10a4      	asrs	r4, r4, #2
 800af54:	2600      	movs	r6, #0
 800af56:	42a6      	cmp	r6, r4
 800af58:	d105      	bne.n	800af66 <__libc_init_array+0x2e>
 800af5a:	bd70      	pop	{r4, r5, r6, pc}
 800af5c:	f855 3b04 	ldr.w	r3, [r5], #4
 800af60:	4798      	blx	r3
 800af62:	3601      	adds	r6, #1
 800af64:	e7ee      	b.n	800af44 <__libc_init_array+0xc>
 800af66:	f855 3b04 	ldr.w	r3, [r5], #4
 800af6a:	4798      	blx	r3
 800af6c:	3601      	adds	r6, #1
 800af6e:	e7f2      	b.n	800af56 <__libc_init_array+0x1e>
 800af70:	08010278 	.word	0x08010278
 800af74:	08010278 	.word	0x08010278
 800af78:	08010278 	.word	0x08010278
 800af7c:	0801027c 	.word	0x0801027c

0800af80 <__retarget_lock_init_recursive>:
 800af80:	4770      	bx	lr

0800af82 <__retarget_lock_acquire_recursive>:
 800af82:	4770      	bx	lr

0800af84 <__retarget_lock_release_recursive>:
 800af84:	4770      	bx	lr
	...

0800af88 <nanf>:
 800af88:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800af90 <nanf+0x8>
 800af8c:	4770      	bx	lr
 800af8e:	bf00      	nop
 800af90:	7fc00000 	.word	0x7fc00000

0800af94 <quorem>:
 800af94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af98:	6903      	ldr	r3, [r0, #16]
 800af9a:	690c      	ldr	r4, [r1, #16]
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	4607      	mov	r7, r0
 800afa0:	db7e      	blt.n	800b0a0 <quorem+0x10c>
 800afa2:	3c01      	subs	r4, #1
 800afa4:	f101 0814 	add.w	r8, r1, #20
 800afa8:	00a3      	lsls	r3, r4, #2
 800afaa:	f100 0514 	add.w	r5, r0, #20
 800afae:	9300      	str	r3, [sp, #0]
 800afb0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800afb4:	9301      	str	r3, [sp, #4]
 800afb6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800afba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800afbe:	3301      	adds	r3, #1
 800afc0:	429a      	cmp	r2, r3
 800afc2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800afc6:	fbb2 f6f3 	udiv	r6, r2, r3
 800afca:	d32e      	bcc.n	800b02a <quorem+0x96>
 800afcc:	f04f 0a00 	mov.w	sl, #0
 800afd0:	46c4      	mov	ip, r8
 800afd2:	46ae      	mov	lr, r5
 800afd4:	46d3      	mov	fp, sl
 800afd6:	f85c 3b04 	ldr.w	r3, [ip], #4
 800afda:	b298      	uxth	r0, r3
 800afdc:	fb06 a000 	mla	r0, r6, r0, sl
 800afe0:	0c02      	lsrs	r2, r0, #16
 800afe2:	0c1b      	lsrs	r3, r3, #16
 800afe4:	fb06 2303 	mla	r3, r6, r3, r2
 800afe8:	f8de 2000 	ldr.w	r2, [lr]
 800afec:	b280      	uxth	r0, r0
 800afee:	b292      	uxth	r2, r2
 800aff0:	1a12      	subs	r2, r2, r0
 800aff2:	445a      	add	r2, fp
 800aff4:	f8de 0000 	ldr.w	r0, [lr]
 800aff8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800affc:	b29b      	uxth	r3, r3
 800affe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800b002:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800b006:	b292      	uxth	r2, r2
 800b008:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800b00c:	45e1      	cmp	r9, ip
 800b00e:	f84e 2b04 	str.w	r2, [lr], #4
 800b012:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800b016:	d2de      	bcs.n	800afd6 <quorem+0x42>
 800b018:	9b00      	ldr	r3, [sp, #0]
 800b01a:	58eb      	ldr	r3, [r5, r3]
 800b01c:	b92b      	cbnz	r3, 800b02a <quorem+0x96>
 800b01e:	9b01      	ldr	r3, [sp, #4]
 800b020:	3b04      	subs	r3, #4
 800b022:	429d      	cmp	r5, r3
 800b024:	461a      	mov	r2, r3
 800b026:	d32f      	bcc.n	800b088 <quorem+0xf4>
 800b028:	613c      	str	r4, [r7, #16]
 800b02a:	4638      	mov	r0, r7
 800b02c:	f001 f9c4 	bl	800c3b8 <__mcmp>
 800b030:	2800      	cmp	r0, #0
 800b032:	db25      	blt.n	800b080 <quorem+0xec>
 800b034:	4629      	mov	r1, r5
 800b036:	2000      	movs	r0, #0
 800b038:	f858 2b04 	ldr.w	r2, [r8], #4
 800b03c:	f8d1 c000 	ldr.w	ip, [r1]
 800b040:	fa1f fe82 	uxth.w	lr, r2
 800b044:	fa1f f38c 	uxth.w	r3, ip
 800b048:	eba3 030e 	sub.w	r3, r3, lr
 800b04c:	4403      	add	r3, r0
 800b04e:	0c12      	lsrs	r2, r2, #16
 800b050:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800b054:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800b058:	b29b      	uxth	r3, r3
 800b05a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b05e:	45c1      	cmp	r9, r8
 800b060:	f841 3b04 	str.w	r3, [r1], #4
 800b064:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b068:	d2e6      	bcs.n	800b038 <quorem+0xa4>
 800b06a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b06e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b072:	b922      	cbnz	r2, 800b07e <quorem+0xea>
 800b074:	3b04      	subs	r3, #4
 800b076:	429d      	cmp	r5, r3
 800b078:	461a      	mov	r2, r3
 800b07a:	d30b      	bcc.n	800b094 <quorem+0x100>
 800b07c:	613c      	str	r4, [r7, #16]
 800b07e:	3601      	adds	r6, #1
 800b080:	4630      	mov	r0, r6
 800b082:	b003      	add	sp, #12
 800b084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b088:	6812      	ldr	r2, [r2, #0]
 800b08a:	3b04      	subs	r3, #4
 800b08c:	2a00      	cmp	r2, #0
 800b08e:	d1cb      	bne.n	800b028 <quorem+0x94>
 800b090:	3c01      	subs	r4, #1
 800b092:	e7c6      	b.n	800b022 <quorem+0x8e>
 800b094:	6812      	ldr	r2, [r2, #0]
 800b096:	3b04      	subs	r3, #4
 800b098:	2a00      	cmp	r2, #0
 800b09a:	d1ef      	bne.n	800b07c <quorem+0xe8>
 800b09c:	3c01      	subs	r4, #1
 800b09e:	e7ea      	b.n	800b076 <quorem+0xe2>
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	e7ee      	b.n	800b082 <quorem+0xee>
 800b0a4:	0000      	movs	r0, r0
	...

0800b0a8 <_dtoa_r>:
 800b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ac:	69c7      	ldr	r7, [r0, #28]
 800b0ae:	b099      	sub	sp, #100	@ 0x64
 800b0b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b0b4:	ec55 4b10 	vmov	r4, r5, d0
 800b0b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800b0ba:	9109      	str	r1, [sp, #36]	@ 0x24
 800b0bc:	4683      	mov	fp, r0
 800b0be:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b0c2:	b97f      	cbnz	r7, 800b0e4 <_dtoa_r+0x3c>
 800b0c4:	2010      	movs	r0, #16
 800b0c6:	f000 fdfd 	bl	800bcc4 <malloc>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	f8cb 001c 	str.w	r0, [fp, #28]
 800b0d0:	b920      	cbnz	r0, 800b0dc <_dtoa_r+0x34>
 800b0d2:	4ba7      	ldr	r3, [pc, #668]	@ (800b370 <_dtoa_r+0x2c8>)
 800b0d4:	21ef      	movs	r1, #239	@ 0xef
 800b0d6:	48a7      	ldr	r0, [pc, #668]	@ (800b374 <_dtoa_r+0x2cc>)
 800b0d8:	f002 ffb2 	bl	800e040 <__assert_func>
 800b0dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800b0e0:	6007      	str	r7, [r0, #0]
 800b0e2:	60c7      	str	r7, [r0, #12]
 800b0e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b0e8:	6819      	ldr	r1, [r3, #0]
 800b0ea:	b159      	cbz	r1, 800b104 <_dtoa_r+0x5c>
 800b0ec:	685a      	ldr	r2, [r3, #4]
 800b0ee:	604a      	str	r2, [r1, #4]
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	4093      	lsls	r3, r2
 800b0f4:	608b      	str	r3, [r1, #8]
 800b0f6:	4658      	mov	r0, fp
 800b0f8:	f000 feda 	bl	800beb0 <_Bfree>
 800b0fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b100:	2200      	movs	r2, #0
 800b102:	601a      	str	r2, [r3, #0]
 800b104:	1e2b      	subs	r3, r5, #0
 800b106:	bfb9      	ittee	lt
 800b108:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800b10c:	9303      	strlt	r3, [sp, #12]
 800b10e:	2300      	movge	r3, #0
 800b110:	6033      	strge	r3, [r6, #0]
 800b112:	9f03      	ldr	r7, [sp, #12]
 800b114:	4b98      	ldr	r3, [pc, #608]	@ (800b378 <_dtoa_r+0x2d0>)
 800b116:	bfbc      	itt	lt
 800b118:	2201      	movlt	r2, #1
 800b11a:	6032      	strlt	r2, [r6, #0]
 800b11c:	43bb      	bics	r3, r7
 800b11e:	d112      	bne.n	800b146 <_dtoa_r+0x9e>
 800b120:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b122:	f242 730f 	movw	r3, #9999	@ 0x270f
 800b126:	6013      	str	r3, [r2, #0]
 800b128:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b12c:	4323      	orrs	r3, r4
 800b12e:	f000 854d 	beq.w	800bbcc <_dtoa_r+0xb24>
 800b132:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b134:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800b38c <_dtoa_r+0x2e4>
 800b138:	2b00      	cmp	r3, #0
 800b13a:	f000 854f 	beq.w	800bbdc <_dtoa_r+0xb34>
 800b13e:	f10a 0303 	add.w	r3, sl, #3
 800b142:	f000 bd49 	b.w	800bbd8 <_dtoa_r+0xb30>
 800b146:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b14a:	2200      	movs	r2, #0
 800b14c:	ec51 0b17 	vmov	r0, r1, d7
 800b150:	2300      	movs	r3, #0
 800b152:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800b156:	f7f5 fcbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800b15a:	4680      	mov	r8, r0
 800b15c:	b158      	cbz	r0, 800b176 <_dtoa_r+0xce>
 800b15e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800b160:	2301      	movs	r3, #1
 800b162:	6013      	str	r3, [r2, #0]
 800b164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b166:	b113      	cbz	r3, 800b16e <_dtoa_r+0xc6>
 800b168:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800b16a:	4b84      	ldr	r3, [pc, #528]	@ (800b37c <_dtoa_r+0x2d4>)
 800b16c:	6013      	str	r3, [r2, #0]
 800b16e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800b390 <_dtoa_r+0x2e8>
 800b172:	f000 bd33 	b.w	800bbdc <_dtoa_r+0xb34>
 800b176:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b17a:	aa16      	add	r2, sp, #88	@ 0x58
 800b17c:	a917      	add	r1, sp, #92	@ 0x5c
 800b17e:	4658      	mov	r0, fp
 800b180:	f001 fa3a 	bl	800c5f8 <__d2b>
 800b184:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800b188:	4681      	mov	r9, r0
 800b18a:	2e00      	cmp	r6, #0
 800b18c:	d077      	beq.n	800b27e <_dtoa_r+0x1d6>
 800b18e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b190:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800b194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b198:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b19c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800b1a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800b1a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	4b74      	ldr	r3, [pc, #464]	@ (800b380 <_dtoa_r+0x2d8>)
 800b1ae:	f7f5 f873 	bl	8000298 <__aeabi_dsub>
 800b1b2:	a369      	add	r3, pc, #420	@ (adr r3, 800b358 <_dtoa_r+0x2b0>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 fa26 	bl	8000608 <__aeabi_dmul>
 800b1bc:	a368      	add	r3, pc, #416	@ (adr r3, 800b360 <_dtoa_r+0x2b8>)
 800b1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c2:	f7f5 f86b 	bl	800029c <__adddf3>
 800b1c6:	4604      	mov	r4, r0
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	460d      	mov	r5, r1
 800b1cc:	f7f5 f9b2 	bl	8000534 <__aeabi_i2d>
 800b1d0:	a365      	add	r3, pc, #404	@ (adr r3, 800b368 <_dtoa_r+0x2c0>)
 800b1d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1d6:	f7f5 fa17 	bl	8000608 <__aeabi_dmul>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	4620      	mov	r0, r4
 800b1e0:	4629      	mov	r1, r5
 800b1e2:	f7f5 f85b 	bl	800029c <__adddf3>
 800b1e6:	4604      	mov	r4, r0
 800b1e8:	460d      	mov	r5, r1
 800b1ea:	f7f5 fcbd 	bl	8000b68 <__aeabi_d2iz>
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	4607      	mov	r7, r0
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	4620      	mov	r0, r4
 800b1f6:	4629      	mov	r1, r5
 800b1f8:	f7f5 fc78 	bl	8000aec <__aeabi_dcmplt>
 800b1fc:	b140      	cbz	r0, 800b210 <_dtoa_r+0x168>
 800b1fe:	4638      	mov	r0, r7
 800b200:	f7f5 f998 	bl	8000534 <__aeabi_i2d>
 800b204:	4622      	mov	r2, r4
 800b206:	462b      	mov	r3, r5
 800b208:	f7f5 fc66 	bl	8000ad8 <__aeabi_dcmpeq>
 800b20c:	b900      	cbnz	r0, 800b210 <_dtoa_r+0x168>
 800b20e:	3f01      	subs	r7, #1
 800b210:	2f16      	cmp	r7, #22
 800b212:	d851      	bhi.n	800b2b8 <_dtoa_r+0x210>
 800b214:	4b5b      	ldr	r3, [pc, #364]	@ (800b384 <_dtoa_r+0x2dc>)
 800b216:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b222:	f7f5 fc63 	bl	8000aec <__aeabi_dcmplt>
 800b226:	2800      	cmp	r0, #0
 800b228:	d048      	beq.n	800b2bc <_dtoa_r+0x214>
 800b22a:	3f01      	subs	r7, #1
 800b22c:	2300      	movs	r3, #0
 800b22e:	9312      	str	r3, [sp, #72]	@ 0x48
 800b230:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b232:	1b9b      	subs	r3, r3, r6
 800b234:	1e5a      	subs	r2, r3, #1
 800b236:	bf44      	itt	mi
 800b238:	f1c3 0801 	rsbmi	r8, r3, #1
 800b23c:	2300      	movmi	r3, #0
 800b23e:	9208      	str	r2, [sp, #32]
 800b240:	bf54      	ite	pl
 800b242:	f04f 0800 	movpl.w	r8, #0
 800b246:	9308      	strmi	r3, [sp, #32]
 800b248:	2f00      	cmp	r7, #0
 800b24a:	db39      	blt.n	800b2c0 <_dtoa_r+0x218>
 800b24c:	9b08      	ldr	r3, [sp, #32]
 800b24e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800b250:	443b      	add	r3, r7
 800b252:	9308      	str	r3, [sp, #32]
 800b254:	2300      	movs	r3, #0
 800b256:	930a      	str	r3, [sp, #40]	@ 0x28
 800b258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	d864      	bhi.n	800b328 <_dtoa_r+0x280>
 800b25e:	2b05      	cmp	r3, #5
 800b260:	bfc4      	itt	gt
 800b262:	3b04      	subgt	r3, #4
 800b264:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800b266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b268:	f1a3 0302 	sub.w	r3, r3, #2
 800b26c:	bfcc      	ite	gt
 800b26e:	2400      	movgt	r4, #0
 800b270:	2401      	movle	r4, #1
 800b272:	2b03      	cmp	r3, #3
 800b274:	d863      	bhi.n	800b33e <_dtoa_r+0x296>
 800b276:	e8df f003 	tbb	[pc, r3]
 800b27a:	372a      	.short	0x372a
 800b27c:	5535      	.short	0x5535
 800b27e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800b282:	441e      	add	r6, r3
 800b284:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800b288:	2b20      	cmp	r3, #32
 800b28a:	bfc1      	itttt	gt
 800b28c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800b290:	409f      	lslgt	r7, r3
 800b292:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800b296:	fa24 f303 	lsrgt.w	r3, r4, r3
 800b29a:	bfd6      	itet	le
 800b29c:	f1c3 0320 	rsble	r3, r3, #32
 800b2a0:	ea47 0003 	orrgt.w	r0, r7, r3
 800b2a4:	fa04 f003 	lslle.w	r0, r4, r3
 800b2a8:	f7f5 f934 	bl	8000514 <__aeabi_ui2d>
 800b2ac:	2201      	movs	r2, #1
 800b2ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800b2b2:	3e01      	subs	r6, #1
 800b2b4:	9214      	str	r2, [sp, #80]	@ 0x50
 800b2b6:	e777      	b.n	800b1a8 <_dtoa_r+0x100>
 800b2b8:	2301      	movs	r3, #1
 800b2ba:	e7b8      	b.n	800b22e <_dtoa_r+0x186>
 800b2bc:	9012      	str	r0, [sp, #72]	@ 0x48
 800b2be:	e7b7      	b.n	800b230 <_dtoa_r+0x188>
 800b2c0:	427b      	negs	r3, r7
 800b2c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	eba8 0807 	sub.w	r8, r8, r7
 800b2ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b2cc:	e7c4      	b.n	800b258 <_dtoa_r+0x1b0>
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	dc35      	bgt.n	800b344 <_dtoa_r+0x29c>
 800b2d8:	2301      	movs	r3, #1
 800b2da:	9300      	str	r3, [sp, #0]
 800b2dc:	9307      	str	r3, [sp, #28]
 800b2de:	461a      	mov	r2, r3
 800b2e0:	920e      	str	r2, [sp, #56]	@ 0x38
 800b2e2:	e00b      	b.n	800b2fc <_dtoa_r+0x254>
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e7f3      	b.n	800b2d0 <_dtoa_r+0x228>
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b2ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2ee:	18fb      	adds	r3, r7, r3
 800b2f0:	9300      	str	r3, [sp, #0]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	9307      	str	r3, [sp, #28]
 800b2f8:	bfb8      	it	lt
 800b2fa:	2301      	movlt	r3, #1
 800b2fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800b300:	2100      	movs	r1, #0
 800b302:	2204      	movs	r2, #4
 800b304:	f102 0514 	add.w	r5, r2, #20
 800b308:	429d      	cmp	r5, r3
 800b30a:	d91f      	bls.n	800b34c <_dtoa_r+0x2a4>
 800b30c:	6041      	str	r1, [r0, #4]
 800b30e:	4658      	mov	r0, fp
 800b310:	f000 fd8e 	bl	800be30 <_Balloc>
 800b314:	4682      	mov	sl, r0
 800b316:	2800      	cmp	r0, #0
 800b318:	d13c      	bne.n	800b394 <_dtoa_r+0x2ec>
 800b31a:	4b1b      	ldr	r3, [pc, #108]	@ (800b388 <_dtoa_r+0x2e0>)
 800b31c:	4602      	mov	r2, r0
 800b31e:	f240 11af 	movw	r1, #431	@ 0x1af
 800b322:	e6d8      	b.n	800b0d6 <_dtoa_r+0x2e>
 800b324:	2301      	movs	r3, #1
 800b326:	e7e0      	b.n	800b2ea <_dtoa_r+0x242>
 800b328:	2401      	movs	r4, #1
 800b32a:	2300      	movs	r3, #0
 800b32c:	9309      	str	r3, [sp, #36]	@ 0x24
 800b32e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800b330:	f04f 33ff 	mov.w	r3, #4294967295
 800b334:	9300      	str	r3, [sp, #0]
 800b336:	9307      	str	r3, [sp, #28]
 800b338:	2200      	movs	r2, #0
 800b33a:	2312      	movs	r3, #18
 800b33c:	e7d0      	b.n	800b2e0 <_dtoa_r+0x238>
 800b33e:	2301      	movs	r3, #1
 800b340:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b342:	e7f5      	b.n	800b330 <_dtoa_r+0x288>
 800b344:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b346:	9300      	str	r3, [sp, #0]
 800b348:	9307      	str	r3, [sp, #28]
 800b34a:	e7d7      	b.n	800b2fc <_dtoa_r+0x254>
 800b34c:	3101      	adds	r1, #1
 800b34e:	0052      	lsls	r2, r2, #1
 800b350:	e7d8      	b.n	800b304 <_dtoa_r+0x25c>
 800b352:	bf00      	nop
 800b354:	f3af 8000 	nop.w
 800b358:	636f4361 	.word	0x636f4361
 800b35c:	3fd287a7 	.word	0x3fd287a7
 800b360:	8b60c8b3 	.word	0x8b60c8b3
 800b364:	3fc68a28 	.word	0x3fc68a28
 800b368:	509f79fb 	.word	0x509f79fb
 800b36c:	3fd34413 	.word	0x3fd34413
 800b370:	0800fe34 	.word	0x0800fe34
 800b374:	0800fe4b 	.word	0x0800fe4b
 800b378:	7ff00000 	.word	0x7ff00000
 800b37c:	08010191 	.word	0x08010191
 800b380:	3ff80000 	.word	0x3ff80000
 800b384:	0800ff48 	.word	0x0800ff48
 800b388:	0800fea3 	.word	0x0800fea3
 800b38c:	0800fe30 	.word	0x0800fe30
 800b390:	08010190 	.word	0x08010190
 800b394:	f8db 301c 	ldr.w	r3, [fp, #28]
 800b398:	6018      	str	r0, [r3, #0]
 800b39a:	9b07      	ldr	r3, [sp, #28]
 800b39c:	2b0e      	cmp	r3, #14
 800b39e:	f200 80a4 	bhi.w	800b4ea <_dtoa_r+0x442>
 800b3a2:	2c00      	cmp	r4, #0
 800b3a4:	f000 80a1 	beq.w	800b4ea <_dtoa_r+0x442>
 800b3a8:	2f00      	cmp	r7, #0
 800b3aa:	dd33      	ble.n	800b414 <_dtoa_r+0x36c>
 800b3ac:	4bad      	ldr	r3, [pc, #692]	@ (800b664 <_dtoa_r+0x5bc>)
 800b3ae:	f007 020f 	and.w	r2, r7, #15
 800b3b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3b6:	ed93 7b00 	vldr	d7, [r3]
 800b3ba:	05f8      	lsls	r0, r7, #23
 800b3bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b3c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800b3c4:	d516      	bpl.n	800b3f4 <_dtoa_r+0x34c>
 800b3c6:	4ba8      	ldr	r3, [pc, #672]	@ (800b668 <_dtoa_r+0x5c0>)
 800b3c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b3cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b3d0:	f7f5 fa44 	bl	800085c <__aeabi_ddiv>
 800b3d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3d8:	f004 040f 	and.w	r4, r4, #15
 800b3dc:	2603      	movs	r6, #3
 800b3de:	4da2      	ldr	r5, [pc, #648]	@ (800b668 <_dtoa_r+0x5c0>)
 800b3e0:	b954      	cbnz	r4, 800b3f8 <_dtoa_r+0x350>
 800b3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b3ea:	f7f5 fa37 	bl	800085c <__aeabi_ddiv>
 800b3ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b3f2:	e028      	b.n	800b446 <_dtoa_r+0x39e>
 800b3f4:	2602      	movs	r6, #2
 800b3f6:	e7f2      	b.n	800b3de <_dtoa_r+0x336>
 800b3f8:	07e1      	lsls	r1, r4, #31
 800b3fa:	d508      	bpl.n	800b40e <_dtoa_r+0x366>
 800b3fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b400:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b404:	f7f5 f900 	bl	8000608 <__aeabi_dmul>
 800b408:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b40c:	3601      	adds	r6, #1
 800b40e:	1064      	asrs	r4, r4, #1
 800b410:	3508      	adds	r5, #8
 800b412:	e7e5      	b.n	800b3e0 <_dtoa_r+0x338>
 800b414:	f000 80d2 	beq.w	800b5bc <_dtoa_r+0x514>
 800b418:	427c      	negs	r4, r7
 800b41a:	4b92      	ldr	r3, [pc, #584]	@ (800b664 <_dtoa_r+0x5bc>)
 800b41c:	4d92      	ldr	r5, [pc, #584]	@ (800b668 <_dtoa_r+0x5c0>)
 800b41e:	f004 020f 	and.w	r2, r4, #15
 800b422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b42e:	f7f5 f8eb 	bl	8000608 <__aeabi_dmul>
 800b432:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b436:	1124      	asrs	r4, r4, #4
 800b438:	2300      	movs	r3, #0
 800b43a:	2602      	movs	r6, #2
 800b43c:	2c00      	cmp	r4, #0
 800b43e:	f040 80b2 	bne.w	800b5a6 <_dtoa_r+0x4fe>
 800b442:	2b00      	cmp	r3, #0
 800b444:	d1d3      	bne.n	800b3ee <_dtoa_r+0x346>
 800b446:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b448:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f000 80b7 	beq.w	800b5c0 <_dtoa_r+0x518>
 800b452:	4b86      	ldr	r3, [pc, #536]	@ (800b66c <_dtoa_r+0x5c4>)
 800b454:	2200      	movs	r2, #0
 800b456:	4620      	mov	r0, r4
 800b458:	4629      	mov	r1, r5
 800b45a:	f7f5 fb47 	bl	8000aec <__aeabi_dcmplt>
 800b45e:	2800      	cmp	r0, #0
 800b460:	f000 80ae 	beq.w	800b5c0 <_dtoa_r+0x518>
 800b464:	9b07      	ldr	r3, [sp, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	f000 80aa 	beq.w	800b5c0 <_dtoa_r+0x518>
 800b46c:	9b00      	ldr	r3, [sp, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	dd37      	ble.n	800b4e2 <_dtoa_r+0x43a>
 800b472:	1e7b      	subs	r3, r7, #1
 800b474:	9304      	str	r3, [sp, #16]
 800b476:	4620      	mov	r0, r4
 800b478:	4b7d      	ldr	r3, [pc, #500]	@ (800b670 <_dtoa_r+0x5c8>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	4629      	mov	r1, r5
 800b47e:	f7f5 f8c3 	bl	8000608 <__aeabi_dmul>
 800b482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b486:	9c00      	ldr	r4, [sp, #0]
 800b488:	3601      	adds	r6, #1
 800b48a:	4630      	mov	r0, r6
 800b48c:	f7f5 f852 	bl	8000534 <__aeabi_i2d>
 800b490:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b494:	f7f5 f8b8 	bl	8000608 <__aeabi_dmul>
 800b498:	4b76      	ldr	r3, [pc, #472]	@ (800b674 <_dtoa_r+0x5cc>)
 800b49a:	2200      	movs	r2, #0
 800b49c:	f7f4 fefe 	bl	800029c <__adddf3>
 800b4a0:	4605      	mov	r5, r0
 800b4a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800b4a6:	2c00      	cmp	r4, #0
 800b4a8:	f040 808d 	bne.w	800b5c6 <_dtoa_r+0x51e>
 800b4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4b0:	4b71      	ldr	r3, [pc, #452]	@ (800b678 <_dtoa_r+0x5d0>)
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f7f4 fef0 	bl	8000298 <__aeabi_dsub>
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b4c0:	462a      	mov	r2, r5
 800b4c2:	4633      	mov	r3, r6
 800b4c4:	f7f5 fb30 	bl	8000b28 <__aeabi_dcmpgt>
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	f040 828b 	bne.w	800b9e4 <_dtoa_r+0x93c>
 800b4ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b4d2:	462a      	mov	r2, r5
 800b4d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800b4d8:	f7f5 fb08 	bl	8000aec <__aeabi_dcmplt>
 800b4dc:	2800      	cmp	r0, #0
 800b4de:	f040 8128 	bne.w	800b732 <_dtoa_r+0x68a>
 800b4e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800b4e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800b4ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	f2c0 815a 	blt.w	800b7a6 <_dtoa_r+0x6fe>
 800b4f2:	2f0e      	cmp	r7, #14
 800b4f4:	f300 8157 	bgt.w	800b7a6 <_dtoa_r+0x6fe>
 800b4f8:	4b5a      	ldr	r3, [pc, #360]	@ (800b664 <_dtoa_r+0x5bc>)
 800b4fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800b4fe:	ed93 7b00 	vldr	d7, [r3]
 800b502:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b504:	2b00      	cmp	r3, #0
 800b506:	ed8d 7b00 	vstr	d7, [sp]
 800b50a:	da03      	bge.n	800b514 <_dtoa_r+0x46c>
 800b50c:	9b07      	ldr	r3, [sp, #28]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f340 8101 	ble.w	800b716 <_dtoa_r+0x66e>
 800b514:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800b518:	4656      	mov	r6, sl
 800b51a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b51e:	4620      	mov	r0, r4
 800b520:	4629      	mov	r1, r5
 800b522:	f7f5 f99b 	bl	800085c <__aeabi_ddiv>
 800b526:	f7f5 fb1f 	bl	8000b68 <__aeabi_d2iz>
 800b52a:	4680      	mov	r8, r0
 800b52c:	f7f5 f802 	bl	8000534 <__aeabi_i2d>
 800b530:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b534:	f7f5 f868 	bl	8000608 <__aeabi_dmul>
 800b538:	4602      	mov	r2, r0
 800b53a:	460b      	mov	r3, r1
 800b53c:	4620      	mov	r0, r4
 800b53e:	4629      	mov	r1, r5
 800b540:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b544:	f7f4 fea8 	bl	8000298 <__aeabi_dsub>
 800b548:	f806 4b01 	strb.w	r4, [r6], #1
 800b54c:	9d07      	ldr	r5, [sp, #28]
 800b54e:	eba6 040a 	sub.w	r4, r6, sl
 800b552:	42a5      	cmp	r5, r4
 800b554:	4602      	mov	r2, r0
 800b556:	460b      	mov	r3, r1
 800b558:	f040 8117 	bne.w	800b78a <_dtoa_r+0x6e2>
 800b55c:	f7f4 fe9e 	bl	800029c <__adddf3>
 800b560:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b564:	4604      	mov	r4, r0
 800b566:	460d      	mov	r5, r1
 800b568:	f7f5 fade 	bl	8000b28 <__aeabi_dcmpgt>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	f040 80f9 	bne.w	800b764 <_dtoa_r+0x6bc>
 800b572:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b576:	4620      	mov	r0, r4
 800b578:	4629      	mov	r1, r5
 800b57a:	f7f5 faad 	bl	8000ad8 <__aeabi_dcmpeq>
 800b57e:	b118      	cbz	r0, 800b588 <_dtoa_r+0x4e0>
 800b580:	f018 0f01 	tst.w	r8, #1
 800b584:	f040 80ee 	bne.w	800b764 <_dtoa_r+0x6bc>
 800b588:	4649      	mov	r1, r9
 800b58a:	4658      	mov	r0, fp
 800b58c:	f000 fc90 	bl	800beb0 <_Bfree>
 800b590:	2300      	movs	r3, #0
 800b592:	7033      	strb	r3, [r6, #0]
 800b594:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b596:	3701      	adds	r7, #1
 800b598:	601f      	str	r7, [r3, #0]
 800b59a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	f000 831d 	beq.w	800bbdc <_dtoa_r+0xb34>
 800b5a2:	601e      	str	r6, [r3, #0]
 800b5a4:	e31a      	b.n	800bbdc <_dtoa_r+0xb34>
 800b5a6:	07e2      	lsls	r2, r4, #31
 800b5a8:	d505      	bpl.n	800b5b6 <_dtoa_r+0x50e>
 800b5aa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800b5ae:	f7f5 f82b 	bl	8000608 <__aeabi_dmul>
 800b5b2:	3601      	adds	r6, #1
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	1064      	asrs	r4, r4, #1
 800b5b8:	3508      	adds	r5, #8
 800b5ba:	e73f      	b.n	800b43c <_dtoa_r+0x394>
 800b5bc:	2602      	movs	r6, #2
 800b5be:	e742      	b.n	800b446 <_dtoa_r+0x39e>
 800b5c0:	9c07      	ldr	r4, [sp, #28]
 800b5c2:	9704      	str	r7, [sp, #16]
 800b5c4:	e761      	b.n	800b48a <_dtoa_r+0x3e2>
 800b5c6:	4b27      	ldr	r3, [pc, #156]	@ (800b664 <_dtoa_r+0x5bc>)
 800b5c8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b5ca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b5ce:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b5d2:	4454      	add	r4, sl
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	d053      	beq.n	800b680 <_dtoa_r+0x5d8>
 800b5d8:	4928      	ldr	r1, [pc, #160]	@ (800b67c <_dtoa_r+0x5d4>)
 800b5da:	2000      	movs	r0, #0
 800b5dc:	f7f5 f93e 	bl	800085c <__aeabi_ddiv>
 800b5e0:	4633      	mov	r3, r6
 800b5e2:	462a      	mov	r2, r5
 800b5e4:	f7f4 fe58 	bl	8000298 <__aeabi_dsub>
 800b5e8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b5ec:	4656      	mov	r6, sl
 800b5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b5f2:	f7f5 fab9 	bl	8000b68 <__aeabi_d2iz>
 800b5f6:	4605      	mov	r5, r0
 800b5f8:	f7f4 ff9c 	bl	8000534 <__aeabi_i2d>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b604:	f7f4 fe48 	bl	8000298 <__aeabi_dsub>
 800b608:	3530      	adds	r5, #48	@ 0x30
 800b60a:	4602      	mov	r2, r0
 800b60c:	460b      	mov	r3, r1
 800b60e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b612:	f806 5b01 	strb.w	r5, [r6], #1
 800b616:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b61a:	f7f5 fa67 	bl	8000aec <__aeabi_dcmplt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d171      	bne.n	800b706 <_dtoa_r+0x65e>
 800b622:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b626:	4911      	ldr	r1, [pc, #68]	@ (800b66c <_dtoa_r+0x5c4>)
 800b628:	2000      	movs	r0, #0
 800b62a:	f7f4 fe35 	bl	8000298 <__aeabi_dsub>
 800b62e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b632:	f7f5 fa5b 	bl	8000aec <__aeabi_dcmplt>
 800b636:	2800      	cmp	r0, #0
 800b638:	f040 8095 	bne.w	800b766 <_dtoa_r+0x6be>
 800b63c:	42a6      	cmp	r6, r4
 800b63e:	f43f af50 	beq.w	800b4e2 <_dtoa_r+0x43a>
 800b642:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b646:	4b0a      	ldr	r3, [pc, #40]	@ (800b670 <_dtoa_r+0x5c8>)
 800b648:	2200      	movs	r2, #0
 800b64a:	f7f4 ffdd 	bl	8000608 <__aeabi_dmul>
 800b64e:	4b08      	ldr	r3, [pc, #32]	@ (800b670 <_dtoa_r+0x5c8>)
 800b650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b654:	2200      	movs	r2, #0
 800b656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b65a:	f7f4 ffd5 	bl	8000608 <__aeabi_dmul>
 800b65e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b662:	e7c4      	b.n	800b5ee <_dtoa_r+0x546>
 800b664:	0800ff48 	.word	0x0800ff48
 800b668:	0800ff20 	.word	0x0800ff20
 800b66c:	3ff00000 	.word	0x3ff00000
 800b670:	40240000 	.word	0x40240000
 800b674:	401c0000 	.word	0x401c0000
 800b678:	40140000 	.word	0x40140000
 800b67c:	3fe00000 	.word	0x3fe00000
 800b680:	4631      	mov	r1, r6
 800b682:	4628      	mov	r0, r5
 800b684:	f7f4 ffc0 	bl	8000608 <__aeabi_dmul>
 800b688:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800b68c:	9415      	str	r4, [sp, #84]	@ 0x54
 800b68e:	4656      	mov	r6, sl
 800b690:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b694:	f7f5 fa68 	bl	8000b68 <__aeabi_d2iz>
 800b698:	4605      	mov	r5, r0
 800b69a:	f7f4 ff4b 	bl	8000534 <__aeabi_i2d>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a6:	f7f4 fdf7 	bl	8000298 <__aeabi_dsub>
 800b6aa:	3530      	adds	r5, #48	@ 0x30
 800b6ac:	f806 5b01 	strb.w	r5, [r6], #1
 800b6b0:	4602      	mov	r2, r0
 800b6b2:	460b      	mov	r3, r1
 800b6b4:	42a6      	cmp	r6, r4
 800b6b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b6ba:	f04f 0200 	mov.w	r2, #0
 800b6be:	d124      	bne.n	800b70a <_dtoa_r+0x662>
 800b6c0:	4bac      	ldr	r3, [pc, #688]	@ (800b974 <_dtoa_r+0x8cc>)
 800b6c2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800b6c6:	f7f4 fde9 	bl	800029c <__adddf3>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6d2:	f7f5 fa29 	bl	8000b28 <__aeabi_dcmpgt>
 800b6d6:	2800      	cmp	r0, #0
 800b6d8:	d145      	bne.n	800b766 <_dtoa_r+0x6be>
 800b6da:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800b6de:	49a5      	ldr	r1, [pc, #660]	@ (800b974 <_dtoa_r+0x8cc>)
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	f7f4 fdd9 	bl	8000298 <__aeabi_dsub>
 800b6e6:	4602      	mov	r2, r0
 800b6e8:	460b      	mov	r3, r1
 800b6ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6ee:	f7f5 f9fd 	bl	8000aec <__aeabi_dcmplt>
 800b6f2:	2800      	cmp	r0, #0
 800b6f4:	f43f aef5 	beq.w	800b4e2 <_dtoa_r+0x43a>
 800b6f8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800b6fa:	1e73      	subs	r3, r6, #1
 800b6fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800b6fe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b702:	2b30      	cmp	r3, #48	@ 0x30
 800b704:	d0f8      	beq.n	800b6f8 <_dtoa_r+0x650>
 800b706:	9f04      	ldr	r7, [sp, #16]
 800b708:	e73e      	b.n	800b588 <_dtoa_r+0x4e0>
 800b70a:	4b9b      	ldr	r3, [pc, #620]	@ (800b978 <_dtoa_r+0x8d0>)
 800b70c:	f7f4 ff7c 	bl	8000608 <__aeabi_dmul>
 800b710:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b714:	e7bc      	b.n	800b690 <_dtoa_r+0x5e8>
 800b716:	d10c      	bne.n	800b732 <_dtoa_r+0x68a>
 800b718:	4b98      	ldr	r3, [pc, #608]	@ (800b97c <_dtoa_r+0x8d4>)
 800b71a:	2200      	movs	r2, #0
 800b71c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b720:	f7f4 ff72 	bl	8000608 <__aeabi_dmul>
 800b724:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b728:	f7f5 f9f4 	bl	8000b14 <__aeabi_dcmpge>
 800b72c:	2800      	cmp	r0, #0
 800b72e:	f000 8157 	beq.w	800b9e0 <_dtoa_r+0x938>
 800b732:	2400      	movs	r4, #0
 800b734:	4625      	mov	r5, r4
 800b736:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b738:	43db      	mvns	r3, r3
 800b73a:	9304      	str	r3, [sp, #16]
 800b73c:	4656      	mov	r6, sl
 800b73e:	2700      	movs	r7, #0
 800b740:	4621      	mov	r1, r4
 800b742:	4658      	mov	r0, fp
 800b744:	f000 fbb4 	bl	800beb0 <_Bfree>
 800b748:	2d00      	cmp	r5, #0
 800b74a:	d0dc      	beq.n	800b706 <_dtoa_r+0x65e>
 800b74c:	b12f      	cbz	r7, 800b75a <_dtoa_r+0x6b2>
 800b74e:	42af      	cmp	r7, r5
 800b750:	d003      	beq.n	800b75a <_dtoa_r+0x6b2>
 800b752:	4639      	mov	r1, r7
 800b754:	4658      	mov	r0, fp
 800b756:	f000 fbab 	bl	800beb0 <_Bfree>
 800b75a:	4629      	mov	r1, r5
 800b75c:	4658      	mov	r0, fp
 800b75e:	f000 fba7 	bl	800beb0 <_Bfree>
 800b762:	e7d0      	b.n	800b706 <_dtoa_r+0x65e>
 800b764:	9704      	str	r7, [sp, #16]
 800b766:	4633      	mov	r3, r6
 800b768:	461e      	mov	r6, r3
 800b76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b76e:	2a39      	cmp	r2, #57	@ 0x39
 800b770:	d107      	bne.n	800b782 <_dtoa_r+0x6da>
 800b772:	459a      	cmp	sl, r3
 800b774:	d1f8      	bne.n	800b768 <_dtoa_r+0x6c0>
 800b776:	9a04      	ldr	r2, [sp, #16]
 800b778:	3201      	adds	r2, #1
 800b77a:	9204      	str	r2, [sp, #16]
 800b77c:	2230      	movs	r2, #48	@ 0x30
 800b77e:	f88a 2000 	strb.w	r2, [sl]
 800b782:	781a      	ldrb	r2, [r3, #0]
 800b784:	3201      	adds	r2, #1
 800b786:	701a      	strb	r2, [r3, #0]
 800b788:	e7bd      	b.n	800b706 <_dtoa_r+0x65e>
 800b78a:	4b7b      	ldr	r3, [pc, #492]	@ (800b978 <_dtoa_r+0x8d0>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	f7f4 ff3b 	bl	8000608 <__aeabi_dmul>
 800b792:	2200      	movs	r2, #0
 800b794:	2300      	movs	r3, #0
 800b796:	4604      	mov	r4, r0
 800b798:	460d      	mov	r5, r1
 800b79a:	f7f5 f99d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b79e:	2800      	cmp	r0, #0
 800b7a0:	f43f aebb 	beq.w	800b51a <_dtoa_r+0x472>
 800b7a4:	e6f0      	b.n	800b588 <_dtoa_r+0x4e0>
 800b7a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	f000 80db 	beq.w	800b964 <_dtoa_r+0x8bc>
 800b7ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b7b0:	2a01      	cmp	r2, #1
 800b7b2:	f300 80bf 	bgt.w	800b934 <_dtoa_r+0x88c>
 800b7b6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800b7b8:	2a00      	cmp	r2, #0
 800b7ba:	f000 80b7 	beq.w	800b92c <_dtoa_r+0x884>
 800b7be:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b7c2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b7c4:	4646      	mov	r6, r8
 800b7c6:	9a08      	ldr	r2, [sp, #32]
 800b7c8:	2101      	movs	r1, #1
 800b7ca:	441a      	add	r2, r3
 800b7cc:	4658      	mov	r0, fp
 800b7ce:	4498      	add	r8, r3
 800b7d0:	9208      	str	r2, [sp, #32]
 800b7d2:	f000 fc6b 	bl	800c0ac <__i2b>
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	b15e      	cbz	r6, 800b7f2 <_dtoa_r+0x74a>
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	dd08      	ble.n	800b7f2 <_dtoa_r+0x74a>
 800b7e0:	42b3      	cmp	r3, r6
 800b7e2:	9a08      	ldr	r2, [sp, #32]
 800b7e4:	bfa8      	it	ge
 800b7e6:	4633      	movge	r3, r6
 800b7e8:	eba8 0803 	sub.w	r8, r8, r3
 800b7ec:	1af6      	subs	r6, r6, r3
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	9308      	str	r3, [sp, #32]
 800b7f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b7f4:	b1f3      	cbz	r3, 800b834 <_dtoa_r+0x78c>
 800b7f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f000 80b7 	beq.w	800b96c <_dtoa_r+0x8c4>
 800b7fe:	b18c      	cbz	r4, 800b824 <_dtoa_r+0x77c>
 800b800:	4629      	mov	r1, r5
 800b802:	4622      	mov	r2, r4
 800b804:	4658      	mov	r0, fp
 800b806:	f000 fd11 	bl	800c22c <__pow5mult>
 800b80a:	464a      	mov	r2, r9
 800b80c:	4601      	mov	r1, r0
 800b80e:	4605      	mov	r5, r0
 800b810:	4658      	mov	r0, fp
 800b812:	f000 fc61 	bl	800c0d8 <__multiply>
 800b816:	4649      	mov	r1, r9
 800b818:	9004      	str	r0, [sp, #16]
 800b81a:	4658      	mov	r0, fp
 800b81c:	f000 fb48 	bl	800beb0 <_Bfree>
 800b820:	9b04      	ldr	r3, [sp, #16]
 800b822:	4699      	mov	r9, r3
 800b824:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b826:	1b1a      	subs	r2, r3, r4
 800b828:	d004      	beq.n	800b834 <_dtoa_r+0x78c>
 800b82a:	4649      	mov	r1, r9
 800b82c:	4658      	mov	r0, fp
 800b82e:	f000 fcfd 	bl	800c22c <__pow5mult>
 800b832:	4681      	mov	r9, r0
 800b834:	2101      	movs	r1, #1
 800b836:	4658      	mov	r0, fp
 800b838:	f000 fc38 	bl	800c0ac <__i2b>
 800b83c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b83e:	4604      	mov	r4, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 81cf 	beq.w	800bbe4 <_dtoa_r+0xb3c>
 800b846:	461a      	mov	r2, r3
 800b848:	4601      	mov	r1, r0
 800b84a:	4658      	mov	r0, fp
 800b84c:	f000 fcee 	bl	800c22c <__pow5mult>
 800b850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b852:	2b01      	cmp	r3, #1
 800b854:	4604      	mov	r4, r0
 800b856:	f300 8095 	bgt.w	800b984 <_dtoa_r+0x8dc>
 800b85a:	9b02      	ldr	r3, [sp, #8]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f040 8087 	bne.w	800b970 <_dtoa_r+0x8c8>
 800b862:	9b03      	ldr	r3, [sp, #12]
 800b864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b868:	2b00      	cmp	r3, #0
 800b86a:	f040 8089 	bne.w	800b980 <_dtoa_r+0x8d8>
 800b86e:	9b03      	ldr	r3, [sp, #12]
 800b870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b874:	0d1b      	lsrs	r3, r3, #20
 800b876:	051b      	lsls	r3, r3, #20
 800b878:	b12b      	cbz	r3, 800b886 <_dtoa_r+0x7de>
 800b87a:	9b08      	ldr	r3, [sp, #32]
 800b87c:	3301      	adds	r3, #1
 800b87e:	9308      	str	r3, [sp, #32]
 800b880:	f108 0801 	add.w	r8, r8, #1
 800b884:	2301      	movs	r3, #1
 800b886:	930a      	str	r3, [sp, #40]	@ 0x28
 800b888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 81b0 	beq.w	800bbf0 <_dtoa_r+0xb48>
 800b890:	6923      	ldr	r3, [r4, #16]
 800b892:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b896:	6918      	ldr	r0, [r3, #16]
 800b898:	f000 fbbc 	bl	800c014 <__hi0bits>
 800b89c:	f1c0 0020 	rsb	r0, r0, #32
 800b8a0:	9b08      	ldr	r3, [sp, #32]
 800b8a2:	4418      	add	r0, r3
 800b8a4:	f010 001f 	ands.w	r0, r0, #31
 800b8a8:	d077      	beq.n	800b99a <_dtoa_r+0x8f2>
 800b8aa:	f1c0 0320 	rsb	r3, r0, #32
 800b8ae:	2b04      	cmp	r3, #4
 800b8b0:	dd6b      	ble.n	800b98a <_dtoa_r+0x8e2>
 800b8b2:	9b08      	ldr	r3, [sp, #32]
 800b8b4:	f1c0 001c 	rsb	r0, r0, #28
 800b8b8:	4403      	add	r3, r0
 800b8ba:	4480      	add	r8, r0
 800b8bc:	4406      	add	r6, r0
 800b8be:	9308      	str	r3, [sp, #32]
 800b8c0:	f1b8 0f00 	cmp.w	r8, #0
 800b8c4:	dd05      	ble.n	800b8d2 <_dtoa_r+0x82a>
 800b8c6:	4649      	mov	r1, r9
 800b8c8:	4642      	mov	r2, r8
 800b8ca:	4658      	mov	r0, fp
 800b8cc:	f000 fd08 	bl	800c2e0 <__lshift>
 800b8d0:	4681      	mov	r9, r0
 800b8d2:	9b08      	ldr	r3, [sp, #32]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	dd05      	ble.n	800b8e4 <_dtoa_r+0x83c>
 800b8d8:	4621      	mov	r1, r4
 800b8da:	461a      	mov	r2, r3
 800b8dc:	4658      	mov	r0, fp
 800b8de:	f000 fcff 	bl	800c2e0 <__lshift>
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d059      	beq.n	800b99e <_dtoa_r+0x8f6>
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	4648      	mov	r0, r9
 800b8ee:	f000 fd63 	bl	800c3b8 <__mcmp>
 800b8f2:	2800      	cmp	r0, #0
 800b8f4:	da53      	bge.n	800b99e <_dtoa_r+0x8f6>
 800b8f6:	1e7b      	subs	r3, r7, #1
 800b8f8:	9304      	str	r3, [sp, #16]
 800b8fa:	4649      	mov	r1, r9
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	220a      	movs	r2, #10
 800b900:	4658      	mov	r0, fp
 800b902:	f000 faf7 	bl	800bef4 <__multadd>
 800b906:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b908:	4681      	mov	r9, r0
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	f000 8172 	beq.w	800bbf4 <_dtoa_r+0xb4c>
 800b910:	2300      	movs	r3, #0
 800b912:	4629      	mov	r1, r5
 800b914:	220a      	movs	r2, #10
 800b916:	4658      	mov	r0, fp
 800b918:	f000 faec 	bl	800bef4 <__multadd>
 800b91c:	9b00      	ldr	r3, [sp, #0]
 800b91e:	2b00      	cmp	r3, #0
 800b920:	4605      	mov	r5, r0
 800b922:	dc67      	bgt.n	800b9f4 <_dtoa_r+0x94c>
 800b924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b926:	2b02      	cmp	r3, #2
 800b928:	dc41      	bgt.n	800b9ae <_dtoa_r+0x906>
 800b92a:	e063      	b.n	800b9f4 <_dtoa_r+0x94c>
 800b92c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800b92e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b932:	e746      	b.n	800b7c2 <_dtoa_r+0x71a>
 800b934:	9b07      	ldr	r3, [sp, #28]
 800b936:	1e5c      	subs	r4, r3, #1
 800b938:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b93a:	42a3      	cmp	r3, r4
 800b93c:	bfbf      	itttt	lt
 800b93e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b940:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800b942:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b944:	1ae3      	sublt	r3, r4, r3
 800b946:	bfb4      	ite	lt
 800b948:	18d2      	addlt	r2, r2, r3
 800b94a:	1b1c      	subge	r4, r3, r4
 800b94c:	9b07      	ldr	r3, [sp, #28]
 800b94e:	bfbc      	itt	lt
 800b950:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800b952:	2400      	movlt	r4, #0
 800b954:	2b00      	cmp	r3, #0
 800b956:	bfb5      	itete	lt
 800b958:	eba8 0603 	sublt.w	r6, r8, r3
 800b95c:	9b07      	ldrge	r3, [sp, #28]
 800b95e:	2300      	movlt	r3, #0
 800b960:	4646      	movge	r6, r8
 800b962:	e730      	b.n	800b7c6 <_dtoa_r+0x71e>
 800b964:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b966:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b968:	4646      	mov	r6, r8
 800b96a:	e735      	b.n	800b7d8 <_dtoa_r+0x730>
 800b96c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b96e:	e75c      	b.n	800b82a <_dtoa_r+0x782>
 800b970:	2300      	movs	r3, #0
 800b972:	e788      	b.n	800b886 <_dtoa_r+0x7de>
 800b974:	3fe00000 	.word	0x3fe00000
 800b978:	40240000 	.word	0x40240000
 800b97c:	40140000 	.word	0x40140000
 800b980:	9b02      	ldr	r3, [sp, #8]
 800b982:	e780      	b.n	800b886 <_dtoa_r+0x7de>
 800b984:	2300      	movs	r3, #0
 800b986:	930a      	str	r3, [sp, #40]	@ 0x28
 800b988:	e782      	b.n	800b890 <_dtoa_r+0x7e8>
 800b98a:	d099      	beq.n	800b8c0 <_dtoa_r+0x818>
 800b98c:	9a08      	ldr	r2, [sp, #32]
 800b98e:	331c      	adds	r3, #28
 800b990:	441a      	add	r2, r3
 800b992:	4498      	add	r8, r3
 800b994:	441e      	add	r6, r3
 800b996:	9208      	str	r2, [sp, #32]
 800b998:	e792      	b.n	800b8c0 <_dtoa_r+0x818>
 800b99a:	4603      	mov	r3, r0
 800b99c:	e7f6      	b.n	800b98c <_dtoa_r+0x8e4>
 800b99e:	9b07      	ldr	r3, [sp, #28]
 800b9a0:	9704      	str	r7, [sp, #16]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	dc20      	bgt.n	800b9e8 <_dtoa_r+0x940>
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	dd1e      	ble.n	800b9ec <_dtoa_r+0x944>
 800b9ae:	9b00      	ldr	r3, [sp, #0]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f47f aec0 	bne.w	800b736 <_dtoa_r+0x68e>
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	2205      	movs	r2, #5
 800b9ba:	4658      	mov	r0, fp
 800b9bc:	f000 fa9a 	bl	800bef4 <__multadd>
 800b9c0:	4601      	mov	r1, r0
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	4648      	mov	r0, r9
 800b9c6:	f000 fcf7 	bl	800c3b8 <__mcmp>
 800b9ca:	2800      	cmp	r0, #0
 800b9cc:	f77f aeb3 	ble.w	800b736 <_dtoa_r+0x68e>
 800b9d0:	4656      	mov	r6, sl
 800b9d2:	2331      	movs	r3, #49	@ 0x31
 800b9d4:	f806 3b01 	strb.w	r3, [r6], #1
 800b9d8:	9b04      	ldr	r3, [sp, #16]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	9304      	str	r3, [sp, #16]
 800b9de:	e6ae      	b.n	800b73e <_dtoa_r+0x696>
 800b9e0:	9c07      	ldr	r4, [sp, #28]
 800b9e2:	9704      	str	r7, [sp, #16]
 800b9e4:	4625      	mov	r5, r4
 800b9e6:	e7f3      	b.n	800b9d0 <_dtoa_r+0x928>
 800b9e8:	9b07      	ldr	r3, [sp, #28]
 800b9ea:	9300      	str	r3, [sp, #0]
 800b9ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	f000 8104 	beq.w	800bbfc <_dtoa_r+0xb54>
 800b9f4:	2e00      	cmp	r6, #0
 800b9f6:	dd05      	ble.n	800ba04 <_dtoa_r+0x95c>
 800b9f8:	4629      	mov	r1, r5
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	4658      	mov	r0, fp
 800b9fe:	f000 fc6f 	bl	800c2e0 <__lshift>
 800ba02:	4605      	mov	r5, r0
 800ba04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d05a      	beq.n	800bac0 <_dtoa_r+0xa18>
 800ba0a:	6869      	ldr	r1, [r5, #4]
 800ba0c:	4658      	mov	r0, fp
 800ba0e:	f000 fa0f 	bl	800be30 <_Balloc>
 800ba12:	4606      	mov	r6, r0
 800ba14:	b928      	cbnz	r0, 800ba22 <_dtoa_r+0x97a>
 800ba16:	4b84      	ldr	r3, [pc, #528]	@ (800bc28 <_dtoa_r+0xb80>)
 800ba18:	4602      	mov	r2, r0
 800ba1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ba1e:	f7ff bb5a 	b.w	800b0d6 <_dtoa_r+0x2e>
 800ba22:	692a      	ldr	r2, [r5, #16]
 800ba24:	3202      	adds	r2, #2
 800ba26:	0092      	lsls	r2, r2, #2
 800ba28:	f105 010c 	add.w	r1, r5, #12
 800ba2c:	300c      	adds	r0, #12
 800ba2e:	f002 faf1 	bl	800e014 <memcpy>
 800ba32:	2201      	movs	r2, #1
 800ba34:	4631      	mov	r1, r6
 800ba36:	4658      	mov	r0, fp
 800ba38:	f000 fc52 	bl	800c2e0 <__lshift>
 800ba3c:	f10a 0301 	add.w	r3, sl, #1
 800ba40:	9307      	str	r3, [sp, #28]
 800ba42:	9b00      	ldr	r3, [sp, #0]
 800ba44:	4453      	add	r3, sl
 800ba46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba48:	9b02      	ldr	r3, [sp, #8]
 800ba4a:	f003 0301 	and.w	r3, r3, #1
 800ba4e:	462f      	mov	r7, r5
 800ba50:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba52:	4605      	mov	r5, r0
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	4621      	mov	r1, r4
 800ba58:	3b01      	subs	r3, #1
 800ba5a:	4648      	mov	r0, r9
 800ba5c:	9300      	str	r3, [sp, #0]
 800ba5e:	f7ff fa99 	bl	800af94 <quorem>
 800ba62:	4639      	mov	r1, r7
 800ba64:	9002      	str	r0, [sp, #8]
 800ba66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ba6a:	4648      	mov	r0, r9
 800ba6c:	f000 fca4 	bl	800c3b8 <__mcmp>
 800ba70:	462a      	mov	r2, r5
 800ba72:	9008      	str	r0, [sp, #32]
 800ba74:	4621      	mov	r1, r4
 800ba76:	4658      	mov	r0, fp
 800ba78:	f000 fcba 	bl	800c3f0 <__mdiff>
 800ba7c:	68c2      	ldr	r2, [r0, #12]
 800ba7e:	4606      	mov	r6, r0
 800ba80:	bb02      	cbnz	r2, 800bac4 <_dtoa_r+0xa1c>
 800ba82:	4601      	mov	r1, r0
 800ba84:	4648      	mov	r0, r9
 800ba86:	f000 fc97 	bl	800c3b8 <__mcmp>
 800ba8a:	4602      	mov	r2, r0
 800ba8c:	4631      	mov	r1, r6
 800ba8e:	4658      	mov	r0, fp
 800ba90:	920e      	str	r2, [sp, #56]	@ 0x38
 800ba92:	f000 fa0d 	bl	800beb0 <_Bfree>
 800ba96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ba98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ba9a:	9e07      	ldr	r6, [sp, #28]
 800ba9c:	ea43 0102 	orr.w	r1, r3, r2
 800baa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800baa2:	4319      	orrs	r1, r3
 800baa4:	d110      	bne.n	800bac8 <_dtoa_r+0xa20>
 800baa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800baaa:	d029      	beq.n	800bb00 <_dtoa_r+0xa58>
 800baac:	9b08      	ldr	r3, [sp, #32]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	dd02      	ble.n	800bab8 <_dtoa_r+0xa10>
 800bab2:	9b02      	ldr	r3, [sp, #8]
 800bab4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800bab8:	9b00      	ldr	r3, [sp, #0]
 800baba:	f883 8000 	strb.w	r8, [r3]
 800babe:	e63f      	b.n	800b740 <_dtoa_r+0x698>
 800bac0:	4628      	mov	r0, r5
 800bac2:	e7bb      	b.n	800ba3c <_dtoa_r+0x994>
 800bac4:	2201      	movs	r2, #1
 800bac6:	e7e1      	b.n	800ba8c <_dtoa_r+0x9e4>
 800bac8:	9b08      	ldr	r3, [sp, #32]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	db04      	blt.n	800bad8 <_dtoa_r+0xa30>
 800bace:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bad0:	430b      	orrs	r3, r1
 800bad2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800bad4:	430b      	orrs	r3, r1
 800bad6:	d120      	bne.n	800bb1a <_dtoa_r+0xa72>
 800bad8:	2a00      	cmp	r2, #0
 800bada:	dded      	ble.n	800bab8 <_dtoa_r+0xa10>
 800badc:	4649      	mov	r1, r9
 800bade:	2201      	movs	r2, #1
 800bae0:	4658      	mov	r0, fp
 800bae2:	f000 fbfd 	bl	800c2e0 <__lshift>
 800bae6:	4621      	mov	r1, r4
 800bae8:	4681      	mov	r9, r0
 800baea:	f000 fc65 	bl	800c3b8 <__mcmp>
 800baee:	2800      	cmp	r0, #0
 800baf0:	dc03      	bgt.n	800bafa <_dtoa_r+0xa52>
 800baf2:	d1e1      	bne.n	800bab8 <_dtoa_r+0xa10>
 800baf4:	f018 0f01 	tst.w	r8, #1
 800baf8:	d0de      	beq.n	800bab8 <_dtoa_r+0xa10>
 800bafa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bafe:	d1d8      	bne.n	800bab2 <_dtoa_r+0xa0a>
 800bb00:	9a00      	ldr	r2, [sp, #0]
 800bb02:	2339      	movs	r3, #57	@ 0x39
 800bb04:	7013      	strb	r3, [r2, #0]
 800bb06:	4633      	mov	r3, r6
 800bb08:	461e      	mov	r6, r3
 800bb0a:	3b01      	subs	r3, #1
 800bb0c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800bb10:	2a39      	cmp	r2, #57	@ 0x39
 800bb12:	d052      	beq.n	800bbba <_dtoa_r+0xb12>
 800bb14:	3201      	adds	r2, #1
 800bb16:	701a      	strb	r2, [r3, #0]
 800bb18:	e612      	b.n	800b740 <_dtoa_r+0x698>
 800bb1a:	2a00      	cmp	r2, #0
 800bb1c:	dd07      	ble.n	800bb2e <_dtoa_r+0xa86>
 800bb1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800bb22:	d0ed      	beq.n	800bb00 <_dtoa_r+0xa58>
 800bb24:	9a00      	ldr	r2, [sp, #0]
 800bb26:	f108 0301 	add.w	r3, r8, #1
 800bb2a:	7013      	strb	r3, [r2, #0]
 800bb2c:	e608      	b.n	800b740 <_dtoa_r+0x698>
 800bb2e:	9b07      	ldr	r3, [sp, #28]
 800bb30:	9a07      	ldr	r2, [sp, #28]
 800bb32:	f803 8c01 	strb.w	r8, [r3, #-1]
 800bb36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bb38:	4293      	cmp	r3, r2
 800bb3a:	d028      	beq.n	800bb8e <_dtoa_r+0xae6>
 800bb3c:	4649      	mov	r1, r9
 800bb3e:	2300      	movs	r3, #0
 800bb40:	220a      	movs	r2, #10
 800bb42:	4658      	mov	r0, fp
 800bb44:	f000 f9d6 	bl	800bef4 <__multadd>
 800bb48:	42af      	cmp	r7, r5
 800bb4a:	4681      	mov	r9, r0
 800bb4c:	f04f 0300 	mov.w	r3, #0
 800bb50:	f04f 020a 	mov.w	r2, #10
 800bb54:	4639      	mov	r1, r7
 800bb56:	4658      	mov	r0, fp
 800bb58:	d107      	bne.n	800bb6a <_dtoa_r+0xac2>
 800bb5a:	f000 f9cb 	bl	800bef4 <__multadd>
 800bb5e:	4607      	mov	r7, r0
 800bb60:	4605      	mov	r5, r0
 800bb62:	9b07      	ldr	r3, [sp, #28]
 800bb64:	3301      	adds	r3, #1
 800bb66:	9307      	str	r3, [sp, #28]
 800bb68:	e774      	b.n	800ba54 <_dtoa_r+0x9ac>
 800bb6a:	f000 f9c3 	bl	800bef4 <__multadd>
 800bb6e:	4629      	mov	r1, r5
 800bb70:	4607      	mov	r7, r0
 800bb72:	2300      	movs	r3, #0
 800bb74:	220a      	movs	r2, #10
 800bb76:	4658      	mov	r0, fp
 800bb78:	f000 f9bc 	bl	800bef4 <__multadd>
 800bb7c:	4605      	mov	r5, r0
 800bb7e:	e7f0      	b.n	800bb62 <_dtoa_r+0xaba>
 800bb80:	9b00      	ldr	r3, [sp, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	bfcc      	ite	gt
 800bb86:	461e      	movgt	r6, r3
 800bb88:	2601      	movle	r6, #1
 800bb8a:	4456      	add	r6, sl
 800bb8c:	2700      	movs	r7, #0
 800bb8e:	4649      	mov	r1, r9
 800bb90:	2201      	movs	r2, #1
 800bb92:	4658      	mov	r0, fp
 800bb94:	f000 fba4 	bl	800c2e0 <__lshift>
 800bb98:	4621      	mov	r1, r4
 800bb9a:	4681      	mov	r9, r0
 800bb9c:	f000 fc0c 	bl	800c3b8 <__mcmp>
 800bba0:	2800      	cmp	r0, #0
 800bba2:	dcb0      	bgt.n	800bb06 <_dtoa_r+0xa5e>
 800bba4:	d102      	bne.n	800bbac <_dtoa_r+0xb04>
 800bba6:	f018 0f01 	tst.w	r8, #1
 800bbaa:	d1ac      	bne.n	800bb06 <_dtoa_r+0xa5e>
 800bbac:	4633      	mov	r3, r6
 800bbae:	461e      	mov	r6, r3
 800bbb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bbb4:	2a30      	cmp	r2, #48	@ 0x30
 800bbb6:	d0fa      	beq.n	800bbae <_dtoa_r+0xb06>
 800bbb8:	e5c2      	b.n	800b740 <_dtoa_r+0x698>
 800bbba:	459a      	cmp	sl, r3
 800bbbc:	d1a4      	bne.n	800bb08 <_dtoa_r+0xa60>
 800bbbe:	9b04      	ldr	r3, [sp, #16]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	9304      	str	r3, [sp, #16]
 800bbc4:	2331      	movs	r3, #49	@ 0x31
 800bbc6:	f88a 3000 	strb.w	r3, [sl]
 800bbca:	e5b9      	b.n	800b740 <_dtoa_r+0x698>
 800bbcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800bc2c <_dtoa_r+0xb84>
 800bbd2:	b11b      	cbz	r3, 800bbdc <_dtoa_r+0xb34>
 800bbd4:	f10a 0308 	add.w	r3, sl, #8
 800bbd8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbda:	6013      	str	r3, [r2, #0]
 800bbdc:	4650      	mov	r0, sl
 800bbde:	b019      	add	sp, #100	@ 0x64
 800bbe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbe6:	2b01      	cmp	r3, #1
 800bbe8:	f77f ae37 	ble.w	800b85a <_dtoa_r+0x7b2>
 800bbec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800bbee:	930a      	str	r3, [sp, #40]	@ 0x28
 800bbf0:	2001      	movs	r0, #1
 800bbf2:	e655      	b.n	800b8a0 <_dtoa_r+0x7f8>
 800bbf4:	9b00      	ldr	r3, [sp, #0]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	f77f aed6 	ble.w	800b9a8 <_dtoa_r+0x900>
 800bbfc:	4656      	mov	r6, sl
 800bbfe:	4621      	mov	r1, r4
 800bc00:	4648      	mov	r0, r9
 800bc02:	f7ff f9c7 	bl	800af94 <quorem>
 800bc06:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800bc0a:	f806 8b01 	strb.w	r8, [r6], #1
 800bc0e:	9b00      	ldr	r3, [sp, #0]
 800bc10:	eba6 020a 	sub.w	r2, r6, sl
 800bc14:	4293      	cmp	r3, r2
 800bc16:	ddb3      	ble.n	800bb80 <_dtoa_r+0xad8>
 800bc18:	4649      	mov	r1, r9
 800bc1a:	2300      	movs	r3, #0
 800bc1c:	220a      	movs	r2, #10
 800bc1e:	4658      	mov	r0, fp
 800bc20:	f000 f968 	bl	800bef4 <__multadd>
 800bc24:	4681      	mov	r9, r0
 800bc26:	e7ea      	b.n	800bbfe <_dtoa_r+0xb56>
 800bc28:	0800fea3 	.word	0x0800fea3
 800bc2c:	0800fe27 	.word	0x0800fe27

0800bc30 <_free_r>:
 800bc30:	b538      	push	{r3, r4, r5, lr}
 800bc32:	4605      	mov	r5, r0
 800bc34:	2900      	cmp	r1, #0
 800bc36:	d041      	beq.n	800bcbc <_free_r+0x8c>
 800bc38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc3c:	1f0c      	subs	r4, r1, #4
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	bfb8      	it	lt
 800bc42:	18e4      	addlt	r4, r4, r3
 800bc44:	f000 f8e8 	bl	800be18 <__malloc_lock>
 800bc48:	4a1d      	ldr	r2, [pc, #116]	@ (800bcc0 <_free_r+0x90>)
 800bc4a:	6813      	ldr	r3, [r2, #0]
 800bc4c:	b933      	cbnz	r3, 800bc5c <_free_r+0x2c>
 800bc4e:	6063      	str	r3, [r4, #4]
 800bc50:	6014      	str	r4, [r2, #0]
 800bc52:	4628      	mov	r0, r5
 800bc54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc58:	f000 b8e4 	b.w	800be24 <__malloc_unlock>
 800bc5c:	42a3      	cmp	r3, r4
 800bc5e:	d908      	bls.n	800bc72 <_free_r+0x42>
 800bc60:	6820      	ldr	r0, [r4, #0]
 800bc62:	1821      	adds	r1, r4, r0
 800bc64:	428b      	cmp	r3, r1
 800bc66:	bf01      	itttt	eq
 800bc68:	6819      	ldreq	r1, [r3, #0]
 800bc6a:	685b      	ldreq	r3, [r3, #4]
 800bc6c:	1809      	addeq	r1, r1, r0
 800bc6e:	6021      	streq	r1, [r4, #0]
 800bc70:	e7ed      	b.n	800bc4e <_free_r+0x1e>
 800bc72:	461a      	mov	r2, r3
 800bc74:	685b      	ldr	r3, [r3, #4]
 800bc76:	b10b      	cbz	r3, 800bc7c <_free_r+0x4c>
 800bc78:	42a3      	cmp	r3, r4
 800bc7a:	d9fa      	bls.n	800bc72 <_free_r+0x42>
 800bc7c:	6811      	ldr	r1, [r2, #0]
 800bc7e:	1850      	adds	r0, r2, r1
 800bc80:	42a0      	cmp	r0, r4
 800bc82:	d10b      	bne.n	800bc9c <_free_r+0x6c>
 800bc84:	6820      	ldr	r0, [r4, #0]
 800bc86:	4401      	add	r1, r0
 800bc88:	1850      	adds	r0, r2, r1
 800bc8a:	4283      	cmp	r3, r0
 800bc8c:	6011      	str	r1, [r2, #0]
 800bc8e:	d1e0      	bne.n	800bc52 <_free_r+0x22>
 800bc90:	6818      	ldr	r0, [r3, #0]
 800bc92:	685b      	ldr	r3, [r3, #4]
 800bc94:	6053      	str	r3, [r2, #4]
 800bc96:	4408      	add	r0, r1
 800bc98:	6010      	str	r0, [r2, #0]
 800bc9a:	e7da      	b.n	800bc52 <_free_r+0x22>
 800bc9c:	d902      	bls.n	800bca4 <_free_r+0x74>
 800bc9e:	230c      	movs	r3, #12
 800bca0:	602b      	str	r3, [r5, #0]
 800bca2:	e7d6      	b.n	800bc52 <_free_r+0x22>
 800bca4:	6820      	ldr	r0, [r4, #0]
 800bca6:	1821      	adds	r1, r4, r0
 800bca8:	428b      	cmp	r3, r1
 800bcaa:	bf04      	itt	eq
 800bcac:	6819      	ldreq	r1, [r3, #0]
 800bcae:	685b      	ldreq	r3, [r3, #4]
 800bcb0:	6063      	str	r3, [r4, #4]
 800bcb2:	bf04      	itt	eq
 800bcb4:	1809      	addeq	r1, r1, r0
 800bcb6:	6021      	streq	r1, [r4, #0]
 800bcb8:	6054      	str	r4, [r2, #4]
 800bcba:	e7ca      	b.n	800bc52 <_free_r+0x22>
 800bcbc:	bd38      	pop	{r3, r4, r5, pc}
 800bcbe:	bf00      	nop
 800bcc0:	2000089c 	.word	0x2000089c

0800bcc4 <malloc>:
 800bcc4:	4b02      	ldr	r3, [pc, #8]	@ (800bcd0 <malloc+0xc>)
 800bcc6:	4601      	mov	r1, r0
 800bcc8:	6818      	ldr	r0, [r3, #0]
 800bcca:	f000 b825 	b.w	800bd18 <_malloc_r>
 800bcce:	bf00      	nop
 800bcd0:	2000001c 	.word	0x2000001c

0800bcd4 <sbrk_aligned>:
 800bcd4:	b570      	push	{r4, r5, r6, lr}
 800bcd6:	4e0f      	ldr	r6, [pc, #60]	@ (800bd14 <sbrk_aligned+0x40>)
 800bcd8:	460c      	mov	r4, r1
 800bcda:	6831      	ldr	r1, [r6, #0]
 800bcdc:	4605      	mov	r5, r0
 800bcde:	b911      	cbnz	r1, 800bce6 <sbrk_aligned+0x12>
 800bce0:	f002 f988 	bl	800dff4 <_sbrk_r>
 800bce4:	6030      	str	r0, [r6, #0]
 800bce6:	4621      	mov	r1, r4
 800bce8:	4628      	mov	r0, r5
 800bcea:	f002 f983 	bl	800dff4 <_sbrk_r>
 800bcee:	1c43      	adds	r3, r0, #1
 800bcf0:	d103      	bne.n	800bcfa <sbrk_aligned+0x26>
 800bcf2:	f04f 34ff 	mov.w	r4, #4294967295
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	bd70      	pop	{r4, r5, r6, pc}
 800bcfa:	1cc4      	adds	r4, r0, #3
 800bcfc:	f024 0403 	bic.w	r4, r4, #3
 800bd00:	42a0      	cmp	r0, r4
 800bd02:	d0f8      	beq.n	800bcf6 <sbrk_aligned+0x22>
 800bd04:	1a21      	subs	r1, r4, r0
 800bd06:	4628      	mov	r0, r5
 800bd08:	f002 f974 	bl	800dff4 <_sbrk_r>
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	d1f2      	bne.n	800bcf6 <sbrk_aligned+0x22>
 800bd10:	e7ef      	b.n	800bcf2 <sbrk_aligned+0x1e>
 800bd12:	bf00      	nop
 800bd14:	20000898 	.word	0x20000898

0800bd18 <_malloc_r>:
 800bd18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd1c:	1ccd      	adds	r5, r1, #3
 800bd1e:	f025 0503 	bic.w	r5, r5, #3
 800bd22:	3508      	adds	r5, #8
 800bd24:	2d0c      	cmp	r5, #12
 800bd26:	bf38      	it	cc
 800bd28:	250c      	movcc	r5, #12
 800bd2a:	2d00      	cmp	r5, #0
 800bd2c:	4606      	mov	r6, r0
 800bd2e:	db01      	blt.n	800bd34 <_malloc_r+0x1c>
 800bd30:	42a9      	cmp	r1, r5
 800bd32:	d904      	bls.n	800bd3e <_malloc_r+0x26>
 800bd34:	230c      	movs	r3, #12
 800bd36:	6033      	str	r3, [r6, #0]
 800bd38:	2000      	movs	r0, #0
 800bd3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800be14 <_malloc_r+0xfc>
 800bd42:	f000 f869 	bl	800be18 <__malloc_lock>
 800bd46:	f8d8 3000 	ldr.w	r3, [r8]
 800bd4a:	461c      	mov	r4, r3
 800bd4c:	bb44      	cbnz	r4, 800bda0 <_malloc_r+0x88>
 800bd4e:	4629      	mov	r1, r5
 800bd50:	4630      	mov	r0, r6
 800bd52:	f7ff ffbf 	bl	800bcd4 <sbrk_aligned>
 800bd56:	1c43      	adds	r3, r0, #1
 800bd58:	4604      	mov	r4, r0
 800bd5a:	d158      	bne.n	800be0e <_malloc_r+0xf6>
 800bd5c:	f8d8 4000 	ldr.w	r4, [r8]
 800bd60:	4627      	mov	r7, r4
 800bd62:	2f00      	cmp	r7, #0
 800bd64:	d143      	bne.n	800bdee <_malloc_r+0xd6>
 800bd66:	2c00      	cmp	r4, #0
 800bd68:	d04b      	beq.n	800be02 <_malloc_r+0xea>
 800bd6a:	6823      	ldr	r3, [r4, #0]
 800bd6c:	4639      	mov	r1, r7
 800bd6e:	4630      	mov	r0, r6
 800bd70:	eb04 0903 	add.w	r9, r4, r3
 800bd74:	f002 f93e 	bl	800dff4 <_sbrk_r>
 800bd78:	4581      	cmp	r9, r0
 800bd7a:	d142      	bne.n	800be02 <_malloc_r+0xea>
 800bd7c:	6821      	ldr	r1, [r4, #0]
 800bd7e:	1a6d      	subs	r5, r5, r1
 800bd80:	4629      	mov	r1, r5
 800bd82:	4630      	mov	r0, r6
 800bd84:	f7ff ffa6 	bl	800bcd4 <sbrk_aligned>
 800bd88:	3001      	adds	r0, #1
 800bd8a:	d03a      	beq.n	800be02 <_malloc_r+0xea>
 800bd8c:	6823      	ldr	r3, [r4, #0]
 800bd8e:	442b      	add	r3, r5
 800bd90:	6023      	str	r3, [r4, #0]
 800bd92:	f8d8 3000 	ldr.w	r3, [r8]
 800bd96:	685a      	ldr	r2, [r3, #4]
 800bd98:	bb62      	cbnz	r2, 800bdf4 <_malloc_r+0xdc>
 800bd9a:	f8c8 7000 	str.w	r7, [r8]
 800bd9e:	e00f      	b.n	800bdc0 <_malloc_r+0xa8>
 800bda0:	6822      	ldr	r2, [r4, #0]
 800bda2:	1b52      	subs	r2, r2, r5
 800bda4:	d420      	bmi.n	800bde8 <_malloc_r+0xd0>
 800bda6:	2a0b      	cmp	r2, #11
 800bda8:	d917      	bls.n	800bdda <_malloc_r+0xc2>
 800bdaa:	1961      	adds	r1, r4, r5
 800bdac:	42a3      	cmp	r3, r4
 800bdae:	6025      	str	r5, [r4, #0]
 800bdb0:	bf18      	it	ne
 800bdb2:	6059      	strne	r1, [r3, #4]
 800bdb4:	6863      	ldr	r3, [r4, #4]
 800bdb6:	bf08      	it	eq
 800bdb8:	f8c8 1000 	streq.w	r1, [r8]
 800bdbc:	5162      	str	r2, [r4, r5]
 800bdbe:	604b      	str	r3, [r1, #4]
 800bdc0:	4630      	mov	r0, r6
 800bdc2:	f000 f82f 	bl	800be24 <__malloc_unlock>
 800bdc6:	f104 000b 	add.w	r0, r4, #11
 800bdca:	1d23      	adds	r3, r4, #4
 800bdcc:	f020 0007 	bic.w	r0, r0, #7
 800bdd0:	1ac2      	subs	r2, r0, r3
 800bdd2:	bf1c      	itt	ne
 800bdd4:	1a1b      	subne	r3, r3, r0
 800bdd6:	50a3      	strne	r3, [r4, r2]
 800bdd8:	e7af      	b.n	800bd3a <_malloc_r+0x22>
 800bdda:	6862      	ldr	r2, [r4, #4]
 800bddc:	42a3      	cmp	r3, r4
 800bdde:	bf0c      	ite	eq
 800bde0:	f8c8 2000 	streq.w	r2, [r8]
 800bde4:	605a      	strne	r2, [r3, #4]
 800bde6:	e7eb      	b.n	800bdc0 <_malloc_r+0xa8>
 800bde8:	4623      	mov	r3, r4
 800bdea:	6864      	ldr	r4, [r4, #4]
 800bdec:	e7ae      	b.n	800bd4c <_malloc_r+0x34>
 800bdee:	463c      	mov	r4, r7
 800bdf0:	687f      	ldr	r7, [r7, #4]
 800bdf2:	e7b6      	b.n	800bd62 <_malloc_r+0x4a>
 800bdf4:	461a      	mov	r2, r3
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	42a3      	cmp	r3, r4
 800bdfa:	d1fb      	bne.n	800bdf4 <_malloc_r+0xdc>
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	6053      	str	r3, [r2, #4]
 800be00:	e7de      	b.n	800bdc0 <_malloc_r+0xa8>
 800be02:	230c      	movs	r3, #12
 800be04:	6033      	str	r3, [r6, #0]
 800be06:	4630      	mov	r0, r6
 800be08:	f000 f80c 	bl	800be24 <__malloc_unlock>
 800be0c:	e794      	b.n	800bd38 <_malloc_r+0x20>
 800be0e:	6005      	str	r5, [r0, #0]
 800be10:	e7d6      	b.n	800bdc0 <_malloc_r+0xa8>
 800be12:	bf00      	nop
 800be14:	2000089c 	.word	0x2000089c

0800be18 <__malloc_lock>:
 800be18:	4801      	ldr	r0, [pc, #4]	@ (800be20 <__malloc_lock+0x8>)
 800be1a:	f7ff b8b2 	b.w	800af82 <__retarget_lock_acquire_recursive>
 800be1e:	bf00      	nop
 800be20:	20000894 	.word	0x20000894

0800be24 <__malloc_unlock>:
 800be24:	4801      	ldr	r0, [pc, #4]	@ (800be2c <__malloc_unlock+0x8>)
 800be26:	f7ff b8ad 	b.w	800af84 <__retarget_lock_release_recursive>
 800be2a:	bf00      	nop
 800be2c:	20000894 	.word	0x20000894

0800be30 <_Balloc>:
 800be30:	b570      	push	{r4, r5, r6, lr}
 800be32:	69c6      	ldr	r6, [r0, #28]
 800be34:	4604      	mov	r4, r0
 800be36:	460d      	mov	r5, r1
 800be38:	b976      	cbnz	r6, 800be58 <_Balloc+0x28>
 800be3a:	2010      	movs	r0, #16
 800be3c:	f7ff ff42 	bl	800bcc4 <malloc>
 800be40:	4602      	mov	r2, r0
 800be42:	61e0      	str	r0, [r4, #28]
 800be44:	b920      	cbnz	r0, 800be50 <_Balloc+0x20>
 800be46:	4b18      	ldr	r3, [pc, #96]	@ (800bea8 <_Balloc+0x78>)
 800be48:	4818      	ldr	r0, [pc, #96]	@ (800beac <_Balloc+0x7c>)
 800be4a:	216b      	movs	r1, #107	@ 0x6b
 800be4c:	f002 f8f8 	bl	800e040 <__assert_func>
 800be50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800be54:	6006      	str	r6, [r0, #0]
 800be56:	60c6      	str	r6, [r0, #12]
 800be58:	69e6      	ldr	r6, [r4, #28]
 800be5a:	68f3      	ldr	r3, [r6, #12]
 800be5c:	b183      	cbz	r3, 800be80 <_Balloc+0x50>
 800be5e:	69e3      	ldr	r3, [r4, #28]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800be66:	b9b8      	cbnz	r0, 800be98 <_Balloc+0x68>
 800be68:	2101      	movs	r1, #1
 800be6a:	fa01 f605 	lsl.w	r6, r1, r5
 800be6e:	1d72      	adds	r2, r6, #5
 800be70:	0092      	lsls	r2, r2, #2
 800be72:	4620      	mov	r0, r4
 800be74:	f002 f902 	bl	800e07c <_calloc_r>
 800be78:	b160      	cbz	r0, 800be94 <_Balloc+0x64>
 800be7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800be7e:	e00e      	b.n	800be9e <_Balloc+0x6e>
 800be80:	2221      	movs	r2, #33	@ 0x21
 800be82:	2104      	movs	r1, #4
 800be84:	4620      	mov	r0, r4
 800be86:	f002 f8f9 	bl	800e07c <_calloc_r>
 800be8a:	69e3      	ldr	r3, [r4, #28]
 800be8c:	60f0      	str	r0, [r6, #12]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e4      	bne.n	800be5e <_Balloc+0x2e>
 800be94:	2000      	movs	r0, #0
 800be96:	bd70      	pop	{r4, r5, r6, pc}
 800be98:	6802      	ldr	r2, [r0, #0]
 800be9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800be9e:	2300      	movs	r3, #0
 800bea0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bea4:	e7f7      	b.n	800be96 <_Balloc+0x66>
 800bea6:	bf00      	nop
 800bea8:	0800fe34 	.word	0x0800fe34
 800beac:	0800feb4 	.word	0x0800feb4

0800beb0 <_Bfree>:
 800beb0:	b570      	push	{r4, r5, r6, lr}
 800beb2:	69c6      	ldr	r6, [r0, #28]
 800beb4:	4605      	mov	r5, r0
 800beb6:	460c      	mov	r4, r1
 800beb8:	b976      	cbnz	r6, 800bed8 <_Bfree+0x28>
 800beba:	2010      	movs	r0, #16
 800bebc:	f7ff ff02 	bl	800bcc4 <malloc>
 800bec0:	4602      	mov	r2, r0
 800bec2:	61e8      	str	r0, [r5, #28]
 800bec4:	b920      	cbnz	r0, 800bed0 <_Bfree+0x20>
 800bec6:	4b09      	ldr	r3, [pc, #36]	@ (800beec <_Bfree+0x3c>)
 800bec8:	4809      	ldr	r0, [pc, #36]	@ (800bef0 <_Bfree+0x40>)
 800beca:	218f      	movs	r1, #143	@ 0x8f
 800becc:	f002 f8b8 	bl	800e040 <__assert_func>
 800bed0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bed4:	6006      	str	r6, [r0, #0]
 800bed6:	60c6      	str	r6, [r0, #12]
 800bed8:	b13c      	cbz	r4, 800beea <_Bfree+0x3a>
 800beda:	69eb      	ldr	r3, [r5, #28]
 800bedc:	6862      	ldr	r2, [r4, #4]
 800bede:	68db      	ldr	r3, [r3, #12]
 800bee0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bee4:	6021      	str	r1, [r4, #0]
 800bee6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800beea:	bd70      	pop	{r4, r5, r6, pc}
 800beec:	0800fe34 	.word	0x0800fe34
 800bef0:	0800feb4 	.word	0x0800feb4

0800bef4 <__multadd>:
 800bef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bef8:	690d      	ldr	r5, [r1, #16]
 800befa:	4607      	mov	r7, r0
 800befc:	460c      	mov	r4, r1
 800befe:	461e      	mov	r6, r3
 800bf00:	f101 0c14 	add.w	ip, r1, #20
 800bf04:	2000      	movs	r0, #0
 800bf06:	f8dc 3000 	ldr.w	r3, [ip]
 800bf0a:	b299      	uxth	r1, r3
 800bf0c:	fb02 6101 	mla	r1, r2, r1, r6
 800bf10:	0c1e      	lsrs	r6, r3, #16
 800bf12:	0c0b      	lsrs	r3, r1, #16
 800bf14:	fb02 3306 	mla	r3, r2, r6, r3
 800bf18:	b289      	uxth	r1, r1
 800bf1a:	3001      	adds	r0, #1
 800bf1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bf20:	4285      	cmp	r5, r0
 800bf22:	f84c 1b04 	str.w	r1, [ip], #4
 800bf26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bf2a:	dcec      	bgt.n	800bf06 <__multadd+0x12>
 800bf2c:	b30e      	cbz	r6, 800bf72 <__multadd+0x7e>
 800bf2e:	68a3      	ldr	r3, [r4, #8]
 800bf30:	42ab      	cmp	r3, r5
 800bf32:	dc19      	bgt.n	800bf68 <__multadd+0x74>
 800bf34:	6861      	ldr	r1, [r4, #4]
 800bf36:	4638      	mov	r0, r7
 800bf38:	3101      	adds	r1, #1
 800bf3a:	f7ff ff79 	bl	800be30 <_Balloc>
 800bf3e:	4680      	mov	r8, r0
 800bf40:	b928      	cbnz	r0, 800bf4e <__multadd+0x5a>
 800bf42:	4602      	mov	r2, r0
 800bf44:	4b0c      	ldr	r3, [pc, #48]	@ (800bf78 <__multadd+0x84>)
 800bf46:	480d      	ldr	r0, [pc, #52]	@ (800bf7c <__multadd+0x88>)
 800bf48:	21ba      	movs	r1, #186	@ 0xba
 800bf4a:	f002 f879 	bl	800e040 <__assert_func>
 800bf4e:	6922      	ldr	r2, [r4, #16]
 800bf50:	3202      	adds	r2, #2
 800bf52:	f104 010c 	add.w	r1, r4, #12
 800bf56:	0092      	lsls	r2, r2, #2
 800bf58:	300c      	adds	r0, #12
 800bf5a:	f002 f85b 	bl	800e014 <memcpy>
 800bf5e:	4621      	mov	r1, r4
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff ffa5 	bl	800beb0 <_Bfree>
 800bf66:	4644      	mov	r4, r8
 800bf68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf6c:	3501      	adds	r5, #1
 800bf6e:	615e      	str	r6, [r3, #20]
 800bf70:	6125      	str	r5, [r4, #16]
 800bf72:	4620      	mov	r0, r4
 800bf74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf78:	0800fea3 	.word	0x0800fea3
 800bf7c:	0800feb4 	.word	0x0800feb4

0800bf80 <__s2b>:
 800bf80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf84:	460c      	mov	r4, r1
 800bf86:	4615      	mov	r5, r2
 800bf88:	461f      	mov	r7, r3
 800bf8a:	2209      	movs	r2, #9
 800bf8c:	3308      	adds	r3, #8
 800bf8e:	4606      	mov	r6, r0
 800bf90:	fb93 f3f2 	sdiv	r3, r3, r2
 800bf94:	2100      	movs	r1, #0
 800bf96:	2201      	movs	r2, #1
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	db09      	blt.n	800bfb0 <__s2b+0x30>
 800bf9c:	4630      	mov	r0, r6
 800bf9e:	f7ff ff47 	bl	800be30 <_Balloc>
 800bfa2:	b940      	cbnz	r0, 800bfb6 <__s2b+0x36>
 800bfa4:	4602      	mov	r2, r0
 800bfa6:	4b19      	ldr	r3, [pc, #100]	@ (800c00c <__s2b+0x8c>)
 800bfa8:	4819      	ldr	r0, [pc, #100]	@ (800c010 <__s2b+0x90>)
 800bfaa:	21d3      	movs	r1, #211	@ 0xd3
 800bfac:	f002 f848 	bl	800e040 <__assert_func>
 800bfb0:	0052      	lsls	r2, r2, #1
 800bfb2:	3101      	adds	r1, #1
 800bfb4:	e7f0      	b.n	800bf98 <__s2b+0x18>
 800bfb6:	9b08      	ldr	r3, [sp, #32]
 800bfb8:	6143      	str	r3, [r0, #20]
 800bfba:	2d09      	cmp	r5, #9
 800bfbc:	f04f 0301 	mov.w	r3, #1
 800bfc0:	6103      	str	r3, [r0, #16]
 800bfc2:	dd16      	ble.n	800bff2 <__s2b+0x72>
 800bfc4:	f104 0909 	add.w	r9, r4, #9
 800bfc8:	46c8      	mov	r8, r9
 800bfca:	442c      	add	r4, r5
 800bfcc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	3b30      	subs	r3, #48	@ 0x30
 800bfd4:	220a      	movs	r2, #10
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7ff ff8c 	bl	800bef4 <__multadd>
 800bfdc:	45a0      	cmp	r8, r4
 800bfde:	d1f5      	bne.n	800bfcc <__s2b+0x4c>
 800bfe0:	f1a5 0408 	sub.w	r4, r5, #8
 800bfe4:	444c      	add	r4, r9
 800bfe6:	1b2d      	subs	r5, r5, r4
 800bfe8:	1963      	adds	r3, r4, r5
 800bfea:	42bb      	cmp	r3, r7
 800bfec:	db04      	blt.n	800bff8 <__s2b+0x78>
 800bfee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bff2:	340a      	adds	r4, #10
 800bff4:	2509      	movs	r5, #9
 800bff6:	e7f6      	b.n	800bfe6 <__s2b+0x66>
 800bff8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bffc:	4601      	mov	r1, r0
 800bffe:	3b30      	subs	r3, #48	@ 0x30
 800c000:	220a      	movs	r2, #10
 800c002:	4630      	mov	r0, r6
 800c004:	f7ff ff76 	bl	800bef4 <__multadd>
 800c008:	e7ee      	b.n	800bfe8 <__s2b+0x68>
 800c00a:	bf00      	nop
 800c00c:	0800fea3 	.word	0x0800fea3
 800c010:	0800feb4 	.word	0x0800feb4

0800c014 <__hi0bits>:
 800c014:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c018:	4603      	mov	r3, r0
 800c01a:	bf36      	itet	cc
 800c01c:	0403      	lslcc	r3, r0, #16
 800c01e:	2000      	movcs	r0, #0
 800c020:	2010      	movcc	r0, #16
 800c022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c026:	bf3c      	itt	cc
 800c028:	021b      	lslcc	r3, r3, #8
 800c02a:	3008      	addcc	r0, #8
 800c02c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c030:	bf3c      	itt	cc
 800c032:	011b      	lslcc	r3, r3, #4
 800c034:	3004      	addcc	r0, #4
 800c036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c03a:	bf3c      	itt	cc
 800c03c:	009b      	lslcc	r3, r3, #2
 800c03e:	3002      	addcc	r0, #2
 800c040:	2b00      	cmp	r3, #0
 800c042:	db05      	blt.n	800c050 <__hi0bits+0x3c>
 800c044:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c048:	f100 0001 	add.w	r0, r0, #1
 800c04c:	bf08      	it	eq
 800c04e:	2020      	moveq	r0, #32
 800c050:	4770      	bx	lr

0800c052 <__lo0bits>:
 800c052:	6803      	ldr	r3, [r0, #0]
 800c054:	4602      	mov	r2, r0
 800c056:	f013 0007 	ands.w	r0, r3, #7
 800c05a:	d00b      	beq.n	800c074 <__lo0bits+0x22>
 800c05c:	07d9      	lsls	r1, r3, #31
 800c05e:	d421      	bmi.n	800c0a4 <__lo0bits+0x52>
 800c060:	0798      	lsls	r0, r3, #30
 800c062:	bf49      	itett	mi
 800c064:	085b      	lsrmi	r3, r3, #1
 800c066:	089b      	lsrpl	r3, r3, #2
 800c068:	2001      	movmi	r0, #1
 800c06a:	6013      	strmi	r3, [r2, #0]
 800c06c:	bf5c      	itt	pl
 800c06e:	6013      	strpl	r3, [r2, #0]
 800c070:	2002      	movpl	r0, #2
 800c072:	4770      	bx	lr
 800c074:	b299      	uxth	r1, r3
 800c076:	b909      	cbnz	r1, 800c07c <__lo0bits+0x2a>
 800c078:	0c1b      	lsrs	r3, r3, #16
 800c07a:	2010      	movs	r0, #16
 800c07c:	b2d9      	uxtb	r1, r3
 800c07e:	b909      	cbnz	r1, 800c084 <__lo0bits+0x32>
 800c080:	3008      	adds	r0, #8
 800c082:	0a1b      	lsrs	r3, r3, #8
 800c084:	0719      	lsls	r1, r3, #28
 800c086:	bf04      	itt	eq
 800c088:	091b      	lsreq	r3, r3, #4
 800c08a:	3004      	addeq	r0, #4
 800c08c:	0799      	lsls	r1, r3, #30
 800c08e:	bf04      	itt	eq
 800c090:	089b      	lsreq	r3, r3, #2
 800c092:	3002      	addeq	r0, #2
 800c094:	07d9      	lsls	r1, r3, #31
 800c096:	d403      	bmi.n	800c0a0 <__lo0bits+0x4e>
 800c098:	085b      	lsrs	r3, r3, #1
 800c09a:	f100 0001 	add.w	r0, r0, #1
 800c09e:	d003      	beq.n	800c0a8 <__lo0bits+0x56>
 800c0a0:	6013      	str	r3, [r2, #0]
 800c0a2:	4770      	bx	lr
 800c0a4:	2000      	movs	r0, #0
 800c0a6:	4770      	bx	lr
 800c0a8:	2020      	movs	r0, #32
 800c0aa:	4770      	bx	lr

0800c0ac <__i2b>:
 800c0ac:	b510      	push	{r4, lr}
 800c0ae:	460c      	mov	r4, r1
 800c0b0:	2101      	movs	r1, #1
 800c0b2:	f7ff febd 	bl	800be30 <_Balloc>
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	b928      	cbnz	r0, 800c0c6 <__i2b+0x1a>
 800c0ba:	4b05      	ldr	r3, [pc, #20]	@ (800c0d0 <__i2b+0x24>)
 800c0bc:	4805      	ldr	r0, [pc, #20]	@ (800c0d4 <__i2b+0x28>)
 800c0be:	f240 1145 	movw	r1, #325	@ 0x145
 800c0c2:	f001 ffbd 	bl	800e040 <__assert_func>
 800c0c6:	2301      	movs	r3, #1
 800c0c8:	6144      	str	r4, [r0, #20]
 800c0ca:	6103      	str	r3, [r0, #16]
 800c0cc:	bd10      	pop	{r4, pc}
 800c0ce:	bf00      	nop
 800c0d0:	0800fea3 	.word	0x0800fea3
 800c0d4:	0800feb4 	.word	0x0800feb4

0800c0d8 <__multiply>:
 800c0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0dc:	4614      	mov	r4, r2
 800c0de:	690a      	ldr	r2, [r1, #16]
 800c0e0:	6923      	ldr	r3, [r4, #16]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	bfa8      	it	ge
 800c0e6:	4623      	movge	r3, r4
 800c0e8:	460f      	mov	r7, r1
 800c0ea:	bfa4      	itt	ge
 800c0ec:	460c      	movge	r4, r1
 800c0ee:	461f      	movge	r7, r3
 800c0f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c0f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c0f8:	68a3      	ldr	r3, [r4, #8]
 800c0fa:	6861      	ldr	r1, [r4, #4]
 800c0fc:	eb0a 0609 	add.w	r6, sl, r9
 800c100:	42b3      	cmp	r3, r6
 800c102:	b085      	sub	sp, #20
 800c104:	bfb8      	it	lt
 800c106:	3101      	addlt	r1, #1
 800c108:	f7ff fe92 	bl	800be30 <_Balloc>
 800c10c:	b930      	cbnz	r0, 800c11c <__multiply+0x44>
 800c10e:	4602      	mov	r2, r0
 800c110:	4b44      	ldr	r3, [pc, #272]	@ (800c224 <__multiply+0x14c>)
 800c112:	4845      	ldr	r0, [pc, #276]	@ (800c228 <__multiply+0x150>)
 800c114:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c118:	f001 ff92 	bl	800e040 <__assert_func>
 800c11c:	f100 0514 	add.w	r5, r0, #20
 800c120:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c124:	462b      	mov	r3, r5
 800c126:	2200      	movs	r2, #0
 800c128:	4543      	cmp	r3, r8
 800c12a:	d321      	bcc.n	800c170 <__multiply+0x98>
 800c12c:	f107 0114 	add.w	r1, r7, #20
 800c130:	f104 0214 	add.w	r2, r4, #20
 800c134:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c138:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c13c:	9302      	str	r3, [sp, #8]
 800c13e:	1b13      	subs	r3, r2, r4
 800c140:	3b15      	subs	r3, #21
 800c142:	f023 0303 	bic.w	r3, r3, #3
 800c146:	3304      	adds	r3, #4
 800c148:	f104 0715 	add.w	r7, r4, #21
 800c14c:	42ba      	cmp	r2, r7
 800c14e:	bf38      	it	cc
 800c150:	2304      	movcc	r3, #4
 800c152:	9301      	str	r3, [sp, #4]
 800c154:	9b02      	ldr	r3, [sp, #8]
 800c156:	9103      	str	r1, [sp, #12]
 800c158:	428b      	cmp	r3, r1
 800c15a:	d80c      	bhi.n	800c176 <__multiply+0x9e>
 800c15c:	2e00      	cmp	r6, #0
 800c15e:	dd03      	ble.n	800c168 <__multiply+0x90>
 800c160:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c164:	2b00      	cmp	r3, #0
 800c166:	d05b      	beq.n	800c220 <__multiply+0x148>
 800c168:	6106      	str	r6, [r0, #16]
 800c16a:	b005      	add	sp, #20
 800c16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c170:	f843 2b04 	str.w	r2, [r3], #4
 800c174:	e7d8      	b.n	800c128 <__multiply+0x50>
 800c176:	f8b1 a000 	ldrh.w	sl, [r1]
 800c17a:	f1ba 0f00 	cmp.w	sl, #0
 800c17e:	d024      	beq.n	800c1ca <__multiply+0xf2>
 800c180:	f104 0e14 	add.w	lr, r4, #20
 800c184:	46a9      	mov	r9, r5
 800c186:	f04f 0c00 	mov.w	ip, #0
 800c18a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c18e:	f8d9 3000 	ldr.w	r3, [r9]
 800c192:	fa1f fb87 	uxth.w	fp, r7
 800c196:	b29b      	uxth	r3, r3
 800c198:	fb0a 330b 	mla	r3, sl, fp, r3
 800c19c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800c1a0:	f8d9 7000 	ldr.w	r7, [r9]
 800c1a4:	4463      	add	r3, ip
 800c1a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1aa:	fb0a c70b 	mla	r7, sl, fp, ip
 800c1ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800c1b2:	b29b      	uxth	r3, r3
 800c1b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1b8:	4572      	cmp	r2, lr
 800c1ba:	f849 3b04 	str.w	r3, [r9], #4
 800c1be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800c1c2:	d8e2      	bhi.n	800c18a <__multiply+0xb2>
 800c1c4:	9b01      	ldr	r3, [sp, #4]
 800c1c6:	f845 c003 	str.w	ip, [r5, r3]
 800c1ca:	9b03      	ldr	r3, [sp, #12]
 800c1cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800c1d0:	3104      	adds	r1, #4
 800c1d2:	f1b9 0f00 	cmp.w	r9, #0
 800c1d6:	d021      	beq.n	800c21c <__multiply+0x144>
 800c1d8:	682b      	ldr	r3, [r5, #0]
 800c1da:	f104 0c14 	add.w	ip, r4, #20
 800c1de:	46ae      	mov	lr, r5
 800c1e0:	f04f 0a00 	mov.w	sl, #0
 800c1e4:	f8bc b000 	ldrh.w	fp, [ip]
 800c1e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800c1ec:	fb09 770b 	mla	r7, r9, fp, r7
 800c1f0:	4457      	add	r7, sl
 800c1f2:	b29b      	uxth	r3, r3
 800c1f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800c1f8:	f84e 3b04 	str.w	r3, [lr], #4
 800c1fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c204:	f8be 3000 	ldrh.w	r3, [lr]
 800c208:	fb09 330a 	mla	r3, r9, sl, r3
 800c20c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800c210:	4562      	cmp	r2, ip
 800c212:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c216:	d8e5      	bhi.n	800c1e4 <__multiply+0x10c>
 800c218:	9f01      	ldr	r7, [sp, #4]
 800c21a:	51eb      	str	r3, [r5, r7]
 800c21c:	3504      	adds	r5, #4
 800c21e:	e799      	b.n	800c154 <__multiply+0x7c>
 800c220:	3e01      	subs	r6, #1
 800c222:	e79b      	b.n	800c15c <__multiply+0x84>
 800c224:	0800fea3 	.word	0x0800fea3
 800c228:	0800feb4 	.word	0x0800feb4

0800c22c <__pow5mult>:
 800c22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c230:	4615      	mov	r5, r2
 800c232:	f012 0203 	ands.w	r2, r2, #3
 800c236:	4607      	mov	r7, r0
 800c238:	460e      	mov	r6, r1
 800c23a:	d007      	beq.n	800c24c <__pow5mult+0x20>
 800c23c:	4c25      	ldr	r4, [pc, #148]	@ (800c2d4 <__pow5mult+0xa8>)
 800c23e:	3a01      	subs	r2, #1
 800c240:	2300      	movs	r3, #0
 800c242:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c246:	f7ff fe55 	bl	800bef4 <__multadd>
 800c24a:	4606      	mov	r6, r0
 800c24c:	10ad      	asrs	r5, r5, #2
 800c24e:	d03d      	beq.n	800c2cc <__pow5mult+0xa0>
 800c250:	69fc      	ldr	r4, [r7, #28]
 800c252:	b97c      	cbnz	r4, 800c274 <__pow5mult+0x48>
 800c254:	2010      	movs	r0, #16
 800c256:	f7ff fd35 	bl	800bcc4 <malloc>
 800c25a:	4602      	mov	r2, r0
 800c25c:	61f8      	str	r0, [r7, #28]
 800c25e:	b928      	cbnz	r0, 800c26c <__pow5mult+0x40>
 800c260:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d8 <__pow5mult+0xac>)
 800c262:	481e      	ldr	r0, [pc, #120]	@ (800c2dc <__pow5mult+0xb0>)
 800c264:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800c268:	f001 feea 	bl	800e040 <__assert_func>
 800c26c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c270:	6004      	str	r4, [r0, #0]
 800c272:	60c4      	str	r4, [r0, #12]
 800c274:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800c278:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c27c:	b94c      	cbnz	r4, 800c292 <__pow5mult+0x66>
 800c27e:	f240 2171 	movw	r1, #625	@ 0x271
 800c282:	4638      	mov	r0, r7
 800c284:	f7ff ff12 	bl	800c0ac <__i2b>
 800c288:	2300      	movs	r3, #0
 800c28a:	f8c8 0008 	str.w	r0, [r8, #8]
 800c28e:	4604      	mov	r4, r0
 800c290:	6003      	str	r3, [r0, #0]
 800c292:	f04f 0900 	mov.w	r9, #0
 800c296:	07eb      	lsls	r3, r5, #31
 800c298:	d50a      	bpl.n	800c2b0 <__pow5mult+0x84>
 800c29a:	4631      	mov	r1, r6
 800c29c:	4622      	mov	r2, r4
 800c29e:	4638      	mov	r0, r7
 800c2a0:	f7ff ff1a 	bl	800c0d8 <__multiply>
 800c2a4:	4631      	mov	r1, r6
 800c2a6:	4680      	mov	r8, r0
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff fe01 	bl	800beb0 <_Bfree>
 800c2ae:	4646      	mov	r6, r8
 800c2b0:	106d      	asrs	r5, r5, #1
 800c2b2:	d00b      	beq.n	800c2cc <__pow5mult+0xa0>
 800c2b4:	6820      	ldr	r0, [r4, #0]
 800c2b6:	b938      	cbnz	r0, 800c2c8 <__pow5mult+0x9c>
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	4621      	mov	r1, r4
 800c2bc:	4638      	mov	r0, r7
 800c2be:	f7ff ff0b 	bl	800c0d8 <__multiply>
 800c2c2:	6020      	str	r0, [r4, #0]
 800c2c4:	f8c0 9000 	str.w	r9, [r0]
 800c2c8:	4604      	mov	r4, r0
 800c2ca:	e7e4      	b.n	800c296 <__pow5mult+0x6a>
 800c2cc:	4630      	mov	r0, r6
 800c2ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2d2:	bf00      	nop
 800c2d4:	0800ff10 	.word	0x0800ff10
 800c2d8:	0800fe34 	.word	0x0800fe34
 800c2dc:	0800feb4 	.word	0x0800feb4

0800c2e0 <__lshift>:
 800c2e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e4:	460c      	mov	r4, r1
 800c2e6:	6849      	ldr	r1, [r1, #4]
 800c2e8:	6923      	ldr	r3, [r4, #16]
 800c2ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c2ee:	68a3      	ldr	r3, [r4, #8]
 800c2f0:	4607      	mov	r7, r0
 800c2f2:	4691      	mov	r9, r2
 800c2f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c2f8:	f108 0601 	add.w	r6, r8, #1
 800c2fc:	42b3      	cmp	r3, r6
 800c2fe:	db0b      	blt.n	800c318 <__lshift+0x38>
 800c300:	4638      	mov	r0, r7
 800c302:	f7ff fd95 	bl	800be30 <_Balloc>
 800c306:	4605      	mov	r5, r0
 800c308:	b948      	cbnz	r0, 800c31e <__lshift+0x3e>
 800c30a:	4602      	mov	r2, r0
 800c30c:	4b28      	ldr	r3, [pc, #160]	@ (800c3b0 <__lshift+0xd0>)
 800c30e:	4829      	ldr	r0, [pc, #164]	@ (800c3b4 <__lshift+0xd4>)
 800c310:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800c314:	f001 fe94 	bl	800e040 <__assert_func>
 800c318:	3101      	adds	r1, #1
 800c31a:	005b      	lsls	r3, r3, #1
 800c31c:	e7ee      	b.n	800c2fc <__lshift+0x1c>
 800c31e:	2300      	movs	r3, #0
 800c320:	f100 0114 	add.w	r1, r0, #20
 800c324:	f100 0210 	add.w	r2, r0, #16
 800c328:	4618      	mov	r0, r3
 800c32a:	4553      	cmp	r3, sl
 800c32c:	db33      	blt.n	800c396 <__lshift+0xb6>
 800c32e:	6920      	ldr	r0, [r4, #16]
 800c330:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c334:	f104 0314 	add.w	r3, r4, #20
 800c338:	f019 091f 	ands.w	r9, r9, #31
 800c33c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c340:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c344:	d02b      	beq.n	800c39e <__lshift+0xbe>
 800c346:	f1c9 0e20 	rsb	lr, r9, #32
 800c34a:	468a      	mov	sl, r1
 800c34c:	2200      	movs	r2, #0
 800c34e:	6818      	ldr	r0, [r3, #0]
 800c350:	fa00 f009 	lsl.w	r0, r0, r9
 800c354:	4310      	orrs	r0, r2
 800c356:	f84a 0b04 	str.w	r0, [sl], #4
 800c35a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c35e:	459c      	cmp	ip, r3
 800c360:	fa22 f20e 	lsr.w	r2, r2, lr
 800c364:	d8f3      	bhi.n	800c34e <__lshift+0x6e>
 800c366:	ebac 0304 	sub.w	r3, ip, r4
 800c36a:	3b15      	subs	r3, #21
 800c36c:	f023 0303 	bic.w	r3, r3, #3
 800c370:	3304      	adds	r3, #4
 800c372:	f104 0015 	add.w	r0, r4, #21
 800c376:	4584      	cmp	ip, r0
 800c378:	bf38      	it	cc
 800c37a:	2304      	movcc	r3, #4
 800c37c:	50ca      	str	r2, [r1, r3]
 800c37e:	b10a      	cbz	r2, 800c384 <__lshift+0xa4>
 800c380:	f108 0602 	add.w	r6, r8, #2
 800c384:	3e01      	subs	r6, #1
 800c386:	4638      	mov	r0, r7
 800c388:	612e      	str	r6, [r5, #16]
 800c38a:	4621      	mov	r1, r4
 800c38c:	f7ff fd90 	bl	800beb0 <_Bfree>
 800c390:	4628      	mov	r0, r5
 800c392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c396:	f842 0f04 	str.w	r0, [r2, #4]!
 800c39a:	3301      	adds	r3, #1
 800c39c:	e7c5      	b.n	800c32a <__lshift+0x4a>
 800c39e:	3904      	subs	r1, #4
 800c3a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3a4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3a8:	459c      	cmp	ip, r3
 800c3aa:	d8f9      	bhi.n	800c3a0 <__lshift+0xc0>
 800c3ac:	e7ea      	b.n	800c384 <__lshift+0xa4>
 800c3ae:	bf00      	nop
 800c3b0:	0800fea3 	.word	0x0800fea3
 800c3b4:	0800feb4 	.word	0x0800feb4

0800c3b8 <__mcmp>:
 800c3b8:	690a      	ldr	r2, [r1, #16]
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	6900      	ldr	r0, [r0, #16]
 800c3be:	1a80      	subs	r0, r0, r2
 800c3c0:	b530      	push	{r4, r5, lr}
 800c3c2:	d10e      	bne.n	800c3e2 <__mcmp+0x2a>
 800c3c4:	3314      	adds	r3, #20
 800c3c6:	3114      	adds	r1, #20
 800c3c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800c3cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800c3d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c3d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c3d8:	4295      	cmp	r5, r2
 800c3da:	d003      	beq.n	800c3e4 <__mcmp+0x2c>
 800c3dc:	d205      	bcs.n	800c3ea <__mcmp+0x32>
 800c3de:	f04f 30ff 	mov.w	r0, #4294967295
 800c3e2:	bd30      	pop	{r4, r5, pc}
 800c3e4:	42a3      	cmp	r3, r4
 800c3e6:	d3f3      	bcc.n	800c3d0 <__mcmp+0x18>
 800c3e8:	e7fb      	b.n	800c3e2 <__mcmp+0x2a>
 800c3ea:	2001      	movs	r0, #1
 800c3ec:	e7f9      	b.n	800c3e2 <__mcmp+0x2a>
	...

0800c3f0 <__mdiff>:
 800c3f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	4689      	mov	r9, r1
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	4611      	mov	r1, r2
 800c3fa:	4648      	mov	r0, r9
 800c3fc:	4614      	mov	r4, r2
 800c3fe:	f7ff ffdb 	bl	800c3b8 <__mcmp>
 800c402:	1e05      	subs	r5, r0, #0
 800c404:	d112      	bne.n	800c42c <__mdiff+0x3c>
 800c406:	4629      	mov	r1, r5
 800c408:	4630      	mov	r0, r6
 800c40a:	f7ff fd11 	bl	800be30 <_Balloc>
 800c40e:	4602      	mov	r2, r0
 800c410:	b928      	cbnz	r0, 800c41e <__mdiff+0x2e>
 800c412:	4b3f      	ldr	r3, [pc, #252]	@ (800c510 <__mdiff+0x120>)
 800c414:	f240 2137 	movw	r1, #567	@ 0x237
 800c418:	483e      	ldr	r0, [pc, #248]	@ (800c514 <__mdiff+0x124>)
 800c41a:	f001 fe11 	bl	800e040 <__assert_func>
 800c41e:	2301      	movs	r3, #1
 800c420:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c424:	4610      	mov	r0, r2
 800c426:	b003      	add	sp, #12
 800c428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c42c:	bfbc      	itt	lt
 800c42e:	464b      	movlt	r3, r9
 800c430:	46a1      	movlt	r9, r4
 800c432:	4630      	mov	r0, r6
 800c434:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c438:	bfba      	itte	lt
 800c43a:	461c      	movlt	r4, r3
 800c43c:	2501      	movlt	r5, #1
 800c43e:	2500      	movge	r5, #0
 800c440:	f7ff fcf6 	bl	800be30 <_Balloc>
 800c444:	4602      	mov	r2, r0
 800c446:	b918      	cbnz	r0, 800c450 <__mdiff+0x60>
 800c448:	4b31      	ldr	r3, [pc, #196]	@ (800c510 <__mdiff+0x120>)
 800c44a:	f240 2145 	movw	r1, #581	@ 0x245
 800c44e:	e7e3      	b.n	800c418 <__mdiff+0x28>
 800c450:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c454:	6926      	ldr	r6, [r4, #16]
 800c456:	60c5      	str	r5, [r0, #12]
 800c458:	f109 0310 	add.w	r3, r9, #16
 800c45c:	f109 0514 	add.w	r5, r9, #20
 800c460:	f104 0e14 	add.w	lr, r4, #20
 800c464:	f100 0b14 	add.w	fp, r0, #20
 800c468:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800c46c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800c470:	9301      	str	r3, [sp, #4]
 800c472:	46d9      	mov	r9, fp
 800c474:	f04f 0c00 	mov.w	ip, #0
 800c478:	9b01      	ldr	r3, [sp, #4]
 800c47a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800c47e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800c482:	9301      	str	r3, [sp, #4]
 800c484:	fa1f f38a 	uxth.w	r3, sl
 800c488:	4619      	mov	r1, r3
 800c48a:	b283      	uxth	r3, r0
 800c48c:	1acb      	subs	r3, r1, r3
 800c48e:	0c00      	lsrs	r0, r0, #16
 800c490:	4463      	add	r3, ip
 800c492:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800c496:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800c49a:	b29b      	uxth	r3, r3
 800c49c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800c4a0:	4576      	cmp	r6, lr
 800c4a2:	f849 3b04 	str.w	r3, [r9], #4
 800c4a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c4aa:	d8e5      	bhi.n	800c478 <__mdiff+0x88>
 800c4ac:	1b33      	subs	r3, r6, r4
 800c4ae:	3b15      	subs	r3, #21
 800c4b0:	f023 0303 	bic.w	r3, r3, #3
 800c4b4:	3415      	adds	r4, #21
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	42a6      	cmp	r6, r4
 800c4ba:	bf38      	it	cc
 800c4bc:	2304      	movcc	r3, #4
 800c4be:	441d      	add	r5, r3
 800c4c0:	445b      	add	r3, fp
 800c4c2:	461e      	mov	r6, r3
 800c4c4:	462c      	mov	r4, r5
 800c4c6:	4544      	cmp	r4, r8
 800c4c8:	d30e      	bcc.n	800c4e8 <__mdiff+0xf8>
 800c4ca:	f108 0103 	add.w	r1, r8, #3
 800c4ce:	1b49      	subs	r1, r1, r5
 800c4d0:	f021 0103 	bic.w	r1, r1, #3
 800c4d4:	3d03      	subs	r5, #3
 800c4d6:	45a8      	cmp	r8, r5
 800c4d8:	bf38      	it	cc
 800c4da:	2100      	movcc	r1, #0
 800c4dc:	440b      	add	r3, r1
 800c4de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c4e2:	b191      	cbz	r1, 800c50a <__mdiff+0x11a>
 800c4e4:	6117      	str	r7, [r2, #16]
 800c4e6:	e79d      	b.n	800c424 <__mdiff+0x34>
 800c4e8:	f854 1b04 	ldr.w	r1, [r4], #4
 800c4ec:	46e6      	mov	lr, ip
 800c4ee:	0c08      	lsrs	r0, r1, #16
 800c4f0:	fa1c fc81 	uxtah	ip, ip, r1
 800c4f4:	4471      	add	r1, lr
 800c4f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800c4fa:	b289      	uxth	r1, r1
 800c4fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800c500:	f846 1b04 	str.w	r1, [r6], #4
 800c504:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800c508:	e7dd      	b.n	800c4c6 <__mdiff+0xd6>
 800c50a:	3f01      	subs	r7, #1
 800c50c:	e7e7      	b.n	800c4de <__mdiff+0xee>
 800c50e:	bf00      	nop
 800c510:	0800fea3 	.word	0x0800fea3
 800c514:	0800feb4 	.word	0x0800feb4

0800c518 <__ulp>:
 800c518:	b082      	sub	sp, #8
 800c51a:	ed8d 0b00 	vstr	d0, [sp]
 800c51e:	9a01      	ldr	r2, [sp, #4]
 800c520:	4b0f      	ldr	r3, [pc, #60]	@ (800c560 <__ulp+0x48>)
 800c522:	4013      	ands	r3, r2
 800c524:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800c528:	2b00      	cmp	r3, #0
 800c52a:	dc08      	bgt.n	800c53e <__ulp+0x26>
 800c52c:	425b      	negs	r3, r3
 800c52e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800c532:	ea4f 5223 	mov.w	r2, r3, asr #20
 800c536:	da04      	bge.n	800c542 <__ulp+0x2a>
 800c538:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800c53c:	4113      	asrs	r3, r2
 800c53e:	2200      	movs	r2, #0
 800c540:	e008      	b.n	800c554 <__ulp+0x3c>
 800c542:	f1a2 0314 	sub.w	r3, r2, #20
 800c546:	2b1e      	cmp	r3, #30
 800c548:	bfda      	itte	le
 800c54a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800c54e:	40da      	lsrle	r2, r3
 800c550:	2201      	movgt	r2, #1
 800c552:	2300      	movs	r3, #0
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	ec41 0b10 	vmov	d0, r0, r1
 800c55c:	b002      	add	sp, #8
 800c55e:	4770      	bx	lr
 800c560:	7ff00000 	.word	0x7ff00000

0800c564 <__b2d>:
 800c564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c568:	6906      	ldr	r6, [r0, #16]
 800c56a:	f100 0814 	add.w	r8, r0, #20
 800c56e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800c572:	1f37      	subs	r7, r6, #4
 800c574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c578:	4610      	mov	r0, r2
 800c57a:	f7ff fd4b 	bl	800c014 <__hi0bits>
 800c57e:	f1c0 0320 	rsb	r3, r0, #32
 800c582:	280a      	cmp	r0, #10
 800c584:	600b      	str	r3, [r1, #0]
 800c586:	491b      	ldr	r1, [pc, #108]	@ (800c5f4 <__b2d+0x90>)
 800c588:	dc15      	bgt.n	800c5b6 <__b2d+0x52>
 800c58a:	f1c0 0c0b 	rsb	ip, r0, #11
 800c58e:	fa22 f30c 	lsr.w	r3, r2, ip
 800c592:	45b8      	cmp	r8, r7
 800c594:	ea43 0501 	orr.w	r5, r3, r1
 800c598:	bf34      	ite	cc
 800c59a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c59e:	2300      	movcs	r3, #0
 800c5a0:	3015      	adds	r0, #21
 800c5a2:	fa02 f000 	lsl.w	r0, r2, r0
 800c5a6:	fa23 f30c 	lsr.w	r3, r3, ip
 800c5aa:	4303      	orrs	r3, r0
 800c5ac:	461c      	mov	r4, r3
 800c5ae:	ec45 4b10 	vmov	d0, r4, r5
 800c5b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c5b6:	45b8      	cmp	r8, r7
 800c5b8:	bf3a      	itte	cc
 800c5ba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800c5be:	f1a6 0708 	subcc.w	r7, r6, #8
 800c5c2:	2300      	movcs	r3, #0
 800c5c4:	380b      	subs	r0, #11
 800c5c6:	d012      	beq.n	800c5ee <__b2d+0x8a>
 800c5c8:	f1c0 0120 	rsb	r1, r0, #32
 800c5cc:	fa23 f401 	lsr.w	r4, r3, r1
 800c5d0:	4082      	lsls	r2, r0
 800c5d2:	4322      	orrs	r2, r4
 800c5d4:	4547      	cmp	r7, r8
 800c5d6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800c5da:	bf8c      	ite	hi
 800c5dc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800c5e0:	2200      	movls	r2, #0
 800c5e2:	4083      	lsls	r3, r0
 800c5e4:	40ca      	lsrs	r2, r1
 800c5e6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	e7de      	b.n	800c5ac <__b2d+0x48>
 800c5ee:	ea42 0501 	orr.w	r5, r2, r1
 800c5f2:	e7db      	b.n	800c5ac <__b2d+0x48>
 800c5f4:	3ff00000 	.word	0x3ff00000

0800c5f8 <__d2b>:
 800c5f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c5fc:	460f      	mov	r7, r1
 800c5fe:	2101      	movs	r1, #1
 800c600:	ec59 8b10 	vmov	r8, r9, d0
 800c604:	4616      	mov	r6, r2
 800c606:	f7ff fc13 	bl	800be30 <_Balloc>
 800c60a:	4604      	mov	r4, r0
 800c60c:	b930      	cbnz	r0, 800c61c <__d2b+0x24>
 800c60e:	4602      	mov	r2, r0
 800c610:	4b23      	ldr	r3, [pc, #140]	@ (800c6a0 <__d2b+0xa8>)
 800c612:	4824      	ldr	r0, [pc, #144]	@ (800c6a4 <__d2b+0xac>)
 800c614:	f240 310f 	movw	r1, #783	@ 0x30f
 800c618:	f001 fd12 	bl	800e040 <__assert_func>
 800c61c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c620:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c624:	b10d      	cbz	r5, 800c62a <__d2b+0x32>
 800c626:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c62a:	9301      	str	r3, [sp, #4]
 800c62c:	f1b8 0300 	subs.w	r3, r8, #0
 800c630:	d023      	beq.n	800c67a <__d2b+0x82>
 800c632:	4668      	mov	r0, sp
 800c634:	9300      	str	r3, [sp, #0]
 800c636:	f7ff fd0c 	bl	800c052 <__lo0bits>
 800c63a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c63e:	b1d0      	cbz	r0, 800c676 <__d2b+0x7e>
 800c640:	f1c0 0320 	rsb	r3, r0, #32
 800c644:	fa02 f303 	lsl.w	r3, r2, r3
 800c648:	430b      	orrs	r3, r1
 800c64a:	40c2      	lsrs	r2, r0
 800c64c:	6163      	str	r3, [r4, #20]
 800c64e:	9201      	str	r2, [sp, #4]
 800c650:	9b01      	ldr	r3, [sp, #4]
 800c652:	61a3      	str	r3, [r4, #24]
 800c654:	2b00      	cmp	r3, #0
 800c656:	bf0c      	ite	eq
 800c658:	2201      	moveq	r2, #1
 800c65a:	2202      	movne	r2, #2
 800c65c:	6122      	str	r2, [r4, #16]
 800c65e:	b1a5      	cbz	r5, 800c68a <__d2b+0x92>
 800c660:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800c664:	4405      	add	r5, r0
 800c666:	603d      	str	r5, [r7, #0]
 800c668:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800c66c:	6030      	str	r0, [r6, #0]
 800c66e:	4620      	mov	r0, r4
 800c670:	b003      	add	sp, #12
 800c672:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c676:	6161      	str	r1, [r4, #20]
 800c678:	e7ea      	b.n	800c650 <__d2b+0x58>
 800c67a:	a801      	add	r0, sp, #4
 800c67c:	f7ff fce9 	bl	800c052 <__lo0bits>
 800c680:	9b01      	ldr	r3, [sp, #4]
 800c682:	6163      	str	r3, [r4, #20]
 800c684:	3020      	adds	r0, #32
 800c686:	2201      	movs	r2, #1
 800c688:	e7e8      	b.n	800c65c <__d2b+0x64>
 800c68a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c68e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800c692:	6038      	str	r0, [r7, #0]
 800c694:	6918      	ldr	r0, [r3, #16]
 800c696:	f7ff fcbd 	bl	800c014 <__hi0bits>
 800c69a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c69e:	e7e5      	b.n	800c66c <__d2b+0x74>
 800c6a0:	0800fea3 	.word	0x0800fea3
 800c6a4:	0800feb4 	.word	0x0800feb4

0800c6a8 <__ratio>:
 800c6a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ac:	b085      	sub	sp, #20
 800c6ae:	e9cd 1000 	strd	r1, r0, [sp]
 800c6b2:	a902      	add	r1, sp, #8
 800c6b4:	f7ff ff56 	bl	800c564 <__b2d>
 800c6b8:	9800      	ldr	r0, [sp, #0]
 800c6ba:	a903      	add	r1, sp, #12
 800c6bc:	ec55 4b10 	vmov	r4, r5, d0
 800c6c0:	f7ff ff50 	bl	800c564 <__b2d>
 800c6c4:	9b01      	ldr	r3, [sp, #4]
 800c6c6:	6919      	ldr	r1, [r3, #16]
 800c6c8:	9b00      	ldr	r3, [sp, #0]
 800c6ca:	691b      	ldr	r3, [r3, #16]
 800c6cc:	1ac9      	subs	r1, r1, r3
 800c6ce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800c6d2:	1a9b      	subs	r3, r3, r2
 800c6d4:	ec5b ab10 	vmov	sl, fp, d0
 800c6d8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bfce      	itee	gt
 800c6e0:	462a      	movgt	r2, r5
 800c6e2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c6e6:	465a      	movle	r2, fp
 800c6e8:	462f      	mov	r7, r5
 800c6ea:	46d9      	mov	r9, fp
 800c6ec:	bfcc      	ite	gt
 800c6ee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c6f2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800c6f6:	464b      	mov	r3, r9
 800c6f8:	4652      	mov	r2, sl
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	4639      	mov	r1, r7
 800c6fe:	f7f4 f8ad 	bl	800085c <__aeabi_ddiv>
 800c702:	ec41 0b10 	vmov	d0, r0, r1
 800c706:	b005      	add	sp, #20
 800c708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c70c <__copybits>:
 800c70c:	3901      	subs	r1, #1
 800c70e:	b570      	push	{r4, r5, r6, lr}
 800c710:	1149      	asrs	r1, r1, #5
 800c712:	6914      	ldr	r4, [r2, #16]
 800c714:	3101      	adds	r1, #1
 800c716:	f102 0314 	add.w	r3, r2, #20
 800c71a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c71e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c722:	1f05      	subs	r5, r0, #4
 800c724:	42a3      	cmp	r3, r4
 800c726:	d30c      	bcc.n	800c742 <__copybits+0x36>
 800c728:	1aa3      	subs	r3, r4, r2
 800c72a:	3b11      	subs	r3, #17
 800c72c:	f023 0303 	bic.w	r3, r3, #3
 800c730:	3211      	adds	r2, #17
 800c732:	42a2      	cmp	r2, r4
 800c734:	bf88      	it	hi
 800c736:	2300      	movhi	r3, #0
 800c738:	4418      	add	r0, r3
 800c73a:	2300      	movs	r3, #0
 800c73c:	4288      	cmp	r0, r1
 800c73e:	d305      	bcc.n	800c74c <__copybits+0x40>
 800c740:	bd70      	pop	{r4, r5, r6, pc}
 800c742:	f853 6b04 	ldr.w	r6, [r3], #4
 800c746:	f845 6f04 	str.w	r6, [r5, #4]!
 800c74a:	e7eb      	b.n	800c724 <__copybits+0x18>
 800c74c:	f840 3b04 	str.w	r3, [r0], #4
 800c750:	e7f4      	b.n	800c73c <__copybits+0x30>

0800c752 <__any_on>:
 800c752:	f100 0214 	add.w	r2, r0, #20
 800c756:	6900      	ldr	r0, [r0, #16]
 800c758:	114b      	asrs	r3, r1, #5
 800c75a:	4298      	cmp	r0, r3
 800c75c:	b510      	push	{r4, lr}
 800c75e:	db11      	blt.n	800c784 <__any_on+0x32>
 800c760:	dd0a      	ble.n	800c778 <__any_on+0x26>
 800c762:	f011 011f 	ands.w	r1, r1, #31
 800c766:	d007      	beq.n	800c778 <__any_on+0x26>
 800c768:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c76c:	fa24 f001 	lsr.w	r0, r4, r1
 800c770:	fa00 f101 	lsl.w	r1, r0, r1
 800c774:	428c      	cmp	r4, r1
 800c776:	d10b      	bne.n	800c790 <__any_on+0x3e>
 800c778:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c77c:	4293      	cmp	r3, r2
 800c77e:	d803      	bhi.n	800c788 <__any_on+0x36>
 800c780:	2000      	movs	r0, #0
 800c782:	bd10      	pop	{r4, pc}
 800c784:	4603      	mov	r3, r0
 800c786:	e7f7      	b.n	800c778 <__any_on+0x26>
 800c788:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c78c:	2900      	cmp	r1, #0
 800c78e:	d0f5      	beq.n	800c77c <__any_on+0x2a>
 800c790:	2001      	movs	r0, #1
 800c792:	e7f6      	b.n	800c782 <__any_on+0x30>

0800c794 <sulp>:
 800c794:	b570      	push	{r4, r5, r6, lr}
 800c796:	4604      	mov	r4, r0
 800c798:	460d      	mov	r5, r1
 800c79a:	ec45 4b10 	vmov	d0, r4, r5
 800c79e:	4616      	mov	r6, r2
 800c7a0:	f7ff feba 	bl	800c518 <__ulp>
 800c7a4:	ec51 0b10 	vmov	r0, r1, d0
 800c7a8:	b17e      	cbz	r6, 800c7ca <sulp+0x36>
 800c7aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c7ae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800c7b2:	2b00      	cmp	r3, #0
 800c7b4:	dd09      	ble.n	800c7ca <sulp+0x36>
 800c7b6:	051b      	lsls	r3, r3, #20
 800c7b8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800c7bc:	2400      	movs	r4, #0
 800c7be:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800c7c2:	4622      	mov	r2, r4
 800c7c4:	462b      	mov	r3, r5
 800c7c6:	f7f3 ff1f 	bl	8000608 <__aeabi_dmul>
 800c7ca:	ec41 0b10 	vmov	d0, r0, r1
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}

0800c7d0 <_strtod_l>:
 800c7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d4:	b09f      	sub	sp, #124	@ 0x7c
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800c7da:	2200      	movs	r2, #0
 800c7dc:	921a      	str	r2, [sp, #104]	@ 0x68
 800c7de:	9005      	str	r0, [sp, #20]
 800c7e0:	f04f 0a00 	mov.w	sl, #0
 800c7e4:	f04f 0b00 	mov.w	fp, #0
 800c7e8:	460a      	mov	r2, r1
 800c7ea:	9219      	str	r2, [sp, #100]	@ 0x64
 800c7ec:	7811      	ldrb	r1, [r2, #0]
 800c7ee:	292b      	cmp	r1, #43	@ 0x2b
 800c7f0:	d04a      	beq.n	800c888 <_strtod_l+0xb8>
 800c7f2:	d838      	bhi.n	800c866 <_strtod_l+0x96>
 800c7f4:	290d      	cmp	r1, #13
 800c7f6:	d832      	bhi.n	800c85e <_strtod_l+0x8e>
 800c7f8:	2908      	cmp	r1, #8
 800c7fa:	d832      	bhi.n	800c862 <_strtod_l+0x92>
 800c7fc:	2900      	cmp	r1, #0
 800c7fe:	d03b      	beq.n	800c878 <_strtod_l+0xa8>
 800c800:	2200      	movs	r2, #0
 800c802:	920b      	str	r2, [sp, #44]	@ 0x2c
 800c804:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800c806:	782a      	ldrb	r2, [r5, #0]
 800c808:	2a30      	cmp	r2, #48	@ 0x30
 800c80a:	f040 80b3 	bne.w	800c974 <_strtod_l+0x1a4>
 800c80e:	786a      	ldrb	r2, [r5, #1]
 800c810:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c814:	2a58      	cmp	r2, #88	@ 0x58
 800c816:	d16e      	bne.n	800c8f6 <_strtod_l+0x126>
 800c818:	9302      	str	r3, [sp, #8]
 800c81a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c81c:	9301      	str	r3, [sp, #4]
 800c81e:	ab1a      	add	r3, sp, #104	@ 0x68
 800c820:	9300      	str	r3, [sp, #0]
 800c822:	4a8e      	ldr	r2, [pc, #568]	@ (800ca5c <_strtod_l+0x28c>)
 800c824:	9805      	ldr	r0, [sp, #20]
 800c826:	ab1b      	add	r3, sp, #108	@ 0x6c
 800c828:	a919      	add	r1, sp, #100	@ 0x64
 800c82a:	f001 fca3 	bl	800e174 <__gethex>
 800c82e:	f010 060f 	ands.w	r6, r0, #15
 800c832:	4604      	mov	r4, r0
 800c834:	d005      	beq.n	800c842 <_strtod_l+0x72>
 800c836:	2e06      	cmp	r6, #6
 800c838:	d128      	bne.n	800c88c <_strtod_l+0xbc>
 800c83a:	3501      	adds	r5, #1
 800c83c:	2300      	movs	r3, #0
 800c83e:	9519      	str	r5, [sp, #100]	@ 0x64
 800c840:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c842:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c844:	2b00      	cmp	r3, #0
 800c846:	f040 858e 	bne.w	800d366 <_strtod_l+0xb96>
 800c84a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c84c:	b1cb      	cbz	r3, 800c882 <_strtod_l+0xb2>
 800c84e:	4652      	mov	r2, sl
 800c850:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800c854:	ec43 2b10 	vmov	d0, r2, r3
 800c858:	b01f      	add	sp, #124	@ 0x7c
 800c85a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85e:	2920      	cmp	r1, #32
 800c860:	d1ce      	bne.n	800c800 <_strtod_l+0x30>
 800c862:	3201      	adds	r2, #1
 800c864:	e7c1      	b.n	800c7ea <_strtod_l+0x1a>
 800c866:	292d      	cmp	r1, #45	@ 0x2d
 800c868:	d1ca      	bne.n	800c800 <_strtod_l+0x30>
 800c86a:	2101      	movs	r1, #1
 800c86c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800c86e:	1c51      	adds	r1, r2, #1
 800c870:	9119      	str	r1, [sp, #100]	@ 0x64
 800c872:	7852      	ldrb	r2, [r2, #1]
 800c874:	2a00      	cmp	r2, #0
 800c876:	d1c5      	bne.n	800c804 <_strtod_l+0x34>
 800c878:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c87a:	9419      	str	r4, [sp, #100]	@ 0x64
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	f040 8570 	bne.w	800d362 <_strtod_l+0xb92>
 800c882:	4652      	mov	r2, sl
 800c884:	465b      	mov	r3, fp
 800c886:	e7e5      	b.n	800c854 <_strtod_l+0x84>
 800c888:	2100      	movs	r1, #0
 800c88a:	e7ef      	b.n	800c86c <_strtod_l+0x9c>
 800c88c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800c88e:	b13a      	cbz	r2, 800c8a0 <_strtod_l+0xd0>
 800c890:	2135      	movs	r1, #53	@ 0x35
 800c892:	a81c      	add	r0, sp, #112	@ 0x70
 800c894:	f7ff ff3a 	bl	800c70c <__copybits>
 800c898:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800c89a:	9805      	ldr	r0, [sp, #20]
 800c89c:	f7ff fb08 	bl	800beb0 <_Bfree>
 800c8a0:	3e01      	subs	r6, #1
 800c8a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800c8a4:	2e04      	cmp	r6, #4
 800c8a6:	d806      	bhi.n	800c8b6 <_strtod_l+0xe6>
 800c8a8:	e8df f006 	tbb	[pc, r6]
 800c8ac:	201d0314 	.word	0x201d0314
 800c8b0:	14          	.byte	0x14
 800c8b1:	00          	.byte	0x00
 800c8b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800c8b6:	05e1      	lsls	r1, r4, #23
 800c8b8:	bf48      	it	mi
 800c8ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800c8be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800c8c2:	0d1b      	lsrs	r3, r3, #20
 800c8c4:	051b      	lsls	r3, r3, #20
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d1bb      	bne.n	800c842 <_strtod_l+0x72>
 800c8ca:	f7fe fb2f 	bl	800af2c <__errno>
 800c8ce:	2322      	movs	r3, #34	@ 0x22
 800c8d0:	6003      	str	r3, [r0, #0]
 800c8d2:	e7b6      	b.n	800c842 <_strtod_l+0x72>
 800c8d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800c8d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800c8dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800c8e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c8e4:	e7e7      	b.n	800c8b6 <_strtod_l+0xe6>
 800c8e6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800ca64 <_strtod_l+0x294>
 800c8ea:	e7e4      	b.n	800c8b6 <_strtod_l+0xe6>
 800c8ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800c8f0:	f04f 3aff 	mov.w	sl, #4294967295
 800c8f4:	e7df      	b.n	800c8b6 <_strtod_l+0xe6>
 800c8f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800c8fc:	785b      	ldrb	r3, [r3, #1]
 800c8fe:	2b30      	cmp	r3, #48	@ 0x30
 800c900:	d0f9      	beq.n	800c8f6 <_strtod_l+0x126>
 800c902:	2b00      	cmp	r3, #0
 800c904:	d09d      	beq.n	800c842 <_strtod_l+0x72>
 800c906:	2301      	movs	r3, #1
 800c908:	9309      	str	r3, [sp, #36]	@ 0x24
 800c90a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c90c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c90e:	2300      	movs	r3, #0
 800c910:	9308      	str	r3, [sp, #32]
 800c912:	930a      	str	r3, [sp, #40]	@ 0x28
 800c914:	461f      	mov	r7, r3
 800c916:	220a      	movs	r2, #10
 800c918:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800c91a:	7805      	ldrb	r5, [r0, #0]
 800c91c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800c920:	b2d9      	uxtb	r1, r3
 800c922:	2909      	cmp	r1, #9
 800c924:	d928      	bls.n	800c978 <_strtod_l+0x1a8>
 800c926:	494e      	ldr	r1, [pc, #312]	@ (800ca60 <_strtod_l+0x290>)
 800c928:	2201      	movs	r2, #1
 800c92a:	f7fe faa2 	bl	800ae72 <strncmp>
 800c92e:	2800      	cmp	r0, #0
 800c930:	d032      	beq.n	800c998 <_strtod_l+0x1c8>
 800c932:	2000      	movs	r0, #0
 800c934:	462a      	mov	r2, r5
 800c936:	4681      	mov	r9, r0
 800c938:	463d      	mov	r5, r7
 800c93a:	4603      	mov	r3, r0
 800c93c:	2a65      	cmp	r2, #101	@ 0x65
 800c93e:	d001      	beq.n	800c944 <_strtod_l+0x174>
 800c940:	2a45      	cmp	r2, #69	@ 0x45
 800c942:	d114      	bne.n	800c96e <_strtod_l+0x19e>
 800c944:	b91d      	cbnz	r5, 800c94e <_strtod_l+0x17e>
 800c946:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c948:	4302      	orrs	r2, r0
 800c94a:	d095      	beq.n	800c878 <_strtod_l+0xa8>
 800c94c:	2500      	movs	r5, #0
 800c94e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800c950:	1c62      	adds	r2, r4, #1
 800c952:	9219      	str	r2, [sp, #100]	@ 0x64
 800c954:	7862      	ldrb	r2, [r4, #1]
 800c956:	2a2b      	cmp	r2, #43	@ 0x2b
 800c958:	d077      	beq.n	800ca4a <_strtod_l+0x27a>
 800c95a:	2a2d      	cmp	r2, #45	@ 0x2d
 800c95c:	d07b      	beq.n	800ca56 <_strtod_l+0x286>
 800c95e:	f04f 0c00 	mov.w	ip, #0
 800c962:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800c966:	2909      	cmp	r1, #9
 800c968:	f240 8082 	bls.w	800ca70 <_strtod_l+0x2a0>
 800c96c:	9419      	str	r4, [sp, #100]	@ 0x64
 800c96e:	f04f 0800 	mov.w	r8, #0
 800c972:	e0a2      	b.n	800caba <_strtod_l+0x2ea>
 800c974:	2300      	movs	r3, #0
 800c976:	e7c7      	b.n	800c908 <_strtod_l+0x138>
 800c978:	2f08      	cmp	r7, #8
 800c97a:	bfd5      	itete	le
 800c97c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800c97e:	9908      	ldrgt	r1, [sp, #32]
 800c980:	fb02 3301 	mlale	r3, r2, r1, r3
 800c984:	fb02 3301 	mlagt	r3, r2, r1, r3
 800c988:	f100 0001 	add.w	r0, r0, #1
 800c98c:	bfd4      	ite	le
 800c98e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800c990:	9308      	strgt	r3, [sp, #32]
 800c992:	3701      	adds	r7, #1
 800c994:	9019      	str	r0, [sp, #100]	@ 0x64
 800c996:	e7bf      	b.n	800c918 <_strtod_l+0x148>
 800c998:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c99a:	1c5a      	adds	r2, r3, #1
 800c99c:	9219      	str	r2, [sp, #100]	@ 0x64
 800c99e:	785a      	ldrb	r2, [r3, #1]
 800c9a0:	b37f      	cbz	r7, 800ca02 <_strtod_l+0x232>
 800c9a2:	4681      	mov	r9, r0
 800c9a4:	463d      	mov	r5, r7
 800c9a6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800c9aa:	2b09      	cmp	r3, #9
 800c9ac:	d912      	bls.n	800c9d4 <_strtod_l+0x204>
 800c9ae:	2301      	movs	r3, #1
 800c9b0:	e7c4      	b.n	800c93c <_strtod_l+0x16c>
 800c9b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9b4:	1c5a      	adds	r2, r3, #1
 800c9b6:	9219      	str	r2, [sp, #100]	@ 0x64
 800c9b8:	785a      	ldrb	r2, [r3, #1]
 800c9ba:	3001      	adds	r0, #1
 800c9bc:	2a30      	cmp	r2, #48	@ 0x30
 800c9be:	d0f8      	beq.n	800c9b2 <_strtod_l+0x1e2>
 800c9c0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800c9c4:	2b08      	cmp	r3, #8
 800c9c6:	f200 84d3 	bhi.w	800d370 <_strtod_l+0xba0>
 800c9ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800c9cc:	930c      	str	r3, [sp, #48]	@ 0x30
 800c9ce:	4681      	mov	r9, r0
 800c9d0:	2000      	movs	r0, #0
 800c9d2:	4605      	mov	r5, r0
 800c9d4:	3a30      	subs	r2, #48	@ 0x30
 800c9d6:	f100 0301 	add.w	r3, r0, #1
 800c9da:	d02a      	beq.n	800ca32 <_strtod_l+0x262>
 800c9dc:	4499      	add	r9, r3
 800c9de:	eb00 0c05 	add.w	ip, r0, r5
 800c9e2:	462b      	mov	r3, r5
 800c9e4:	210a      	movs	r1, #10
 800c9e6:	4563      	cmp	r3, ip
 800c9e8:	d10d      	bne.n	800ca06 <_strtod_l+0x236>
 800c9ea:	1c69      	adds	r1, r5, #1
 800c9ec:	4401      	add	r1, r0
 800c9ee:	4428      	add	r0, r5
 800c9f0:	2808      	cmp	r0, #8
 800c9f2:	dc16      	bgt.n	800ca22 <_strtod_l+0x252>
 800c9f4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c9f6:	230a      	movs	r3, #10
 800c9f8:	fb03 2300 	mla	r3, r3, r0, r2
 800c9fc:	930a      	str	r3, [sp, #40]	@ 0x28
 800c9fe:	2300      	movs	r3, #0
 800ca00:	e018      	b.n	800ca34 <_strtod_l+0x264>
 800ca02:	4638      	mov	r0, r7
 800ca04:	e7da      	b.n	800c9bc <_strtod_l+0x1ec>
 800ca06:	2b08      	cmp	r3, #8
 800ca08:	f103 0301 	add.w	r3, r3, #1
 800ca0c:	dc03      	bgt.n	800ca16 <_strtod_l+0x246>
 800ca0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800ca10:	434e      	muls	r6, r1
 800ca12:	960a      	str	r6, [sp, #40]	@ 0x28
 800ca14:	e7e7      	b.n	800c9e6 <_strtod_l+0x216>
 800ca16:	2b10      	cmp	r3, #16
 800ca18:	bfde      	ittt	le
 800ca1a:	9e08      	ldrle	r6, [sp, #32]
 800ca1c:	434e      	mulle	r6, r1
 800ca1e:	9608      	strle	r6, [sp, #32]
 800ca20:	e7e1      	b.n	800c9e6 <_strtod_l+0x216>
 800ca22:	280f      	cmp	r0, #15
 800ca24:	dceb      	bgt.n	800c9fe <_strtod_l+0x22e>
 800ca26:	9808      	ldr	r0, [sp, #32]
 800ca28:	230a      	movs	r3, #10
 800ca2a:	fb03 2300 	mla	r3, r3, r0, r2
 800ca2e:	9308      	str	r3, [sp, #32]
 800ca30:	e7e5      	b.n	800c9fe <_strtod_l+0x22e>
 800ca32:	4629      	mov	r1, r5
 800ca34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca36:	1c50      	adds	r0, r2, #1
 800ca38:	9019      	str	r0, [sp, #100]	@ 0x64
 800ca3a:	7852      	ldrb	r2, [r2, #1]
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	460d      	mov	r5, r1
 800ca40:	e7b1      	b.n	800c9a6 <_strtod_l+0x1d6>
 800ca42:	f04f 0900 	mov.w	r9, #0
 800ca46:	2301      	movs	r3, #1
 800ca48:	e77d      	b.n	800c946 <_strtod_l+0x176>
 800ca4a:	f04f 0c00 	mov.w	ip, #0
 800ca4e:	1ca2      	adds	r2, r4, #2
 800ca50:	9219      	str	r2, [sp, #100]	@ 0x64
 800ca52:	78a2      	ldrb	r2, [r4, #2]
 800ca54:	e785      	b.n	800c962 <_strtod_l+0x192>
 800ca56:	f04f 0c01 	mov.w	ip, #1
 800ca5a:	e7f8      	b.n	800ca4e <_strtod_l+0x27e>
 800ca5c:	08010028 	.word	0x08010028
 800ca60:	08010010 	.word	0x08010010
 800ca64:	7ff00000 	.word	0x7ff00000
 800ca68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca6a:	1c51      	adds	r1, r2, #1
 800ca6c:	9119      	str	r1, [sp, #100]	@ 0x64
 800ca6e:	7852      	ldrb	r2, [r2, #1]
 800ca70:	2a30      	cmp	r2, #48	@ 0x30
 800ca72:	d0f9      	beq.n	800ca68 <_strtod_l+0x298>
 800ca74:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800ca78:	2908      	cmp	r1, #8
 800ca7a:	f63f af78 	bhi.w	800c96e <_strtod_l+0x19e>
 800ca7e:	3a30      	subs	r2, #48	@ 0x30
 800ca80:	920e      	str	r2, [sp, #56]	@ 0x38
 800ca82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca84:	920f      	str	r2, [sp, #60]	@ 0x3c
 800ca86:	f04f 080a 	mov.w	r8, #10
 800ca8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800ca8c:	1c56      	adds	r6, r2, #1
 800ca8e:	9619      	str	r6, [sp, #100]	@ 0x64
 800ca90:	7852      	ldrb	r2, [r2, #1]
 800ca92:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800ca96:	f1be 0f09 	cmp.w	lr, #9
 800ca9a:	d939      	bls.n	800cb10 <_strtod_l+0x340>
 800ca9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800ca9e:	1a76      	subs	r6, r6, r1
 800caa0:	2e08      	cmp	r6, #8
 800caa2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800caa6:	dc03      	bgt.n	800cab0 <_strtod_l+0x2e0>
 800caa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800caaa:	4588      	cmp	r8, r1
 800caac:	bfa8      	it	ge
 800caae:	4688      	movge	r8, r1
 800cab0:	f1bc 0f00 	cmp.w	ip, #0
 800cab4:	d001      	beq.n	800caba <_strtod_l+0x2ea>
 800cab6:	f1c8 0800 	rsb	r8, r8, #0
 800caba:	2d00      	cmp	r5, #0
 800cabc:	d14e      	bne.n	800cb5c <_strtod_l+0x38c>
 800cabe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cac0:	4308      	orrs	r0, r1
 800cac2:	f47f aebe 	bne.w	800c842 <_strtod_l+0x72>
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	f47f aed6 	bne.w	800c878 <_strtod_l+0xa8>
 800cacc:	2a69      	cmp	r2, #105	@ 0x69
 800cace:	d028      	beq.n	800cb22 <_strtod_l+0x352>
 800cad0:	dc25      	bgt.n	800cb1e <_strtod_l+0x34e>
 800cad2:	2a49      	cmp	r2, #73	@ 0x49
 800cad4:	d025      	beq.n	800cb22 <_strtod_l+0x352>
 800cad6:	2a4e      	cmp	r2, #78	@ 0x4e
 800cad8:	f47f aece 	bne.w	800c878 <_strtod_l+0xa8>
 800cadc:	499b      	ldr	r1, [pc, #620]	@ (800cd4c <_strtod_l+0x57c>)
 800cade:	a819      	add	r0, sp, #100	@ 0x64
 800cae0:	f001 fd6a 	bl	800e5b8 <__match>
 800cae4:	2800      	cmp	r0, #0
 800cae6:	f43f aec7 	beq.w	800c878 <_strtod_l+0xa8>
 800caea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800caec:	781b      	ldrb	r3, [r3, #0]
 800caee:	2b28      	cmp	r3, #40	@ 0x28
 800caf0:	d12e      	bne.n	800cb50 <_strtod_l+0x380>
 800caf2:	4997      	ldr	r1, [pc, #604]	@ (800cd50 <_strtod_l+0x580>)
 800caf4:	aa1c      	add	r2, sp, #112	@ 0x70
 800caf6:	a819      	add	r0, sp, #100	@ 0x64
 800caf8:	f001 fd72 	bl	800e5e0 <__hexnan>
 800cafc:	2805      	cmp	r0, #5
 800cafe:	d127      	bne.n	800cb50 <_strtod_l+0x380>
 800cb00:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800cb02:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800cb06:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800cb0a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800cb0e:	e698      	b.n	800c842 <_strtod_l+0x72>
 800cb10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800cb12:	fb08 2101 	mla	r1, r8, r1, r2
 800cb16:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800cb1a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb1c:	e7b5      	b.n	800ca8a <_strtod_l+0x2ba>
 800cb1e:	2a6e      	cmp	r2, #110	@ 0x6e
 800cb20:	e7da      	b.n	800cad8 <_strtod_l+0x308>
 800cb22:	498c      	ldr	r1, [pc, #560]	@ (800cd54 <_strtod_l+0x584>)
 800cb24:	a819      	add	r0, sp, #100	@ 0x64
 800cb26:	f001 fd47 	bl	800e5b8 <__match>
 800cb2a:	2800      	cmp	r0, #0
 800cb2c:	f43f aea4 	beq.w	800c878 <_strtod_l+0xa8>
 800cb30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb32:	4989      	ldr	r1, [pc, #548]	@ (800cd58 <_strtod_l+0x588>)
 800cb34:	3b01      	subs	r3, #1
 800cb36:	a819      	add	r0, sp, #100	@ 0x64
 800cb38:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb3a:	f001 fd3d 	bl	800e5b8 <__match>
 800cb3e:	b910      	cbnz	r0, 800cb46 <_strtod_l+0x376>
 800cb40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cb42:	3301      	adds	r3, #1
 800cb44:	9319      	str	r3, [sp, #100]	@ 0x64
 800cb46:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800cd68 <_strtod_l+0x598>
 800cb4a:	f04f 0a00 	mov.w	sl, #0
 800cb4e:	e678      	b.n	800c842 <_strtod_l+0x72>
 800cb50:	4882      	ldr	r0, [pc, #520]	@ (800cd5c <_strtod_l+0x58c>)
 800cb52:	f001 fa6d 	bl	800e030 <nan>
 800cb56:	ec5b ab10 	vmov	sl, fp, d0
 800cb5a:	e672      	b.n	800c842 <_strtod_l+0x72>
 800cb5c:	eba8 0309 	sub.w	r3, r8, r9
 800cb60:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800cb62:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb64:	2f00      	cmp	r7, #0
 800cb66:	bf08      	it	eq
 800cb68:	462f      	moveq	r7, r5
 800cb6a:	2d10      	cmp	r5, #16
 800cb6c:	462c      	mov	r4, r5
 800cb6e:	bfa8      	it	ge
 800cb70:	2410      	movge	r4, #16
 800cb72:	f7f3 fccf 	bl	8000514 <__aeabi_ui2d>
 800cb76:	2d09      	cmp	r5, #9
 800cb78:	4682      	mov	sl, r0
 800cb7a:	468b      	mov	fp, r1
 800cb7c:	dc13      	bgt.n	800cba6 <_strtod_l+0x3d6>
 800cb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f43f ae5e 	beq.w	800c842 <_strtod_l+0x72>
 800cb86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb88:	dd78      	ble.n	800cc7c <_strtod_l+0x4ac>
 800cb8a:	2b16      	cmp	r3, #22
 800cb8c:	dc5f      	bgt.n	800cc4e <_strtod_l+0x47e>
 800cb8e:	4974      	ldr	r1, [pc, #464]	@ (800cd60 <_strtod_l+0x590>)
 800cb90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cb94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb98:	4652      	mov	r2, sl
 800cb9a:	465b      	mov	r3, fp
 800cb9c:	f7f3 fd34 	bl	8000608 <__aeabi_dmul>
 800cba0:	4682      	mov	sl, r0
 800cba2:	468b      	mov	fp, r1
 800cba4:	e64d      	b.n	800c842 <_strtod_l+0x72>
 800cba6:	4b6e      	ldr	r3, [pc, #440]	@ (800cd60 <_strtod_l+0x590>)
 800cba8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cbac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cbb0:	f7f3 fd2a 	bl	8000608 <__aeabi_dmul>
 800cbb4:	4682      	mov	sl, r0
 800cbb6:	9808      	ldr	r0, [sp, #32]
 800cbb8:	468b      	mov	fp, r1
 800cbba:	f7f3 fcab 	bl	8000514 <__aeabi_ui2d>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	460b      	mov	r3, r1
 800cbc2:	4650      	mov	r0, sl
 800cbc4:	4659      	mov	r1, fp
 800cbc6:	f7f3 fb69 	bl	800029c <__adddf3>
 800cbca:	2d0f      	cmp	r5, #15
 800cbcc:	4682      	mov	sl, r0
 800cbce:	468b      	mov	fp, r1
 800cbd0:	ddd5      	ble.n	800cb7e <_strtod_l+0x3ae>
 800cbd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cbd4:	1b2c      	subs	r4, r5, r4
 800cbd6:	441c      	add	r4, r3
 800cbd8:	2c00      	cmp	r4, #0
 800cbda:	f340 8096 	ble.w	800cd0a <_strtod_l+0x53a>
 800cbde:	f014 030f 	ands.w	r3, r4, #15
 800cbe2:	d00a      	beq.n	800cbfa <_strtod_l+0x42a>
 800cbe4:	495e      	ldr	r1, [pc, #376]	@ (800cd60 <_strtod_l+0x590>)
 800cbe6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbea:	4652      	mov	r2, sl
 800cbec:	465b      	mov	r3, fp
 800cbee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbf2:	f7f3 fd09 	bl	8000608 <__aeabi_dmul>
 800cbf6:	4682      	mov	sl, r0
 800cbf8:	468b      	mov	fp, r1
 800cbfa:	f034 040f 	bics.w	r4, r4, #15
 800cbfe:	d073      	beq.n	800cce8 <_strtod_l+0x518>
 800cc00:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cc04:	dd48      	ble.n	800cc98 <_strtod_l+0x4c8>
 800cc06:	2400      	movs	r4, #0
 800cc08:	46a0      	mov	r8, r4
 800cc0a:	940a      	str	r4, [sp, #40]	@ 0x28
 800cc0c:	46a1      	mov	r9, r4
 800cc0e:	9a05      	ldr	r2, [sp, #20]
 800cc10:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800cd68 <_strtod_l+0x598>
 800cc14:	2322      	movs	r3, #34	@ 0x22
 800cc16:	6013      	str	r3, [r2, #0]
 800cc18:	f04f 0a00 	mov.w	sl, #0
 800cc1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	f43f ae0f 	beq.w	800c842 <_strtod_l+0x72>
 800cc24:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cc26:	9805      	ldr	r0, [sp, #20]
 800cc28:	f7ff f942 	bl	800beb0 <_Bfree>
 800cc2c:	9805      	ldr	r0, [sp, #20]
 800cc2e:	4649      	mov	r1, r9
 800cc30:	f7ff f93e 	bl	800beb0 <_Bfree>
 800cc34:	9805      	ldr	r0, [sp, #20]
 800cc36:	4641      	mov	r1, r8
 800cc38:	f7ff f93a 	bl	800beb0 <_Bfree>
 800cc3c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cc3e:	9805      	ldr	r0, [sp, #20]
 800cc40:	f7ff f936 	bl	800beb0 <_Bfree>
 800cc44:	9805      	ldr	r0, [sp, #20]
 800cc46:	4621      	mov	r1, r4
 800cc48:	f7ff f932 	bl	800beb0 <_Bfree>
 800cc4c:	e5f9      	b.n	800c842 <_strtod_l+0x72>
 800cc4e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cc50:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cc54:	4293      	cmp	r3, r2
 800cc56:	dbbc      	blt.n	800cbd2 <_strtod_l+0x402>
 800cc58:	4c41      	ldr	r4, [pc, #260]	@ (800cd60 <_strtod_l+0x590>)
 800cc5a:	f1c5 050f 	rsb	r5, r5, #15
 800cc5e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cc62:	4652      	mov	r2, sl
 800cc64:	465b      	mov	r3, fp
 800cc66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cc6a:	f7f3 fccd 	bl	8000608 <__aeabi_dmul>
 800cc6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc70:	1b5d      	subs	r5, r3, r5
 800cc72:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cc76:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cc7a:	e78f      	b.n	800cb9c <_strtod_l+0x3cc>
 800cc7c:	3316      	adds	r3, #22
 800cc7e:	dba8      	blt.n	800cbd2 <_strtod_l+0x402>
 800cc80:	4b37      	ldr	r3, [pc, #220]	@ (800cd60 <_strtod_l+0x590>)
 800cc82:	eba9 0808 	sub.w	r8, r9, r8
 800cc86:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cc8a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cc8e:	4650      	mov	r0, sl
 800cc90:	4659      	mov	r1, fp
 800cc92:	f7f3 fde3 	bl	800085c <__aeabi_ddiv>
 800cc96:	e783      	b.n	800cba0 <_strtod_l+0x3d0>
 800cc98:	4b32      	ldr	r3, [pc, #200]	@ (800cd64 <_strtod_l+0x594>)
 800cc9a:	9308      	str	r3, [sp, #32]
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	1124      	asrs	r4, r4, #4
 800cca0:	4650      	mov	r0, sl
 800cca2:	4659      	mov	r1, fp
 800cca4:	461e      	mov	r6, r3
 800cca6:	2c01      	cmp	r4, #1
 800cca8:	dc21      	bgt.n	800ccee <_strtod_l+0x51e>
 800ccaa:	b10b      	cbz	r3, 800ccb0 <_strtod_l+0x4e0>
 800ccac:	4682      	mov	sl, r0
 800ccae:	468b      	mov	fp, r1
 800ccb0:	492c      	ldr	r1, [pc, #176]	@ (800cd64 <_strtod_l+0x594>)
 800ccb2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ccb6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ccba:	4652      	mov	r2, sl
 800ccbc:	465b      	mov	r3, fp
 800ccbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccc2:	f7f3 fca1 	bl	8000608 <__aeabi_dmul>
 800ccc6:	4b28      	ldr	r3, [pc, #160]	@ (800cd68 <_strtod_l+0x598>)
 800ccc8:	460a      	mov	r2, r1
 800ccca:	400b      	ands	r3, r1
 800cccc:	4927      	ldr	r1, [pc, #156]	@ (800cd6c <_strtod_l+0x59c>)
 800ccce:	428b      	cmp	r3, r1
 800ccd0:	4682      	mov	sl, r0
 800ccd2:	d898      	bhi.n	800cc06 <_strtod_l+0x436>
 800ccd4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ccd8:	428b      	cmp	r3, r1
 800ccda:	bf86      	itte	hi
 800ccdc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800cd70 <_strtod_l+0x5a0>
 800cce0:	f04f 3aff 	movhi.w	sl, #4294967295
 800cce4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800cce8:	2300      	movs	r3, #0
 800ccea:	9308      	str	r3, [sp, #32]
 800ccec:	e07a      	b.n	800cde4 <_strtod_l+0x614>
 800ccee:	07e2      	lsls	r2, r4, #31
 800ccf0:	d505      	bpl.n	800ccfe <_strtod_l+0x52e>
 800ccf2:	9b08      	ldr	r3, [sp, #32]
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	f7f3 fc86 	bl	8000608 <__aeabi_dmul>
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	9a08      	ldr	r2, [sp, #32]
 800cd00:	3208      	adds	r2, #8
 800cd02:	3601      	adds	r6, #1
 800cd04:	1064      	asrs	r4, r4, #1
 800cd06:	9208      	str	r2, [sp, #32]
 800cd08:	e7cd      	b.n	800cca6 <_strtod_l+0x4d6>
 800cd0a:	d0ed      	beq.n	800cce8 <_strtod_l+0x518>
 800cd0c:	4264      	negs	r4, r4
 800cd0e:	f014 020f 	ands.w	r2, r4, #15
 800cd12:	d00a      	beq.n	800cd2a <_strtod_l+0x55a>
 800cd14:	4b12      	ldr	r3, [pc, #72]	@ (800cd60 <_strtod_l+0x590>)
 800cd16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd1a:	4650      	mov	r0, sl
 800cd1c:	4659      	mov	r1, fp
 800cd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd22:	f7f3 fd9b 	bl	800085c <__aeabi_ddiv>
 800cd26:	4682      	mov	sl, r0
 800cd28:	468b      	mov	fp, r1
 800cd2a:	1124      	asrs	r4, r4, #4
 800cd2c:	d0dc      	beq.n	800cce8 <_strtod_l+0x518>
 800cd2e:	2c1f      	cmp	r4, #31
 800cd30:	dd20      	ble.n	800cd74 <_strtod_l+0x5a4>
 800cd32:	2400      	movs	r4, #0
 800cd34:	46a0      	mov	r8, r4
 800cd36:	940a      	str	r4, [sp, #40]	@ 0x28
 800cd38:	46a1      	mov	r9, r4
 800cd3a:	9a05      	ldr	r2, [sp, #20]
 800cd3c:	2322      	movs	r3, #34	@ 0x22
 800cd3e:	f04f 0a00 	mov.w	sl, #0
 800cd42:	f04f 0b00 	mov.w	fp, #0
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	e768      	b.n	800cc1c <_strtod_l+0x44c>
 800cd4a:	bf00      	nop
 800cd4c:	0800fdfd 	.word	0x0800fdfd
 800cd50:	08010014 	.word	0x08010014
 800cd54:	0800fdf5 	.word	0x0800fdf5
 800cd58:	0800fe2a 	.word	0x0800fe2a
 800cd5c:	080101d8 	.word	0x080101d8
 800cd60:	0800ff48 	.word	0x0800ff48
 800cd64:	0800ff20 	.word	0x0800ff20
 800cd68:	7ff00000 	.word	0x7ff00000
 800cd6c:	7ca00000 	.word	0x7ca00000
 800cd70:	7fefffff 	.word	0x7fefffff
 800cd74:	f014 0310 	ands.w	r3, r4, #16
 800cd78:	bf18      	it	ne
 800cd7a:	236a      	movne	r3, #106	@ 0x6a
 800cd7c:	4ea9      	ldr	r6, [pc, #676]	@ (800d024 <_strtod_l+0x854>)
 800cd7e:	9308      	str	r3, [sp, #32]
 800cd80:	4650      	mov	r0, sl
 800cd82:	4659      	mov	r1, fp
 800cd84:	2300      	movs	r3, #0
 800cd86:	07e2      	lsls	r2, r4, #31
 800cd88:	d504      	bpl.n	800cd94 <_strtod_l+0x5c4>
 800cd8a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd8e:	f7f3 fc3b 	bl	8000608 <__aeabi_dmul>
 800cd92:	2301      	movs	r3, #1
 800cd94:	1064      	asrs	r4, r4, #1
 800cd96:	f106 0608 	add.w	r6, r6, #8
 800cd9a:	d1f4      	bne.n	800cd86 <_strtod_l+0x5b6>
 800cd9c:	b10b      	cbz	r3, 800cda2 <_strtod_l+0x5d2>
 800cd9e:	4682      	mov	sl, r0
 800cda0:	468b      	mov	fp, r1
 800cda2:	9b08      	ldr	r3, [sp, #32]
 800cda4:	b1b3      	cbz	r3, 800cdd4 <_strtod_l+0x604>
 800cda6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800cdaa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	4659      	mov	r1, fp
 800cdb2:	dd0f      	ble.n	800cdd4 <_strtod_l+0x604>
 800cdb4:	2b1f      	cmp	r3, #31
 800cdb6:	dd55      	ble.n	800ce64 <_strtod_l+0x694>
 800cdb8:	2b34      	cmp	r3, #52	@ 0x34
 800cdba:	bfde      	ittt	le
 800cdbc:	f04f 33ff 	movle.w	r3, #4294967295
 800cdc0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800cdc4:	4093      	lslle	r3, r2
 800cdc6:	f04f 0a00 	mov.w	sl, #0
 800cdca:	bfcc      	ite	gt
 800cdcc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800cdd0:	ea03 0b01 	andle.w	fp, r3, r1
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	4650      	mov	r0, sl
 800cdda:	4659      	mov	r1, fp
 800cddc:	f7f3 fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800cde0:	2800      	cmp	r0, #0
 800cde2:	d1a6      	bne.n	800cd32 <_strtod_l+0x562>
 800cde4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cde6:	9300      	str	r3, [sp, #0]
 800cde8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800cdea:	9805      	ldr	r0, [sp, #20]
 800cdec:	462b      	mov	r3, r5
 800cdee:	463a      	mov	r2, r7
 800cdf0:	f7ff f8c6 	bl	800bf80 <__s2b>
 800cdf4:	900a      	str	r0, [sp, #40]	@ 0x28
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	f43f af05 	beq.w	800cc06 <_strtod_l+0x436>
 800cdfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cdfe:	2a00      	cmp	r2, #0
 800ce00:	eba9 0308 	sub.w	r3, r9, r8
 800ce04:	bfa8      	it	ge
 800ce06:	2300      	movge	r3, #0
 800ce08:	9312      	str	r3, [sp, #72]	@ 0x48
 800ce0a:	2400      	movs	r4, #0
 800ce0c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ce10:	9316      	str	r3, [sp, #88]	@ 0x58
 800ce12:	46a0      	mov	r8, r4
 800ce14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce16:	9805      	ldr	r0, [sp, #20]
 800ce18:	6859      	ldr	r1, [r3, #4]
 800ce1a:	f7ff f809 	bl	800be30 <_Balloc>
 800ce1e:	4681      	mov	r9, r0
 800ce20:	2800      	cmp	r0, #0
 800ce22:	f43f aef4 	beq.w	800cc0e <_strtod_l+0x43e>
 800ce26:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce28:	691a      	ldr	r2, [r3, #16]
 800ce2a:	3202      	adds	r2, #2
 800ce2c:	f103 010c 	add.w	r1, r3, #12
 800ce30:	0092      	lsls	r2, r2, #2
 800ce32:	300c      	adds	r0, #12
 800ce34:	f001 f8ee 	bl	800e014 <memcpy>
 800ce38:	ec4b ab10 	vmov	d0, sl, fp
 800ce3c:	9805      	ldr	r0, [sp, #20]
 800ce3e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce40:	a91b      	add	r1, sp, #108	@ 0x6c
 800ce42:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ce46:	f7ff fbd7 	bl	800c5f8 <__d2b>
 800ce4a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ce4c:	2800      	cmp	r0, #0
 800ce4e:	f43f aede 	beq.w	800cc0e <_strtod_l+0x43e>
 800ce52:	9805      	ldr	r0, [sp, #20]
 800ce54:	2101      	movs	r1, #1
 800ce56:	f7ff f929 	bl	800c0ac <__i2b>
 800ce5a:	4680      	mov	r8, r0
 800ce5c:	b948      	cbnz	r0, 800ce72 <_strtod_l+0x6a2>
 800ce5e:	f04f 0800 	mov.w	r8, #0
 800ce62:	e6d4      	b.n	800cc0e <_strtod_l+0x43e>
 800ce64:	f04f 32ff 	mov.w	r2, #4294967295
 800ce68:	fa02 f303 	lsl.w	r3, r2, r3
 800ce6c:	ea03 0a0a 	and.w	sl, r3, sl
 800ce70:	e7b0      	b.n	800cdd4 <_strtod_l+0x604>
 800ce72:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ce74:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ce76:	2d00      	cmp	r5, #0
 800ce78:	bfab      	itete	ge
 800ce7a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ce7c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ce7e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ce80:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ce82:	bfac      	ite	ge
 800ce84:	18ef      	addge	r7, r5, r3
 800ce86:	1b5e      	sublt	r6, r3, r5
 800ce88:	9b08      	ldr	r3, [sp, #32]
 800ce8a:	1aed      	subs	r5, r5, r3
 800ce8c:	4415      	add	r5, r2
 800ce8e:	4b66      	ldr	r3, [pc, #408]	@ (800d028 <_strtod_l+0x858>)
 800ce90:	3d01      	subs	r5, #1
 800ce92:	429d      	cmp	r5, r3
 800ce94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ce98:	da50      	bge.n	800cf3c <_strtod_l+0x76c>
 800ce9a:	1b5b      	subs	r3, r3, r5
 800ce9c:	2b1f      	cmp	r3, #31
 800ce9e:	eba2 0203 	sub.w	r2, r2, r3
 800cea2:	f04f 0101 	mov.w	r1, #1
 800cea6:	dc3d      	bgt.n	800cf24 <_strtod_l+0x754>
 800cea8:	fa01 f303 	lsl.w	r3, r1, r3
 800ceac:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ceae:	2300      	movs	r3, #0
 800ceb0:	9310      	str	r3, [sp, #64]	@ 0x40
 800ceb2:	18bd      	adds	r5, r7, r2
 800ceb4:	9b08      	ldr	r3, [sp, #32]
 800ceb6:	42af      	cmp	r7, r5
 800ceb8:	4416      	add	r6, r2
 800ceba:	441e      	add	r6, r3
 800cebc:	463b      	mov	r3, r7
 800cebe:	bfa8      	it	ge
 800cec0:	462b      	movge	r3, r5
 800cec2:	42b3      	cmp	r3, r6
 800cec4:	bfa8      	it	ge
 800cec6:	4633      	movge	r3, r6
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	bfc2      	ittt	gt
 800cecc:	1aed      	subgt	r5, r5, r3
 800cece:	1af6      	subgt	r6, r6, r3
 800ced0:	1aff      	subgt	r7, r7, r3
 800ced2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	dd16      	ble.n	800cf06 <_strtod_l+0x736>
 800ced8:	4641      	mov	r1, r8
 800ceda:	9805      	ldr	r0, [sp, #20]
 800cedc:	461a      	mov	r2, r3
 800cede:	f7ff f9a5 	bl	800c22c <__pow5mult>
 800cee2:	4680      	mov	r8, r0
 800cee4:	2800      	cmp	r0, #0
 800cee6:	d0ba      	beq.n	800ce5e <_strtod_l+0x68e>
 800cee8:	4601      	mov	r1, r0
 800ceea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ceec:	9805      	ldr	r0, [sp, #20]
 800ceee:	f7ff f8f3 	bl	800c0d8 <__multiply>
 800cef2:	900e      	str	r0, [sp, #56]	@ 0x38
 800cef4:	2800      	cmp	r0, #0
 800cef6:	f43f ae8a 	beq.w	800cc0e <_strtod_l+0x43e>
 800cefa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cefc:	9805      	ldr	r0, [sp, #20]
 800cefe:	f7fe ffd7 	bl	800beb0 <_Bfree>
 800cf02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cf04:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf06:	2d00      	cmp	r5, #0
 800cf08:	dc1d      	bgt.n	800cf46 <_strtod_l+0x776>
 800cf0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	dd23      	ble.n	800cf58 <_strtod_l+0x788>
 800cf10:	4649      	mov	r1, r9
 800cf12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800cf14:	9805      	ldr	r0, [sp, #20]
 800cf16:	f7ff f989 	bl	800c22c <__pow5mult>
 800cf1a:	4681      	mov	r9, r0
 800cf1c:	b9e0      	cbnz	r0, 800cf58 <_strtod_l+0x788>
 800cf1e:	f04f 0900 	mov.w	r9, #0
 800cf22:	e674      	b.n	800cc0e <_strtod_l+0x43e>
 800cf24:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800cf28:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800cf2c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800cf30:	35e2      	adds	r5, #226	@ 0xe2
 800cf32:	fa01 f305 	lsl.w	r3, r1, r5
 800cf36:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf38:	9113      	str	r1, [sp, #76]	@ 0x4c
 800cf3a:	e7ba      	b.n	800ceb2 <_strtod_l+0x6e2>
 800cf3c:	2300      	movs	r3, #0
 800cf3e:	9310      	str	r3, [sp, #64]	@ 0x40
 800cf40:	2301      	movs	r3, #1
 800cf42:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cf44:	e7b5      	b.n	800ceb2 <_strtod_l+0x6e2>
 800cf46:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf48:	9805      	ldr	r0, [sp, #20]
 800cf4a:	462a      	mov	r2, r5
 800cf4c:	f7ff f9c8 	bl	800c2e0 <__lshift>
 800cf50:	901a      	str	r0, [sp, #104]	@ 0x68
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d1d9      	bne.n	800cf0a <_strtod_l+0x73a>
 800cf56:	e65a      	b.n	800cc0e <_strtod_l+0x43e>
 800cf58:	2e00      	cmp	r6, #0
 800cf5a:	dd07      	ble.n	800cf6c <_strtod_l+0x79c>
 800cf5c:	4649      	mov	r1, r9
 800cf5e:	9805      	ldr	r0, [sp, #20]
 800cf60:	4632      	mov	r2, r6
 800cf62:	f7ff f9bd 	bl	800c2e0 <__lshift>
 800cf66:	4681      	mov	r9, r0
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0d8      	beq.n	800cf1e <_strtod_l+0x74e>
 800cf6c:	2f00      	cmp	r7, #0
 800cf6e:	dd08      	ble.n	800cf82 <_strtod_l+0x7b2>
 800cf70:	4641      	mov	r1, r8
 800cf72:	9805      	ldr	r0, [sp, #20]
 800cf74:	463a      	mov	r2, r7
 800cf76:	f7ff f9b3 	bl	800c2e0 <__lshift>
 800cf7a:	4680      	mov	r8, r0
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	f43f ae46 	beq.w	800cc0e <_strtod_l+0x43e>
 800cf82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf84:	9805      	ldr	r0, [sp, #20]
 800cf86:	464a      	mov	r2, r9
 800cf88:	f7ff fa32 	bl	800c3f0 <__mdiff>
 800cf8c:	4604      	mov	r4, r0
 800cf8e:	2800      	cmp	r0, #0
 800cf90:	f43f ae3d 	beq.w	800cc0e <_strtod_l+0x43e>
 800cf94:	68c3      	ldr	r3, [r0, #12]
 800cf96:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cf98:	2300      	movs	r3, #0
 800cf9a:	60c3      	str	r3, [r0, #12]
 800cf9c:	4641      	mov	r1, r8
 800cf9e:	f7ff fa0b 	bl	800c3b8 <__mcmp>
 800cfa2:	2800      	cmp	r0, #0
 800cfa4:	da46      	bge.n	800d034 <_strtod_l+0x864>
 800cfa6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800cfa8:	ea53 030a 	orrs.w	r3, r3, sl
 800cfac:	d16c      	bne.n	800d088 <_strtod_l+0x8b8>
 800cfae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d168      	bne.n	800d088 <_strtod_l+0x8b8>
 800cfb6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfba:	0d1b      	lsrs	r3, r3, #20
 800cfbc:	051b      	lsls	r3, r3, #20
 800cfbe:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cfc2:	d961      	bls.n	800d088 <_strtod_l+0x8b8>
 800cfc4:	6963      	ldr	r3, [r4, #20]
 800cfc6:	b913      	cbnz	r3, 800cfce <_strtod_l+0x7fe>
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	dd5c      	ble.n	800d088 <_strtod_l+0x8b8>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	9805      	ldr	r0, [sp, #20]
 800cfd4:	f7ff f984 	bl	800c2e0 <__lshift>
 800cfd8:	4641      	mov	r1, r8
 800cfda:	4604      	mov	r4, r0
 800cfdc:	f7ff f9ec 	bl	800c3b8 <__mcmp>
 800cfe0:	2800      	cmp	r0, #0
 800cfe2:	dd51      	ble.n	800d088 <_strtod_l+0x8b8>
 800cfe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cfe8:	9a08      	ldr	r2, [sp, #32]
 800cfea:	0d1b      	lsrs	r3, r3, #20
 800cfec:	051b      	lsls	r3, r3, #20
 800cfee:	2a00      	cmp	r2, #0
 800cff0:	d06b      	beq.n	800d0ca <_strtod_l+0x8fa>
 800cff2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800cff6:	d868      	bhi.n	800d0ca <_strtod_l+0x8fa>
 800cff8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800cffc:	f67f ae9d 	bls.w	800cd3a <_strtod_l+0x56a>
 800d000:	4b0a      	ldr	r3, [pc, #40]	@ (800d02c <_strtod_l+0x85c>)
 800d002:	4650      	mov	r0, sl
 800d004:	4659      	mov	r1, fp
 800d006:	2200      	movs	r2, #0
 800d008:	f7f3 fafe 	bl	8000608 <__aeabi_dmul>
 800d00c:	4b08      	ldr	r3, [pc, #32]	@ (800d030 <_strtod_l+0x860>)
 800d00e:	400b      	ands	r3, r1
 800d010:	4682      	mov	sl, r0
 800d012:	468b      	mov	fp, r1
 800d014:	2b00      	cmp	r3, #0
 800d016:	f47f ae05 	bne.w	800cc24 <_strtod_l+0x454>
 800d01a:	9a05      	ldr	r2, [sp, #20]
 800d01c:	2322      	movs	r3, #34	@ 0x22
 800d01e:	6013      	str	r3, [r2, #0]
 800d020:	e600      	b.n	800cc24 <_strtod_l+0x454>
 800d022:	bf00      	nop
 800d024:	08010040 	.word	0x08010040
 800d028:	fffffc02 	.word	0xfffffc02
 800d02c:	39500000 	.word	0x39500000
 800d030:	7ff00000 	.word	0x7ff00000
 800d034:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d038:	d165      	bne.n	800d106 <_strtod_l+0x936>
 800d03a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d03c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d040:	b35a      	cbz	r2, 800d09a <_strtod_l+0x8ca>
 800d042:	4a9f      	ldr	r2, [pc, #636]	@ (800d2c0 <_strtod_l+0xaf0>)
 800d044:	4293      	cmp	r3, r2
 800d046:	d12b      	bne.n	800d0a0 <_strtod_l+0x8d0>
 800d048:	9b08      	ldr	r3, [sp, #32]
 800d04a:	4651      	mov	r1, sl
 800d04c:	b303      	cbz	r3, 800d090 <_strtod_l+0x8c0>
 800d04e:	4b9d      	ldr	r3, [pc, #628]	@ (800d2c4 <_strtod_l+0xaf4>)
 800d050:	465a      	mov	r2, fp
 800d052:	4013      	ands	r3, r2
 800d054:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d058:	f04f 32ff 	mov.w	r2, #4294967295
 800d05c:	d81b      	bhi.n	800d096 <_strtod_l+0x8c6>
 800d05e:	0d1b      	lsrs	r3, r3, #20
 800d060:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d064:	fa02 f303 	lsl.w	r3, r2, r3
 800d068:	4299      	cmp	r1, r3
 800d06a:	d119      	bne.n	800d0a0 <_strtod_l+0x8d0>
 800d06c:	4b96      	ldr	r3, [pc, #600]	@ (800d2c8 <_strtod_l+0xaf8>)
 800d06e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d070:	429a      	cmp	r2, r3
 800d072:	d102      	bne.n	800d07a <_strtod_l+0x8aa>
 800d074:	3101      	adds	r1, #1
 800d076:	f43f adca 	beq.w	800cc0e <_strtod_l+0x43e>
 800d07a:	4b92      	ldr	r3, [pc, #584]	@ (800d2c4 <_strtod_l+0xaf4>)
 800d07c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d07e:	401a      	ands	r2, r3
 800d080:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d084:	f04f 0a00 	mov.w	sl, #0
 800d088:	9b08      	ldr	r3, [sp, #32]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d1b8      	bne.n	800d000 <_strtod_l+0x830>
 800d08e:	e5c9      	b.n	800cc24 <_strtod_l+0x454>
 800d090:	f04f 33ff 	mov.w	r3, #4294967295
 800d094:	e7e8      	b.n	800d068 <_strtod_l+0x898>
 800d096:	4613      	mov	r3, r2
 800d098:	e7e6      	b.n	800d068 <_strtod_l+0x898>
 800d09a:	ea53 030a 	orrs.w	r3, r3, sl
 800d09e:	d0a1      	beq.n	800cfe4 <_strtod_l+0x814>
 800d0a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d0a2:	b1db      	cbz	r3, 800d0dc <_strtod_l+0x90c>
 800d0a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d0a6:	4213      	tst	r3, r2
 800d0a8:	d0ee      	beq.n	800d088 <_strtod_l+0x8b8>
 800d0aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d0ac:	9a08      	ldr	r2, [sp, #32]
 800d0ae:	4650      	mov	r0, sl
 800d0b0:	4659      	mov	r1, fp
 800d0b2:	b1bb      	cbz	r3, 800d0e4 <_strtod_l+0x914>
 800d0b4:	f7ff fb6e 	bl	800c794 <sulp>
 800d0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0bc:	ec53 2b10 	vmov	r2, r3, d0
 800d0c0:	f7f3 f8ec 	bl	800029c <__adddf3>
 800d0c4:	4682      	mov	sl, r0
 800d0c6:	468b      	mov	fp, r1
 800d0c8:	e7de      	b.n	800d088 <_strtod_l+0x8b8>
 800d0ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d0ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d0d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d0d6:	f04f 3aff 	mov.w	sl, #4294967295
 800d0da:	e7d5      	b.n	800d088 <_strtod_l+0x8b8>
 800d0dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d0de:	ea13 0f0a 	tst.w	r3, sl
 800d0e2:	e7e1      	b.n	800d0a8 <_strtod_l+0x8d8>
 800d0e4:	f7ff fb56 	bl	800c794 <sulp>
 800d0e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d0ec:	ec53 2b10 	vmov	r2, r3, d0
 800d0f0:	f7f3 f8d2 	bl	8000298 <__aeabi_dsub>
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	4682      	mov	sl, r0
 800d0fa:	468b      	mov	fp, r1
 800d0fc:	f7f3 fcec 	bl	8000ad8 <__aeabi_dcmpeq>
 800d100:	2800      	cmp	r0, #0
 800d102:	d0c1      	beq.n	800d088 <_strtod_l+0x8b8>
 800d104:	e619      	b.n	800cd3a <_strtod_l+0x56a>
 800d106:	4641      	mov	r1, r8
 800d108:	4620      	mov	r0, r4
 800d10a:	f7ff facd 	bl	800c6a8 <__ratio>
 800d10e:	ec57 6b10 	vmov	r6, r7, d0
 800d112:	2200      	movs	r2, #0
 800d114:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 fcf0 	bl	8000b00 <__aeabi_dcmple>
 800d120:	2800      	cmp	r0, #0
 800d122:	d06f      	beq.n	800d204 <_strtod_l+0xa34>
 800d124:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d126:	2b00      	cmp	r3, #0
 800d128:	d17a      	bne.n	800d220 <_strtod_l+0xa50>
 800d12a:	f1ba 0f00 	cmp.w	sl, #0
 800d12e:	d158      	bne.n	800d1e2 <_strtod_l+0xa12>
 800d130:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d132:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d136:	2b00      	cmp	r3, #0
 800d138:	d15a      	bne.n	800d1f0 <_strtod_l+0xa20>
 800d13a:	4b64      	ldr	r3, [pc, #400]	@ (800d2cc <_strtod_l+0xafc>)
 800d13c:	2200      	movs	r2, #0
 800d13e:	4630      	mov	r0, r6
 800d140:	4639      	mov	r1, r7
 800d142:	f7f3 fcd3 	bl	8000aec <__aeabi_dcmplt>
 800d146:	2800      	cmp	r0, #0
 800d148:	d159      	bne.n	800d1fe <_strtod_l+0xa2e>
 800d14a:	4630      	mov	r0, r6
 800d14c:	4639      	mov	r1, r7
 800d14e:	4b60      	ldr	r3, [pc, #384]	@ (800d2d0 <_strtod_l+0xb00>)
 800d150:	2200      	movs	r2, #0
 800d152:	f7f3 fa59 	bl	8000608 <__aeabi_dmul>
 800d156:	4606      	mov	r6, r0
 800d158:	460f      	mov	r7, r1
 800d15a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d15e:	9606      	str	r6, [sp, #24]
 800d160:	9307      	str	r3, [sp, #28]
 800d162:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d166:	4d57      	ldr	r5, [pc, #348]	@ (800d2c4 <_strtod_l+0xaf4>)
 800d168:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d16c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d16e:	401d      	ands	r5, r3
 800d170:	4b58      	ldr	r3, [pc, #352]	@ (800d2d4 <_strtod_l+0xb04>)
 800d172:	429d      	cmp	r5, r3
 800d174:	f040 80b2 	bne.w	800d2dc <_strtod_l+0xb0c>
 800d178:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d17a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d17e:	ec4b ab10 	vmov	d0, sl, fp
 800d182:	f7ff f9c9 	bl	800c518 <__ulp>
 800d186:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d18a:	ec51 0b10 	vmov	r0, r1, d0
 800d18e:	f7f3 fa3b 	bl	8000608 <__aeabi_dmul>
 800d192:	4652      	mov	r2, sl
 800d194:	465b      	mov	r3, fp
 800d196:	f7f3 f881 	bl	800029c <__adddf3>
 800d19a:	460b      	mov	r3, r1
 800d19c:	4949      	ldr	r1, [pc, #292]	@ (800d2c4 <_strtod_l+0xaf4>)
 800d19e:	4a4e      	ldr	r2, [pc, #312]	@ (800d2d8 <_strtod_l+0xb08>)
 800d1a0:	4019      	ands	r1, r3
 800d1a2:	4291      	cmp	r1, r2
 800d1a4:	4682      	mov	sl, r0
 800d1a6:	d942      	bls.n	800d22e <_strtod_l+0xa5e>
 800d1a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d1aa:	4b47      	ldr	r3, [pc, #284]	@ (800d2c8 <_strtod_l+0xaf8>)
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d103      	bne.n	800d1b8 <_strtod_l+0x9e8>
 800d1b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d1b2:	3301      	adds	r3, #1
 800d1b4:	f43f ad2b 	beq.w	800cc0e <_strtod_l+0x43e>
 800d1b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d2c8 <_strtod_l+0xaf8>
 800d1bc:	f04f 3aff 	mov.w	sl, #4294967295
 800d1c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d1c2:	9805      	ldr	r0, [sp, #20]
 800d1c4:	f7fe fe74 	bl	800beb0 <_Bfree>
 800d1c8:	9805      	ldr	r0, [sp, #20]
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	f7fe fe70 	bl	800beb0 <_Bfree>
 800d1d0:	9805      	ldr	r0, [sp, #20]
 800d1d2:	4641      	mov	r1, r8
 800d1d4:	f7fe fe6c 	bl	800beb0 <_Bfree>
 800d1d8:	9805      	ldr	r0, [sp, #20]
 800d1da:	4621      	mov	r1, r4
 800d1dc:	f7fe fe68 	bl	800beb0 <_Bfree>
 800d1e0:	e618      	b.n	800ce14 <_strtod_l+0x644>
 800d1e2:	f1ba 0f01 	cmp.w	sl, #1
 800d1e6:	d103      	bne.n	800d1f0 <_strtod_l+0xa20>
 800d1e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	f43f ada5 	beq.w	800cd3a <_strtod_l+0x56a>
 800d1f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d2a0 <_strtod_l+0xad0>
 800d1f4:	4f35      	ldr	r7, [pc, #212]	@ (800d2cc <_strtod_l+0xafc>)
 800d1f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d1fa:	2600      	movs	r6, #0
 800d1fc:	e7b1      	b.n	800d162 <_strtod_l+0x992>
 800d1fe:	4f34      	ldr	r7, [pc, #208]	@ (800d2d0 <_strtod_l+0xb00>)
 800d200:	2600      	movs	r6, #0
 800d202:	e7aa      	b.n	800d15a <_strtod_l+0x98a>
 800d204:	4b32      	ldr	r3, [pc, #200]	@ (800d2d0 <_strtod_l+0xb00>)
 800d206:	4630      	mov	r0, r6
 800d208:	4639      	mov	r1, r7
 800d20a:	2200      	movs	r2, #0
 800d20c:	f7f3 f9fc 	bl	8000608 <__aeabi_dmul>
 800d210:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d212:	4606      	mov	r6, r0
 800d214:	460f      	mov	r7, r1
 800d216:	2b00      	cmp	r3, #0
 800d218:	d09f      	beq.n	800d15a <_strtod_l+0x98a>
 800d21a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d21e:	e7a0      	b.n	800d162 <_strtod_l+0x992>
 800d220:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d2a8 <_strtod_l+0xad8>
 800d224:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d228:	ec57 6b17 	vmov	r6, r7, d7
 800d22c:	e799      	b.n	800d162 <_strtod_l+0x992>
 800d22e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d232:	9b08      	ldr	r3, [sp, #32]
 800d234:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d1c1      	bne.n	800d1c0 <_strtod_l+0x9f0>
 800d23c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d240:	0d1b      	lsrs	r3, r3, #20
 800d242:	051b      	lsls	r3, r3, #20
 800d244:	429d      	cmp	r5, r3
 800d246:	d1bb      	bne.n	800d1c0 <_strtod_l+0x9f0>
 800d248:	4630      	mov	r0, r6
 800d24a:	4639      	mov	r1, r7
 800d24c:	f7f3 fd3c 	bl	8000cc8 <__aeabi_d2lz>
 800d250:	f7f3 f9ac 	bl	80005ac <__aeabi_l2d>
 800d254:	4602      	mov	r2, r0
 800d256:	460b      	mov	r3, r1
 800d258:	4630      	mov	r0, r6
 800d25a:	4639      	mov	r1, r7
 800d25c:	f7f3 f81c 	bl	8000298 <__aeabi_dsub>
 800d260:	460b      	mov	r3, r1
 800d262:	4602      	mov	r2, r0
 800d264:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d268:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d26c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d26e:	ea46 060a 	orr.w	r6, r6, sl
 800d272:	431e      	orrs	r6, r3
 800d274:	d06f      	beq.n	800d356 <_strtod_l+0xb86>
 800d276:	a30e      	add	r3, pc, #56	@ (adr r3, 800d2b0 <_strtod_l+0xae0>)
 800d278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d27c:	f7f3 fc36 	bl	8000aec <__aeabi_dcmplt>
 800d280:	2800      	cmp	r0, #0
 800d282:	f47f accf 	bne.w	800cc24 <_strtod_l+0x454>
 800d286:	a30c      	add	r3, pc, #48	@ (adr r3, 800d2b8 <_strtod_l+0xae8>)
 800d288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d28c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d290:	f7f3 fc4a 	bl	8000b28 <__aeabi_dcmpgt>
 800d294:	2800      	cmp	r0, #0
 800d296:	d093      	beq.n	800d1c0 <_strtod_l+0x9f0>
 800d298:	e4c4      	b.n	800cc24 <_strtod_l+0x454>
 800d29a:	bf00      	nop
 800d29c:	f3af 8000 	nop.w
 800d2a0:	00000000 	.word	0x00000000
 800d2a4:	bff00000 	.word	0xbff00000
 800d2a8:	00000000 	.word	0x00000000
 800d2ac:	3ff00000 	.word	0x3ff00000
 800d2b0:	94a03595 	.word	0x94a03595
 800d2b4:	3fdfffff 	.word	0x3fdfffff
 800d2b8:	35afe535 	.word	0x35afe535
 800d2bc:	3fe00000 	.word	0x3fe00000
 800d2c0:	000fffff 	.word	0x000fffff
 800d2c4:	7ff00000 	.word	0x7ff00000
 800d2c8:	7fefffff 	.word	0x7fefffff
 800d2cc:	3ff00000 	.word	0x3ff00000
 800d2d0:	3fe00000 	.word	0x3fe00000
 800d2d4:	7fe00000 	.word	0x7fe00000
 800d2d8:	7c9fffff 	.word	0x7c9fffff
 800d2dc:	9b08      	ldr	r3, [sp, #32]
 800d2de:	b323      	cbz	r3, 800d32a <_strtod_l+0xb5a>
 800d2e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d2e4:	d821      	bhi.n	800d32a <_strtod_l+0xb5a>
 800d2e6:	a328      	add	r3, pc, #160	@ (adr r3, 800d388 <_strtod_l+0xbb8>)
 800d2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ec:	4630      	mov	r0, r6
 800d2ee:	4639      	mov	r1, r7
 800d2f0:	f7f3 fc06 	bl	8000b00 <__aeabi_dcmple>
 800d2f4:	b1a0      	cbz	r0, 800d320 <_strtod_l+0xb50>
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	4630      	mov	r0, r6
 800d2fa:	f7f3 fc5d 	bl	8000bb8 <__aeabi_d2uiz>
 800d2fe:	2801      	cmp	r0, #1
 800d300:	bf38      	it	cc
 800d302:	2001      	movcc	r0, #1
 800d304:	f7f3 f906 	bl	8000514 <__aeabi_ui2d>
 800d308:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d30a:	4606      	mov	r6, r0
 800d30c:	460f      	mov	r7, r1
 800d30e:	b9fb      	cbnz	r3, 800d350 <_strtod_l+0xb80>
 800d310:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d314:	9014      	str	r0, [sp, #80]	@ 0x50
 800d316:	9315      	str	r3, [sp, #84]	@ 0x54
 800d318:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d31c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d320:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d322:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d326:	1b5b      	subs	r3, r3, r5
 800d328:	9311      	str	r3, [sp, #68]	@ 0x44
 800d32a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d32e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d332:	f7ff f8f1 	bl	800c518 <__ulp>
 800d336:	4650      	mov	r0, sl
 800d338:	ec53 2b10 	vmov	r2, r3, d0
 800d33c:	4659      	mov	r1, fp
 800d33e:	f7f3 f963 	bl	8000608 <__aeabi_dmul>
 800d342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d346:	f7f2 ffa9 	bl	800029c <__adddf3>
 800d34a:	4682      	mov	sl, r0
 800d34c:	468b      	mov	fp, r1
 800d34e:	e770      	b.n	800d232 <_strtod_l+0xa62>
 800d350:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d354:	e7e0      	b.n	800d318 <_strtod_l+0xb48>
 800d356:	a30e      	add	r3, pc, #56	@ (adr r3, 800d390 <_strtod_l+0xbc0>)
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	f7f3 fbc6 	bl	8000aec <__aeabi_dcmplt>
 800d360:	e798      	b.n	800d294 <_strtod_l+0xac4>
 800d362:	2300      	movs	r3, #0
 800d364:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d366:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d368:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d36a:	6013      	str	r3, [r2, #0]
 800d36c:	f7ff ba6d 	b.w	800c84a <_strtod_l+0x7a>
 800d370:	2a65      	cmp	r2, #101	@ 0x65
 800d372:	f43f ab66 	beq.w	800ca42 <_strtod_l+0x272>
 800d376:	2a45      	cmp	r2, #69	@ 0x45
 800d378:	f43f ab63 	beq.w	800ca42 <_strtod_l+0x272>
 800d37c:	2301      	movs	r3, #1
 800d37e:	f7ff bb9e 	b.w	800cabe <_strtod_l+0x2ee>
 800d382:	bf00      	nop
 800d384:	f3af 8000 	nop.w
 800d388:	ffc00000 	.word	0xffc00000
 800d38c:	41dfffff 	.word	0x41dfffff
 800d390:	94a03595 	.word	0x94a03595
 800d394:	3fcfffff 	.word	0x3fcfffff

0800d398 <_strtod_r>:
 800d398:	4b01      	ldr	r3, [pc, #4]	@ (800d3a0 <_strtod_r+0x8>)
 800d39a:	f7ff ba19 	b.w	800c7d0 <_strtod_l>
 800d39e:	bf00      	nop
 800d3a0:	2000006c 	.word	0x2000006c

0800d3a4 <_strtol_l.constprop.0>:
 800d3a4:	2b24      	cmp	r3, #36	@ 0x24
 800d3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3aa:	4686      	mov	lr, r0
 800d3ac:	4690      	mov	r8, r2
 800d3ae:	d801      	bhi.n	800d3b4 <_strtol_l.constprop.0+0x10>
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d106      	bne.n	800d3c2 <_strtol_l.constprop.0+0x1e>
 800d3b4:	f7fd fdba 	bl	800af2c <__errno>
 800d3b8:	2316      	movs	r3, #22
 800d3ba:	6003      	str	r3, [r0, #0]
 800d3bc:	2000      	movs	r0, #0
 800d3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3c2:	4834      	ldr	r0, [pc, #208]	@ (800d494 <_strtol_l.constprop.0+0xf0>)
 800d3c4:	460d      	mov	r5, r1
 800d3c6:	462a      	mov	r2, r5
 800d3c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d3cc:	5d06      	ldrb	r6, [r0, r4]
 800d3ce:	f016 0608 	ands.w	r6, r6, #8
 800d3d2:	d1f8      	bne.n	800d3c6 <_strtol_l.constprop.0+0x22>
 800d3d4:	2c2d      	cmp	r4, #45	@ 0x2d
 800d3d6:	d12d      	bne.n	800d434 <_strtol_l.constprop.0+0x90>
 800d3d8:	782c      	ldrb	r4, [r5, #0]
 800d3da:	2601      	movs	r6, #1
 800d3dc:	1c95      	adds	r5, r2, #2
 800d3de:	f033 0210 	bics.w	r2, r3, #16
 800d3e2:	d109      	bne.n	800d3f8 <_strtol_l.constprop.0+0x54>
 800d3e4:	2c30      	cmp	r4, #48	@ 0x30
 800d3e6:	d12a      	bne.n	800d43e <_strtol_l.constprop.0+0x9a>
 800d3e8:	782a      	ldrb	r2, [r5, #0]
 800d3ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d3ee:	2a58      	cmp	r2, #88	@ 0x58
 800d3f0:	d125      	bne.n	800d43e <_strtol_l.constprop.0+0x9a>
 800d3f2:	786c      	ldrb	r4, [r5, #1]
 800d3f4:	2310      	movs	r3, #16
 800d3f6:	3502      	adds	r5, #2
 800d3f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d3fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d400:	2200      	movs	r2, #0
 800d402:	fbbc f9f3 	udiv	r9, ip, r3
 800d406:	4610      	mov	r0, r2
 800d408:	fb03 ca19 	mls	sl, r3, r9, ip
 800d40c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d410:	2f09      	cmp	r7, #9
 800d412:	d81b      	bhi.n	800d44c <_strtol_l.constprop.0+0xa8>
 800d414:	463c      	mov	r4, r7
 800d416:	42a3      	cmp	r3, r4
 800d418:	dd27      	ble.n	800d46a <_strtol_l.constprop.0+0xc6>
 800d41a:	1c57      	adds	r7, r2, #1
 800d41c:	d007      	beq.n	800d42e <_strtol_l.constprop.0+0x8a>
 800d41e:	4581      	cmp	r9, r0
 800d420:	d320      	bcc.n	800d464 <_strtol_l.constprop.0+0xc0>
 800d422:	d101      	bne.n	800d428 <_strtol_l.constprop.0+0x84>
 800d424:	45a2      	cmp	sl, r4
 800d426:	db1d      	blt.n	800d464 <_strtol_l.constprop.0+0xc0>
 800d428:	fb00 4003 	mla	r0, r0, r3, r4
 800d42c:	2201      	movs	r2, #1
 800d42e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d432:	e7eb      	b.n	800d40c <_strtol_l.constprop.0+0x68>
 800d434:	2c2b      	cmp	r4, #43	@ 0x2b
 800d436:	bf04      	itt	eq
 800d438:	782c      	ldrbeq	r4, [r5, #0]
 800d43a:	1c95      	addeq	r5, r2, #2
 800d43c:	e7cf      	b.n	800d3de <_strtol_l.constprop.0+0x3a>
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d1da      	bne.n	800d3f8 <_strtol_l.constprop.0+0x54>
 800d442:	2c30      	cmp	r4, #48	@ 0x30
 800d444:	bf0c      	ite	eq
 800d446:	2308      	moveq	r3, #8
 800d448:	230a      	movne	r3, #10
 800d44a:	e7d5      	b.n	800d3f8 <_strtol_l.constprop.0+0x54>
 800d44c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d450:	2f19      	cmp	r7, #25
 800d452:	d801      	bhi.n	800d458 <_strtol_l.constprop.0+0xb4>
 800d454:	3c37      	subs	r4, #55	@ 0x37
 800d456:	e7de      	b.n	800d416 <_strtol_l.constprop.0+0x72>
 800d458:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d45c:	2f19      	cmp	r7, #25
 800d45e:	d804      	bhi.n	800d46a <_strtol_l.constprop.0+0xc6>
 800d460:	3c57      	subs	r4, #87	@ 0x57
 800d462:	e7d8      	b.n	800d416 <_strtol_l.constprop.0+0x72>
 800d464:	f04f 32ff 	mov.w	r2, #4294967295
 800d468:	e7e1      	b.n	800d42e <_strtol_l.constprop.0+0x8a>
 800d46a:	1c53      	adds	r3, r2, #1
 800d46c:	d108      	bne.n	800d480 <_strtol_l.constprop.0+0xdc>
 800d46e:	2322      	movs	r3, #34	@ 0x22
 800d470:	f8ce 3000 	str.w	r3, [lr]
 800d474:	4660      	mov	r0, ip
 800d476:	f1b8 0f00 	cmp.w	r8, #0
 800d47a:	d0a0      	beq.n	800d3be <_strtol_l.constprop.0+0x1a>
 800d47c:	1e69      	subs	r1, r5, #1
 800d47e:	e006      	b.n	800d48e <_strtol_l.constprop.0+0xea>
 800d480:	b106      	cbz	r6, 800d484 <_strtol_l.constprop.0+0xe0>
 800d482:	4240      	negs	r0, r0
 800d484:	f1b8 0f00 	cmp.w	r8, #0
 800d488:	d099      	beq.n	800d3be <_strtol_l.constprop.0+0x1a>
 800d48a:	2a00      	cmp	r2, #0
 800d48c:	d1f6      	bne.n	800d47c <_strtol_l.constprop.0+0xd8>
 800d48e:	f8c8 1000 	str.w	r1, [r8]
 800d492:	e794      	b.n	800d3be <_strtol_l.constprop.0+0x1a>
 800d494:	08010069 	.word	0x08010069

0800d498 <_strtol_r>:
 800d498:	f7ff bf84 	b.w	800d3a4 <_strtol_l.constprop.0>

0800d49c <__ssputs_r>:
 800d49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4a0:	688e      	ldr	r6, [r1, #8]
 800d4a2:	461f      	mov	r7, r3
 800d4a4:	42be      	cmp	r6, r7
 800d4a6:	680b      	ldr	r3, [r1, #0]
 800d4a8:	4682      	mov	sl, r0
 800d4aa:	460c      	mov	r4, r1
 800d4ac:	4690      	mov	r8, r2
 800d4ae:	d82d      	bhi.n	800d50c <__ssputs_r+0x70>
 800d4b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d4b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d4b8:	d026      	beq.n	800d508 <__ssputs_r+0x6c>
 800d4ba:	6965      	ldr	r5, [r4, #20]
 800d4bc:	6909      	ldr	r1, [r1, #16]
 800d4be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d4c2:	eba3 0901 	sub.w	r9, r3, r1
 800d4c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d4ca:	1c7b      	adds	r3, r7, #1
 800d4cc:	444b      	add	r3, r9
 800d4ce:	106d      	asrs	r5, r5, #1
 800d4d0:	429d      	cmp	r5, r3
 800d4d2:	bf38      	it	cc
 800d4d4:	461d      	movcc	r5, r3
 800d4d6:	0553      	lsls	r3, r2, #21
 800d4d8:	d527      	bpl.n	800d52a <__ssputs_r+0x8e>
 800d4da:	4629      	mov	r1, r5
 800d4dc:	f7fe fc1c 	bl	800bd18 <_malloc_r>
 800d4e0:	4606      	mov	r6, r0
 800d4e2:	b360      	cbz	r0, 800d53e <__ssputs_r+0xa2>
 800d4e4:	6921      	ldr	r1, [r4, #16]
 800d4e6:	464a      	mov	r2, r9
 800d4e8:	f000 fd94 	bl	800e014 <memcpy>
 800d4ec:	89a3      	ldrh	r3, [r4, #12]
 800d4ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d4f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d4f6:	81a3      	strh	r3, [r4, #12]
 800d4f8:	6126      	str	r6, [r4, #16]
 800d4fa:	6165      	str	r5, [r4, #20]
 800d4fc:	444e      	add	r6, r9
 800d4fe:	eba5 0509 	sub.w	r5, r5, r9
 800d502:	6026      	str	r6, [r4, #0]
 800d504:	60a5      	str	r5, [r4, #8]
 800d506:	463e      	mov	r6, r7
 800d508:	42be      	cmp	r6, r7
 800d50a:	d900      	bls.n	800d50e <__ssputs_r+0x72>
 800d50c:	463e      	mov	r6, r7
 800d50e:	6820      	ldr	r0, [r4, #0]
 800d510:	4632      	mov	r2, r6
 800d512:	4641      	mov	r1, r8
 800d514:	f000 fd53 	bl	800dfbe <memmove>
 800d518:	68a3      	ldr	r3, [r4, #8]
 800d51a:	1b9b      	subs	r3, r3, r6
 800d51c:	60a3      	str	r3, [r4, #8]
 800d51e:	6823      	ldr	r3, [r4, #0]
 800d520:	4433      	add	r3, r6
 800d522:	6023      	str	r3, [r4, #0]
 800d524:	2000      	movs	r0, #0
 800d526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52a:	462a      	mov	r2, r5
 800d52c:	f001 f905 	bl	800e73a <_realloc_r>
 800d530:	4606      	mov	r6, r0
 800d532:	2800      	cmp	r0, #0
 800d534:	d1e0      	bne.n	800d4f8 <__ssputs_r+0x5c>
 800d536:	6921      	ldr	r1, [r4, #16]
 800d538:	4650      	mov	r0, sl
 800d53a:	f7fe fb79 	bl	800bc30 <_free_r>
 800d53e:	230c      	movs	r3, #12
 800d540:	f8ca 3000 	str.w	r3, [sl]
 800d544:	89a3      	ldrh	r3, [r4, #12]
 800d546:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d54a:	81a3      	strh	r3, [r4, #12]
 800d54c:	f04f 30ff 	mov.w	r0, #4294967295
 800d550:	e7e9      	b.n	800d526 <__ssputs_r+0x8a>
	...

0800d554 <_svfiprintf_r>:
 800d554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d558:	4698      	mov	r8, r3
 800d55a:	898b      	ldrh	r3, [r1, #12]
 800d55c:	061b      	lsls	r3, r3, #24
 800d55e:	b09d      	sub	sp, #116	@ 0x74
 800d560:	4607      	mov	r7, r0
 800d562:	460d      	mov	r5, r1
 800d564:	4614      	mov	r4, r2
 800d566:	d510      	bpl.n	800d58a <_svfiprintf_r+0x36>
 800d568:	690b      	ldr	r3, [r1, #16]
 800d56a:	b973      	cbnz	r3, 800d58a <_svfiprintf_r+0x36>
 800d56c:	2140      	movs	r1, #64	@ 0x40
 800d56e:	f7fe fbd3 	bl	800bd18 <_malloc_r>
 800d572:	6028      	str	r0, [r5, #0]
 800d574:	6128      	str	r0, [r5, #16]
 800d576:	b930      	cbnz	r0, 800d586 <_svfiprintf_r+0x32>
 800d578:	230c      	movs	r3, #12
 800d57a:	603b      	str	r3, [r7, #0]
 800d57c:	f04f 30ff 	mov.w	r0, #4294967295
 800d580:	b01d      	add	sp, #116	@ 0x74
 800d582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d586:	2340      	movs	r3, #64	@ 0x40
 800d588:	616b      	str	r3, [r5, #20]
 800d58a:	2300      	movs	r3, #0
 800d58c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58e:	2320      	movs	r3, #32
 800d590:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d594:	f8cd 800c 	str.w	r8, [sp, #12]
 800d598:	2330      	movs	r3, #48	@ 0x30
 800d59a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d738 <_svfiprintf_r+0x1e4>
 800d59e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d5a2:	f04f 0901 	mov.w	r9, #1
 800d5a6:	4623      	mov	r3, r4
 800d5a8:	469a      	mov	sl, r3
 800d5aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d5ae:	b10a      	cbz	r2, 800d5b4 <_svfiprintf_r+0x60>
 800d5b0:	2a25      	cmp	r2, #37	@ 0x25
 800d5b2:	d1f9      	bne.n	800d5a8 <_svfiprintf_r+0x54>
 800d5b4:	ebba 0b04 	subs.w	fp, sl, r4
 800d5b8:	d00b      	beq.n	800d5d2 <_svfiprintf_r+0x7e>
 800d5ba:	465b      	mov	r3, fp
 800d5bc:	4622      	mov	r2, r4
 800d5be:	4629      	mov	r1, r5
 800d5c0:	4638      	mov	r0, r7
 800d5c2:	f7ff ff6b 	bl	800d49c <__ssputs_r>
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	f000 80a7 	beq.w	800d71a <_svfiprintf_r+0x1c6>
 800d5cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d5ce:	445a      	add	r2, fp
 800d5d0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f000 809f 	beq.w	800d71a <_svfiprintf_r+0x1c6>
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f04f 32ff 	mov.w	r2, #4294967295
 800d5e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d5e6:	f10a 0a01 	add.w	sl, sl, #1
 800d5ea:	9304      	str	r3, [sp, #16]
 800d5ec:	9307      	str	r3, [sp, #28]
 800d5ee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d5f2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d5f4:	4654      	mov	r4, sl
 800d5f6:	2205      	movs	r2, #5
 800d5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5fc:	484e      	ldr	r0, [pc, #312]	@ (800d738 <_svfiprintf_r+0x1e4>)
 800d5fe:	f7f2 fdef 	bl	80001e0 <memchr>
 800d602:	9a04      	ldr	r2, [sp, #16]
 800d604:	b9d8      	cbnz	r0, 800d63e <_svfiprintf_r+0xea>
 800d606:	06d0      	lsls	r0, r2, #27
 800d608:	bf44      	itt	mi
 800d60a:	2320      	movmi	r3, #32
 800d60c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d610:	0711      	lsls	r1, r2, #28
 800d612:	bf44      	itt	mi
 800d614:	232b      	movmi	r3, #43	@ 0x2b
 800d616:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d61a:	f89a 3000 	ldrb.w	r3, [sl]
 800d61e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d620:	d015      	beq.n	800d64e <_svfiprintf_r+0xfa>
 800d622:	9a07      	ldr	r2, [sp, #28]
 800d624:	4654      	mov	r4, sl
 800d626:	2000      	movs	r0, #0
 800d628:	f04f 0c0a 	mov.w	ip, #10
 800d62c:	4621      	mov	r1, r4
 800d62e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d632:	3b30      	subs	r3, #48	@ 0x30
 800d634:	2b09      	cmp	r3, #9
 800d636:	d94b      	bls.n	800d6d0 <_svfiprintf_r+0x17c>
 800d638:	b1b0      	cbz	r0, 800d668 <_svfiprintf_r+0x114>
 800d63a:	9207      	str	r2, [sp, #28]
 800d63c:	e014      	b.n	800d668 <_svfiprintf_r+0x114>
 800d63e:	eba0 0308 	sub.w	r3, r0, r8
 800d642:	fa09 f303 	lsl.w	r3, r9, r3
 800d646:	4313      	orrs	r3, r2
 800d648:	9304      	str	r3, [sp, #16]
 800d64a:	46a2      	mov	sl, r4
 800d64c:	e7d2      	b.n	800d5f4 <_svfiprintf_r+0xa0>
 800d64e:	9b03      	ldr	r3, [sp, #12]
 800d650:	1d19      	adds	r1, r3, #4
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	9103      	str	r1, [sp, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	bfbb      	ittet	lt
 800d65a:	425b      	neglt	r3, r3
 800d65c:	f042 0202 	orrlt.w	r2, r2, #2
 800d660:	9307      	strge	r3, [sp, #28]
 800d662:	9307      	strlt	r3, [sp, #28]
 800d664:	bfb8      	it	lt
 800d666:	9204      	strlt	r2, [sp, #16]
 800d668:	7823      	ldrb	r3, [r4, #0]
 800d66a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d66c:	d10a      	bne.n	800d684 <_svfiprintf_r+0x130>
 800d66e:	7863      	ldrb	r3, [r4, #1]
 800d670:	2b2a      	cmp	r3, #42	@ 0x2a
 800d672:	d132      	bne.n	800d6da <_svfiprintf_r+0x186>
 800d674:	9b03      	ldr	r3, [sp, #12]
 800d676:	1d1a      	adds	r2, r3, #4
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	9203      	str	r2, [sp, #12]
 800d67c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d680:	3402      	adds	r4, #2
 800d682:	9305      	str	r3, [sp, #20]
 800d684:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d748 <_svfiprintf_r+0x1f4>
 800d688:	7821      	ldrb	r1, [r4, #0]
 800d68a:	2203      	movs	r2, #3
 800d68c:	4650      	mov	r0, sl
 800d68e:	f7f2 fda7 	bl	80001e0 <memchr>
 800d692:	b138      	cbz	r0, 800d6a4 <_svfiprintf_r+0x150>
 800d694:	9b04      	ldr	r3, [sp, #16]
 800d696:	eba0 000a 	sub.w	r0, r0, sl
 800d69a:	2240      	movs	r2, #64	@ 0x40
 800d69c:	4082      	lsls	r2, r0
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	3401      	adds	r4, #1
 800d6a2:	9304      	str	r3, [sp, #16]
 800d6a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6a8:	4824      	ldr	r0, [pc, #144]	@ (800d73c <_svfiprintf_r+0x1e8>)
 800d6aa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d6ae:	2206      	movs	r2, #6
 800d6b0:	f7f2 fd96 	bl	80001e0 <memchr>
 800d6b4:	2800      	cmp	r0, #0
 800d6b6:	d036      	beq.n	800d726 <_svfiprintf_r+0x1d2>
 800d6b8:	4b21      	ldr	r3, [pc, #132]	@ (800d740 <_svfiprintf_r+0x1ec>)
 800d6ba:	bb1b      	cbnz	r3, 800d704 <_svfiprintf_r+0x1b0>
 800d6bc:	9b03      	ldr	r3, [sp, #12]
 800d6be:	3307      	adds	r3, #7
 800d6c0:	f023 0307 	bic.w	r3, r3, #7
 800d6c4:	3308      	adds	r3, #8
 800d6c6:	9303      	str	r3, [sp, #12]
 800d6c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ca:	4433      	add	r3, r6
 800d6cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800d6ce:	e76a      	b.n	800d5a6 <_svfiprintf_r+0x52>
 800d6d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d6d4:	460c      	mov	r4, r1
 800d6d6:	2001      	movs	r0, #1
 800d6d8:	e7a8      	b.n	800d62c <_svfiprintf_r+0xd8>
 800d6da:	2300      	movs	r3, #0
 800d6dc:	3401      	adds	r4, #1
 800d6de:	9305      	str	r3, [sp, #20]
 800d6e0:	4619      	mov	r1, r3
 800d6e2:	f04f 0c0a 	mov.w	ip, #10
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d6ec:	3a30      	subs	r2, #48	@ 0x30
 800d6ee:	2a09      	cmp	r2, #9
 800d6f0:	d903      	bls.n	800d6fa <_svfiprintf_r+0x1a6>
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d0c6      	beq.n	800d684 <_svfiprintf_r+0x130>
 800d6f6:	9105      	str	r1, [sp, #20]
 800d6f8:	e7c4      	b.n	800d684 <_svfiprintf_r+0x130>
 800d6fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d6fe:	4604      	mov	r4, r0
 800d700:	2301      	movs	r3, #1
 800d702:	e7f0      	b.n	800d6e6 <_svfiprintf_r+0x192>
 800d704:	ab03      	add	r3, sp, #12
 800d706:	9300      	str	r3, [sp, #0]
 800d708:	462a      	mov	r2, r5
 800d70a:	4b0e      	ldr	r3, [pc, #56]	@ (800d744 <_svfiprintf_r+0x1f0>)
 800d70c:	a904      	add	r1, sp, #16
 800d70e:	4638      	mov	r0, r7
 800d710:	f7fc fc8a 	bl	800a028 <_printf_float>
 800d714:	1c42      	adds	r2, r0, #1
 800d716:	4606      	mov	r6, r0
 800d718:	d1d6      	bne.n	800d6c8 <_svfiprintf_r+0x174>
 800d71a:	89ab      	ldrh	r3, [r5, #12]
 800d71c:	065b      	lsls	r3, r3, #25
 800d71e:	f53f af2d 	bmi.w	800d57c <_svfiprintf_r+0x28>
 800d722:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d724:	e72c      	b.n	800d580 <_svfiprintf_r+0x2c>
 800d726:	ab03      	add	r3, sp, #12
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	462a      	mov	r2, r5
 800d72c:	4b05      	ldr	r3, [pc, #20]	@ (800d744 <_svfiprintf_r+0x1f0>)
 800d72e:	a904      	add	r1, sp, #16
 800d730:	4638      	mov	r0, r7
 800d732:	f7fc ff11 	bl	800a558 <_printf_i>
 800d736:	e7ed      	b.n	800d714 <_svfiprintf_r+0x1c0>
 800d738:	08010169 	.word	0x08010169
 800d73c:	08010173 	.word	0x08010173
 800d740:	0800a029 	.word	0x0800a029
 800d744:	0800d49d 	.word	0x0800d49d
 800d748:	0801016f 	.word	0x0801016f

0800d74c <_sungetc_r>:
 800d74c:	b538      	push	{r3, r4, r5, lr}
 800d74e:	1c4b      	adds	r3, r1, #1
 800d750:	4614      	mov	r4, r2
 800d752:	d103      	bne.n	800d75c <_sungetc_r+0x10>
 800d754:	f04f 35ff 	mov.w	r5, #4294967295
 800d758:	4628      	mov	r0, r5
 800d75a:	bd38      	pop	{r3, r4, r5, pc}
 800d75c:	8993      	ldrh	r3, [r2, #12]
 800d75e:	f023 0320 	bic.w	r3, r3, #32
 800d762:	8193      	strh	r3, [r2, #12]
 800d764:	6853      	ldr	r3, [r2, #4]
 800d766:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800d768:	b2cd      	uxtb	r5, r1
 800d76a:	b18a      	cbz	r2, 800d790 <_sungetc_r+0x44>
 800d76c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d76e:	429a      	cmp	r2, r3
 800d770:	dd08      	ble.n	800d784 <_sungetc_r+0x38>
 800d772:	6823      	ldr	r3, [r4, #0]
 800d774:	1e5a      	subs	r2, r3, #1
 800d776:	6022      	str	r2, [r4, #0]
 800d778:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d77c:	6863      	ldr	r3, [r4, #4]
 800d77e:	3301      	adds	r3, #1
 800d780:	6063      	str	r3, [r4, #4]
 800d782:	e7e9      	b.n	800d758 <_sungetc_r+0xc>
 800d784:	4621      	mov	r1, r4
 800d786:	f000 fbe0 	bl	800df4a <__submore>
 800d78a:	2800      	cmp	r0, #0
 800d78c:	d0f1      	beq.n	800d772 <_sungetc_r+0x26>
 800d78e:	e7e1      	b.n	800d754 <_sungetc_r+0x8>
 800d790:	6921      	ldr	r1, [r4, #16]
 800d792:	6822      	ldr	r2, [r4, #0]
 800d794:	b141      	cbz	r1, 800d7a8 <_sungetc_r+0x5c>
 800d796:	4291      	cmp	r1, r2
 800d798:	d206      	bcs.n	800d7a8 <_sungetc_r+0x5c>
 800d79a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800d79e:	42a9      	cmp	r1, r5
 800d7a0:	d102      	bne.n	800d7a8 <_sungetc_r+0x5c>
 800d7a2:	3a01      	subs	r2, #1
 800d7a4:	6022      	str	r2, [r4, #0]
 800d7a6:	e7ea      	b.n	800d77e <_sungetc_r+0x32>
 800d7a8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800d7ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7b0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d7b2:	2303      	movs	r3, #3
 800d7b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d7b6:	4623      	mov	r3, r4
 800d7b8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e7de      	b.n	800d780 <_sungetc_r+0x34>

0800d7c2 <__ssrefill_r>:
 800d7c2:	b510      	push	{r4, lr}
 800d7c4:	460c      	mov	r4, r1
 800d7c6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d7c8:	b169      	cbz	r1, 800d7e6 <__ssrefill_r+0x24>
 800d7ca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d7ce:	4299      	cmp	r1, r3
 800d7d0:	d001      	beq.n	800d7d6 <__ssrefill_r+0x14>
 800d7d2:	f7fe fa2d 	bl	800bc30 <_free_r>
 800d7d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d7d8:	6063      	str	r3, [r4, #4]
 800d7da:	2000      	movs	r0, #0
 800d7dc:	6360      	str	r0, [r4, #52]	@ 0x34
 800d7de:	b113      	cbz	r3, 800d7e6 <__ssrefill_r+0x24>
 800d7e0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d7e2:	6023      	str	r3, [r4, #0]
 800d7e4:	bd10      	pop	{r4, pc}
 800d7e6:	6923      	ldr	r3, [r4, #16]
 800d7e8:	6023      	str	r3, [r4, #0]
 800d7ea:	2300      	movs	r3, #0
 800d7ec:	6063      	str	r3, [r4, #4]
 800d7ee:	89a3      	ldrh	r3, [r4, #12]
 800d7f0:	f043 0320 	orr.w	r3, r3, #32
 800d7f4:	81a3      	strh	r3, [r4, #12]
 800d7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800d7fa:	e7f3      	b.n	800d7e4 <__ssrefill_r+0x22>

0800d7fc <__ssvfiscanf_r>:
 800d7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d800:	460c      	mov	r4, r1
 800d802:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800d806:	2100      	movs	r1, #0
 800d808:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800d80c:	49a5      	ldr	r1, [pc, #660]	@ (800daa4 <__ssvfiscanf_r+0x2a8>)
 800d80e:	91a0      	str	r1, [sp, #640]	@ 0x280
 800d810:	f10d 0804 	add.w	r8, sp, #4
 800d814:	49a4      	ldr	r1, [pc, #656]	@ (800daa8 <__ssvfiscanf_r+0x2ac>)
 800d816:	4fa5      	ldr	r7, [pc, #660]	@ (800daac <__ssvfiscanf_r+0x2b0>)
 800d818:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800d81c:	4606      	mov	r6, r0
 800d81e:	91a1      	str	r1, [sp, #644]	@ 0x284
 800d820:	9300      	str	r3, [sp, #0]
 800d822:	7813      	ldrb	r3, [r2, #0]
 800d824:	2b00      	cmp	r3, #0
 800d826:	f000 8158 	beq.w	800dada <__ssvfiscanf_r+0x2de>
 800d82a:	5cf9      	ldrb	r1, [r7, r3]
 800d82c:	f011 0108 	ands.w	r1, r1, #8
 800d830:	f102 0501 	add.w	r5, r2, #1
 800d834:	d019      	beq.n	800d86a <__ssvfiscanf_r+0x6e>
 800d836:	6863      	ldr	r3, [r4, #4]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	dd0f      	ble.n	800d85c <__ssvfiscanf_r+0x60>
 800d83c:	6823      	ldr	r3, [r4, #0]
 800d83e:	781a      	ldrb	r2, [r3, #0]
 800d840:	5cba      	ldrb	r2, [r7, r2]
 800d842:	0712      	lsls	r2, r2, #28
 800d844:	d401      	bmi.n	800d84a <__ssvfiscanf_r+0x4e>
 800d846:	462a      	mov	r2, r5
 800d848:	e7eb      	b.n	800d822 <__ssvfiscanf_r+0x26>
 800d84a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800d84c:	3201      	adds	r2, #1
 800d84e:	9245      	str	r2, [sp, #276]	@ 0x114
 800d850:	6862      	ldr	r2, [r4, #4]
 800d852:	3301      	adds	r3, #1
 800d854:	3a01      	subs	r2, #1
 800d856:	6062      	str	r2, [r4, #4]
 800d858:	6023      	str	r3, [r4, #0]
 800d85a:	e7ec      	b.n	800d836 <__ssvfiscanf_r+0x3a>
 800d85c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d85e:	4621      	mov	r1, r4
 800d860:	4630      	mov	r0, r6
 800d862:	4798      	blx	r3
 800d864:	2800      	cmp	r0, #0
 800d866:	d0e9      	beq.n	800d83c <__ssvfiscanf_r+0x40>
 800d868:	e7ed      	b.n	800d846 <__ssvfiscanf_r+0x4a>
 800d86a:	2b25      	cmp	r3, #37	@ 0x25
 800d86c:	d012      	beq.n	800d894 <__ssvfiscanf_r+0x98>
 800d86e:	4699      	mov	r9, r3
 800d870:	6863      	ldr	r3, [r4, #4]
 800d872:	2b00      	cmp	r3, #0
 800d874:	f340 8093 	ble.w	800d99e <__ssvfiscanf_r+0x1a2>
 800d878:	6822      	ldr	r2, [r4, #0]
 800d87a:	7813      	ldrb	r3, [r2, #0]
 800d87c:	454b      	cmp	r3, r9
 800d87e:	f040 812c 	bne.w	800dada <__ssvfiscanf_r+0x2de>
 800d882:	6863      	ldr	r3, [r4, #4]
 800d884:	3b01      	subs	r3, #1
 800d886:	6063      	str	r3, [r4, #4]
 800d888:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800d88a:	3201      	adds	r2, #1
 800d88c:	3301      	adds	r3, #1
 800d88e:	6022      	str	r2, [r4, #0]
 800d890:	9345      	str	r3, [sp, #276]	@ 0x114
 800d892:	e7d8      	b.n	800d846 <__ssvfiscanf_r+0x4a>
 800d894:	9141      	str	r1, [sp, #260]	@ 0x104
 800d896:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d898:	7853      	ldrb	r3, [r2, #1]
 800d89a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d89c:	bf02      	ittt	eq
 800d89e:	2310      	moveq	r3, #16
 800d8a0:	1c95      	addeq	r5, r2, #2
 800d8a2:	9341      	streq	r3, [sp, #260]	@ 0x104
 800d8a4:	220a      	movs	r2, #10
 800d8a6:	46a9      	mov	r9, r5
 800d8a8:	f819 1b01 	ldrb.w	r1, [r9], #1
 800d8ac:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800d8b0:	2b09      	cmp	r3, #9
 800d8b2:	d91e      	bls.n	800d8f2 <__ssvfiscanf_r+0xf6>
 800d8b4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800dab0 <__ssvfiscanf_r+0x2b4>
 800d8b8:	2203      	movs	r2, #3
 800d8ba:	4650      	mov	r0, sl
 800d8bc:	f7f2 fc90 	bl	80001e0 <memchr>
 800d8c0:	b138      	cbz	r0, 800d8d2 <__ssvfiscanf_r+0xd6>
 800d8c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d8c4:	eba0 000a 	sub.w	r0, r0, sl
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	4083      	lsls	r3, r0
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	9341      	str	r3, [sp, #260]	@ 0x104
 800d8d0:	464d      	mov	r5, r9
 800d8d2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d8d6:	2b78      	cmp	r3, #120	@ 0x78
 800d8d8:	d806      	bhi.n	800d8e8 <__ssvfiscanf_r+0xec>
 800d8da:	2b57      	cmp	r3, #87	@ 0x57
 800d8dc:	d810      	bhi.n	800d900 <__ssvfiscanf_r+0x104>
 800d8de:	2b25      	cmp	r3, #37	@ 0x25
 800d8e0:	d0c5      	beq.n	800d86e <__ssvfiscanf_r+0x72>
 800d8e2:	d857      	bhi.n	800d994 <__ssvfiscanf_r+0x198>
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d065      	beq.n	800d9b4 <__ssvfiscanf_r+0x1b8>
 800d8e8:	2303      	movs	r3, #3
 800d8ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d8ec:	230a      	movs	r3, #10
 800d8ee:	9342      	str	r3, [sp, #264]	@ 0x108
 800d8f0:	e078      	b.n	800d9e4 <__ssvfiscanf_r+0x1e8>
 800d8f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800d8f4:	fb02 1103 	mla	r1, r2, r3, r1
 800d8f8:	3930      	subs	r1, #48	@ 0x30
 800d8fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 800d8fc:	464d      	mov	r5, r9
 800d8fe:	e7d2      	b.n	800d8a6 <__ssvfiscanf_r+0xaa>
 800d900:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800d904:	2a20      	cmp	r2, #32
 800d906:	d8ef      	bhi.n	800d8e8 <__ssvfiscanf_r+0xec>
 800d908:	a101      	add	r1, pc, #4	@ (adr r1, 800d910 <__ssvfiscanf_r+0x114>)
 800d90a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d90e:	bf00      	nop
 800d910:	0800d9c3 	.word	0x0800d9c3
 800d914:	0800d8e9 	.word	0x0800d8e9
 800d918:	0800d8e9 	.word	0x0800d8e9
 800d91c:	0800da1d 	.word	0x0800da1d
 800d920:	0800d8e9 	.word	0x0800d8e9
 800d924:	0800d8e9 	.word	0x0800d8e9
 800d928:	0800d8e9 	.word	0x0800d8e9
 800d92c:	0800d8e9 	.word	0x0800d8e9
 800d930:	0800d8e9 	.word	0x0800d8e9
 800d934:	0800d8e9 	.word	0x0800d8e9
 800d938:	0800d8e9 	.word	0x0800d8e9
 800d93c:	0800da33 	.word	0x0800da33
 800d940:	0800da19 	.word	0x0800da19
 800d944:	0800d99b 	.word	0x0800d99b
 800d948:	0800d99b 	.word	0x0800d99b
 800d94c:	0800d99b 	.word	0x0800d99b
 800d950:	0800d8e9 	.word	0x0800d8e9
 800d954:	0800d9d5 	.word	0x0800d9d5
 800d958:	0800d8e9 	.word	0x0800d8e9
 800d95c:	0800d8e9 	.word	0x0800d8e9
 800d960:	0800d8e9 	.word	0x0800d8e9
 800d964:	0800d8e9 	.word	0x0800d8e9
 800d968:	0800da43 	.word	0x0800da43
 800d96c:	0800d9dd 	.word	0x0800d9dd
 800d970:	0800d9bb 	.word	0x0800d9bb
 800d974:	0800d8e9 	.word	0x0800d8e9
 800d978:	0800d8e9 	.word	0x0800d8e9
 800d97c:	0800da3f 	.word	0x0800da3f
 800d980:	0800d8e9 	.word	0x0800d8e9
 800d984:	0800da19 	.word	0x0800da19
 800d988:	0800d8e9 	.word	0x0800d8e9
 800d98c:	0800d8e9 	.word	0x0800d8e9
 800d990:	0800d9c3 	.word	0x0800d9c3
 800d994:	3b45      	subs	r3, #69	@ 0x45
 800d996:	2b02      	cmp	r3, #2
 800d998:	d8a6      	bhi.n	800d8e8 <__ssvfiscanf_r+0xec>
 800d99a:	2305      	movs	r3, #5
 800d99c:	e021      	b.n	800d9e2 <__ssvfiscanf_r+0x1e6>
 800d99e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	4798      	blx	r3
 800d9a6:	2800      	cmp	r0, #0
 800d9a8:	f43f af66 	beq.w	800d878 <__ssvfiscanf_r+0x7c>
 800d9ac:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800d9ae:	2800      	cmp	r0, #0
 800d9b0:	f040 808b 	bne.w	800daca <__ssvfiscanf_r+0x2ce>
 800d9b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9b8:	e08b      	b.n	800dad2 <__ssvfiscanf_r+0x2d6>
 800d9ba:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d9bc:	f042 0220 	orr.w	r2, r2, #32
 800d9c0:	9241      	str	r2, [sp, #260]	@ 0x104
 800d9c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800d9c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d9c8:	9241      	str	r2, [sp, #260]	@ 0x104
 800d9ca:	2210      	movs	r2, #16
 800d9cc:	2b6e      	cmp	r3, #110	@ 0x6e
 800d9ce:	9242      	str	r2, [sp, #264]	@ 0x108
 800d9d0:	d902      	bls.n	800d9d8 <__ssvfiscanf_r+0x1dc>
 800d9d2:	e005      	b.n	800d9e0 <__ssvfiscanf_r+0x1e4>
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	9342      	str	r3, [sp, #264]	@ 0x108
 800d9d8:	2303      	movs	r3, #3
 800d9da:	e002      	b.n	800d9e2 <__ssvfiscanf_r+0x1e6>
 800d9dc:	2308      	movs	r3, #8
 800d9de:	9342      	str	r3, [sp, #264]	@ 0x108
 800d9e0:	2304      	movs	r3, #4
 800d9e2:	9347      	str	r3, [sp, #284]	@ 0x11c
 800d9e4:	6863      	ldr	r3, [r4, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	dd39      	ble.n	800da5e <__ssvfiscanf_r+0x262>
 800d9ea:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800d9ec:	0659      	lsls	r1, r3, #25
 800d9ee:	d404      	bmi.n	800d9fa <__ssvfiscanf_r+0x1fe>
 800d9f0:	6823      	ldr	r3, [r4, #0]
 800d9f2:	781a      	ldrb	r2, [r3, #0]
 800d9f4:	5cba      	ldrb	r2, [r7, r2]
 800d9f6:	0712      	lsls	r2, r2, #28
 800d9f8:	d438      	bmi.n	800da6c <__ssvfiscanf_r+0x270>
 800d9fa:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	dc47      	bgt.n	800da90 <__ssvfiscanf_r+0x294>
 800da00:	466b      	mov	r3, sp
 800da02:	4622      	mov	r2, r4
 800da04:	a941      	add	r1, sp, #260	@ 0x104
 800da06:	4630      	mov	r0, r6
 800da08:	f000 f86c 	bl	800dae4 <_scanf_chars>
 800da0c:	2801      	cmp	r0, #1
 800da0e:	d064      	beq.n	800dada <__ssvfiscanf_r+0x2de>
 800da10:	2802      	cmp	r0, #2
 800da12:	f47f af18 	bne.w	800d846 <__ssvfiscanf_r+0x4a>
 800da16:	e7c9      	b.n	800d9ac <__ssvfiscanf_r+0x1b0>
 800da18:	220a      	movs	r2, #10
 800da1a:	e7d7      	b.n	800d9cc <__ssvfiscanf_r+0x1d0>
 800da1c:	4629      	mov	r1, r5
 800da1e:	4640      	mov	r0, r8
 800da20:	f000 fa5a 	bl	800ded8 <__sccl>
 800da24:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da2a:	9341      	str	r3, [sp, #260]	@ 0x104
 800da2c:	4605      	mov	r5, r0
 800da2e:	2301      	movs	r3, #1
 800da30:	e7d7      	b.n	800d9e2 <__ssvfiscanf_r+0x1e6>
 800da32:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800da34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da38:	9341      	str	r3, [sp, #260]	@ 0x104
 800da3a:	2300      	movs	r3, #0
 800da3c:	e7d1      	b.n	800d9e2 <__ssvfiscanf_r+0x1e6>
 800da3e:	2302      	movs	r3, #2
 800da40:	e7cf      	b.n	800d9e2 <__ssvfiscanf_r+0x1e6>
 800da42:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800da44:	06c3      	lsls	r3, r0, #27
 800da46:	f53f aefe 	bmi.w	800d846 <__ssvfiscanf_r+0x4a>
 800da4a:	9b00      	ldr	r3, [sp, #0]
 800da4c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800da4e:	1d19      	adds	r1, r3, #4
 800da50:	9100      	str	r1, [sp, #0]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	07c0      	lsls	r0, r0, #31
 800da56:	bf4c      	ite	mi
 800da58:	801a      	strhmi	r2, [r3, #0]
 800da5a:	601a      	strpl	r2, [r3, #0]
 800da5c:	e6f3      	b.n	800d846 <__ssvfiscanf_r+0x4a>
 800da5e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800da60:	4621      	mov	r1, r4
 800da62:	4630      	mov	r0, r6
 800da64:	4798      	blx	r3
 800da66:	2800      	cmp	r0, #0
 800da68:	d0bf      	beq.n	800d9ea <__ssvfiscanf_r+0x1ee>
 800da6a:	e79f      	b.n	800d9ac <__ssvfiscanf_r+0x1b0>
 800da6c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800da6e:	3201      	adds	r2, #1
 800da70:	9245      	str	r2, [sp, #276]	@ 0x114
 800da72:	6862      	ldr	r2, [r4, #4]
 800da74:	3a01      	subs	r2, #1
 800da76:	2a00      	cmp	r2, #0
 800da78:	6062      	str	r2, [r4, #4]
 800da7a:	dd02      	ble.n	800da82 <__ssvfiscanf_r+0x286>
 800da7c:	3301      	adds	r3, #1
 800da7e:	6023      	str	r3, [r4, #0]
 800da80:	e7b6      	b.n	800d9f0 <__ssvfiscanf_r+0x1f4>
 800da82:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800da84:	4621      	mov	r1, r4
 800da86:	4630      	mov	r0, r6
 800da88:	4798      	blx	r3
 800da8a:	2800      	cmp	r0, #0
 800da8c:	d0b0      	beq.n	800d9f0 <__ssvfiscanf_r+0x1f4>
 800da8e:	e78d      	b.n	800d9ac <__ssvfiscanf_r+0x1b0>
 800da90:	2b04      	cmp	r3, #4
 800da92:	dc0f      	bgt.n	800dab4 <__ssvfiscanf_r+0x2b8>
 800da94:	466b      	mov	r3, sp
 800da96:	4622      	mov	r2, r4
 800da98:	a941      	add	r1, sp, #260	@ 0x104
 800da9a:	4630      	mov	r0, r6
 800da9c:	f000 f87c 	bl	800db98 <_scanf_i>
 800daa0:	e7b4      	b.n	800da0c <__ssvfiscanf_r+0x210>
 800daa2:	bf00      	nop
 800daa4:	0800d74d 	.word	0x0800d74d
 800daa8:	0800d7c3 	.word	0x0800d7c3
 800daac:	08010069 	.word	0x08010069
 800dab0:	0801016f 	.word	0x0801016f
 800dab4:	4b0a      	ldr	r3, [pc, #40]	@ (800dae0 <__ssvfiscanf_r+0x2e4>)
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	f43f aec5 	beq.w	800d846 <__ssvfiscanf_r+0x4a>
 800dabc:	466b      	mov	r3, sp
 800dabe:	4622      	mov	r2, r4
 800dac0:	a941      	add	r1, sp, #260	@ 0x104
 800dac2:	4630      	mov	r0, r6
 800dac4:	f7fc fe68 	bl	800a798 <_scanf_float>
 800dac8:	e7a0      	b.n	800da0c <__ssvfiscanf_r+0x210>
 800daca:	89a3      	ldrh	r3, [r4, #12]
 800dacc:	065b      	lsls	r3, r3, #25
 800dace:	f53f af71 	bmi.w	800d9b4 <__ssvfiscanf_r+0x1b8>
 800dad2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800dad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dada:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800dadc:	e7f9      	b.n	800dad2 <__ssvfiscanf_r+0x2d6>
 800dade:	bf00      	nop
 800dae0:	0800a799 	.word	0x0800a799

0800dae4 <_scanf_chars>:
 800dae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dae8:	4615      	mov	r5, r2
 800daea:	688a      	ldr	r2, [r1, #8]
 800daec:	4680      	mov	r8, r0
 800daee:	460c      	mov	r4, r1
 800daf0:	b932      	cbnz	r2, 800db00 <_scanf_chars+0x1c>
 800daf2:	698a      	ldr	r2, [r1, #24]
 800daf4:	2a00      	cmp	r2, #0
 800daf6:	bf14      	ite	ne
 800daf8:	f04f 32ff 	movne.w	r2, #4294967295
 800dafc:	2201      	moveq	r2, #1
 800dafe:	608a      	str	r2, [r1, #8]
 800db00:	6822      	ldr	r2, [r4, #0]
 800db02:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800db94 <_scanf_chars+0xb0>
 800db06:	06d1      	lsls	r1, r2, #27
 800db08:	bf5f      	itttt	pl
 800db0a:	681a      	ldrpl	r2, [r3, #0]
 800db0c:	1d11      	addpl	r1, r2, #4
 800db0e:	6019      	strpl	r1, [r3, #0]
 800db10:	6816      	ldrpl	r6, [r2, #0]
 800db12:	2700      	movs	r7, #0
 800db14:	69a0      	ldr	r0, [r4, #24]
 800db16:	b188      	cbz	r0, 800db3c <_scanf_chars+0x58>
 800db18:	2801      	cmp	r0, #1
 800db1a:	d107      	bne.n	800db2c <_scanf_chars+0x48>
 800db1c:	682b      	ldr	r3, [r5, #0]
 800db1e:	781a      	ldrb	r2, [r3, #0]
 800db20:	6963      	ldr	r3, [r4, #20]
 800db22:	5c9b      	ldrb	r3, [r3, r2]
 800db24:	b953      	cbnz	r3, 800db3c <_scanf_chars+0x58>
 800db26:	2f00      	cmp	r7, #0
 800db28:	d031      	beq.n	800db8e <_scanf_chars+0xaa>
 800db2a:	e022      	b.n	800db72 <_scanf_chars+0x8e>
 800db2c:	2802      	cmp	r0, #2
 800db2e:	d120      	bne.n	800db72 <_scanf_chars+0x8e>
 800db30:	682b      	ldr	r3, [r5, #0]
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	f819 3003 	ldrb.w	r3, [r9, r3]
 800db38:	071b      	lsls	r3, r3, #28
 800db3a:	d41a      	bmi.n	800db72 <_scanf_chars+0x8e>
 800db3c:	6823      	ldr	r3, [r4, #0]
 800db3e:	06da      	lsls	r2, r3, #27
 800db40:	bf5e      	ittt	pl
 800db42:	682b      	ldrpl	r3, [r5, #0]
 800db44:	781b      	ldrbpl	r3, [r3, #0]
 800db46:	f806 3b01 	strbpl.w	r3, [r6], #1
 800db4a:	682a      	ldr	r2, [r5, #0]
 800db4c:	686b      	ldr	r3, [r5, #4]
 800db4e:	3201      	adds	r2, #1
 800db50:	602a      	str	r2, [r5, #0]
 800db52:	68a2      	ldr	r2, [r4, #8]
 800db54:	3b01      	subs	r3, #1
 800db56:	3a01      	subs	r2, #1
 800db58:	606b      	str	r3, [r5, #4]
 800db5a:	3701      	adds	r7, #1
 800db5c:	60a2      	str	r2, [r4, #8]
 800db5e:	b142      	cbz	r2, 800db72 <_scanf_chars+0x8e>
 800db60:	2b00      	cmp	r3, #0
 800db62:	dcd7      	bgt.n	800db14 <_scanf_chars+0x30>
 800db64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800db68:	4629      	mov	r1, r5
 800db6a:	4640      	mov	r0, r8
 800db6c:	4798      	blx	r3
 800db6e:	2800      	cmp	r0, #0
 800db70:	d0d0      	beq.n	800db14 <_scanf_chars+0x30>
 800db72:	6823      	ldr	r3, [r4, #0]
 800db74:	f013 0310 	ands.w	r3, r3, #16
 800db78:	d105      	bne.n	800db86 <_scanf_chars+0xa2>
 800db7a:	68e2      	ldr	r2, [r4, #12]
 800db7c:	3201      	adds	r2, #1
 800db7e:	60e2      	str	r2, [r4, #12]
 800db80:	69a2      	ldr	r2, [r4, #24]
 800db82:	b102      	cbz	r2, 800db86 <_scanf_chars+0xa2>
 800db84:	7033      	strb	r3, [r6, #0]
 800db86:	6923      	ldr	r3, [r4, #16]
 800db88:	443b      	add	r3, r7
 800db8a:	6123      	str	r3, [r4, #16]
 800db8c:	2000      	movs	r0, #0
 800db8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db92:	bf00      	nop
 800db94:	08010069 	.word	0x08010069

0800db98 <_scanf_i>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	4698      	mov	r8, r3
 800db9e:	4b74      	ldr	r3, [pc, #464]	@ (800dd70 <_scanf_i+0x1d8>)
 800dba0:	460c      	mov	r4, r1
 800dba2:	4682      	mov	sl, r0
 800dba4:	4616      	mov	r6, r2
 800dba6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dbaa:	b087      	sub	sp, #28
 800dbac:	ab03      	add	r3, sp, #12
 800dbae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dbb2:	4b70      	ldr	r3, [pc, #448]	@ (800dd74 <_scanf_i+0x1dc>)
 800dbb4:	69a1      	ldr	r1, [r4, #24]
 800dbb6:	4a70      	ldr	r2, [pc, #448]	@ (800dd78 <_scanf_i+0x1e0>)
 800dbb8:	2903      	cmp	r1, #3
 800dbba:	bf08      	it	eq
 800dbbc:	461a      	moveq	r2, r3
 800dbbe:	68a3      	ldr	r3, [r4, #8]
 800dbc0:	9201      	str	r2, [sp, #4]
 800dbc2:	1e5a      	subs	r2, r3, #1
 800dbc4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800dbc8:	bf88      	it	hi
 800dbca:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800dbce:	4627      	mov	r7, r4
 800dbd0:	bf82      	ittt	hi
 800dbd2:	eb03 0905 	addhi.w	r9, r3, r5
 800dbd6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800dbda:	60a3      	strhi	r3, [r4, #8]
 800dbdc:	f857 3b1c 	ldr.w	r3, [r7], #28
 800dbe0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800dbe4:	bf98      	it	ls
 800dbe6:	f04f 0900 	movls.w	r9, #0
 800dbea:	6023      	str	r3, [r4, #0]
 800dbec:	463d      	mov	r5, r7
 800dbee:	f04f 0b00 	mov.w	fp, #0
 800dbf2:	6831      	ldr	r1, [r6, #0]
 800dbf4:	ab03      	add	r3, sp, #12
 800dbf6:	7809      	ldrb	r1, [r1, #0]
 800dbf8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800dbfc:	2202      	movs	r2, #2
 800dbfe:	f7f2 faef 	bl	80001e0 <memchr>
 800dc02:	b328      	cbz	r0, 800dc50 <_scanf_i+0xb8>
 800dc04:	f1bb 0f01 	cmp.w	fp, #1
 800dc08:	d159      	bne.n	800dcbe <_scanf_i+0x126>
 800dc0a:	6862      	ldr	r2, [r4, #4]
 800dc0c:	b92a      	cbnz	r2, 800dc1a <_scanf_i+0x82>
 800dc0e:	6822      	ldr	r2, [r4, #0]
 800dc10:	2108      	movs	r1, #8
 800dc12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800dc16:	6061      	str	r1, [r4, #4]
 800dc18:	6022      	str	r2, [r4, #0]
 800dc1a:	6822      	ldr	r2, [r4, #0]
 800dc1c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800dc20:	6022      	str	r2, [r4, #0]
 800dc22:	68a2      	ldr	r2, [r4, #8]
 800dc24:	1e51      	subs	r1, r2, #1
 800dc26:	60a1      	str	r1, [r4, #8]
 800dc28:	b192      	cbz	r2, 800dc50 <_scanf_i+0xb8>
 800dc2a:	6832      	ldr	r2, [r6, #0]
 800dc2c:	1c51      	adds	r1, r2, #1
 800dc2e:	6031      	str	r1, [r6, #0]
 800dc30:	7812      	ldrb	r2, [r2, #0]
 800dc32:	f805 2b01 	strb.w	r2, [r5], #1
 800dc36:	6872      	ldr	r2, [r6, #4]
 800dc38:	3a01      	subs	r2, #1
 800dc3a:	2a00      	cmp	r2, #0
 800dc3c:	6072      	str	r2, [r6, #4]
 800dc3e:	dc07      	bgt.n	800dc50 <_scanf_i+0xb8>
 800dc40:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800dc44:	4631      	mov	r1, r6
 800dc46:	4650      	mov	r0, sl
 800dc48:	4790      	blx	r2
 800dc4a:	2800      	cmp	r0, #0
 800dc4c:	f040 8085 	bne.w	800dd5a <_scanf_i+0x1c2>
 800dc50:	f10b 0b01 	add.w	fp, fp, #1
 800dc54:	f1bb 0f03 	cmp.w	fp, #3
 800dc58:	d1cb      	bne.n	800dbf2 <_scanf_i+0x5a>
 800dc5a:	6863      	ldr	r3, [r4, #4]
 800dc5c:	b90b      	cbnz	r3, 800dc62 <_scanf_i+0xca>
 800dc5e:	230a      	movs	r3, #10
 800dc60:	6063      	str	r3, [r4, #4]
 800dc62:	6863      	ldr	r3, [r4, #4]
 800dc64:	4945      	ldr	r1, [pc, #276]	@ (800dd7c <_scanf_i+0x1e4>)
 800dc66:	6960      	ldr	r0, [r4, #20]
 800dc68:	1ac9      	subs	r1, r1, r3
 800dc6a:	f000 f935 	bl	800ded8 <__sccl>
 800dc6e:	f04f 0b00 	mov.w	fp, #0
 800dc72:	68a3      	ldr	r3, [r4, #8]
 800dc74:	6822      	ldr	r2, [r4, #0]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d03d      	beq.n	800dcf6 <_scanf_i+0x15e>
 800dc7a:	6831      	ldr	r1, [r6, #0]
 800dc7c:	6960      	ldr	r0, [r4, #20]
 800dc7e:	f891 c000 	ldrb.w	ip, [r1]
 800dc82:	f810 000c 	ldrb.w	r0, [r0, ip]
 800dc86:	2800      	cmp	r0, #0
 800dc88:	d035      	beq.n	800dcf6 <_scanf_i+0x15e>
 800dc8a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800dc8e:	d124      	bne.n	800dcda <_scanf_i+0x142>
 800dc90:	0510      	lsls	r0, r2, #20
 800dc92:	d522      	bpl.n	800dcda <_scanf_i+0x142>
 800dc94:	f10b 0b01 	add.w	fp, fp, #1
 800dc98:	f1b9 0f00 	cmp.w	r9, #0
 800dc9c:	d003      	beq.n	800dca6 <_scanf_i+0x10e>
 800dc9e:	3301      	adds	r3, #1
 800dca0:	f109 39ff 	add.w	r9, r9, #4294967295
 800dca4:	60a3      	str	r3, [r4, #8]
 800dca6:	6873      	ldr	r3, [r6, #4]
 800dca8:	3b01      	subs	r3, #1
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	6073      	str	r3, [r6, #4]
 800dcae:	dd1b      	ble.n	800dce8 <_scanf_i+0x150>
 800dcb0:	6833      	ldr	r3, [r6, #0]
 800dcb2:	3301      	adds	r3, #1
 800dcb4:	6033      	str	r3, [r6, #0]
 800dcb6:	68a3      	ldr	r3, [r4, #8]
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	60a3      	str	r3, [r4, #8]
 800dcbc:	e7d9      	b.n	800dc72 <_scanf_i+0xda>
 800dcbe:	f1bb 0f02 	cmp.w	fp, #2
 800dcc2:	d1ae      	bne.n	800dc22 <_scanf_i+0x8a>
 800dcc4:	6822      	ldr	r2, [r4, #0]
 800dcc6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800dcca:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800dcce:	d1bf      	bne.n	800dc50 <_scanf_i+0xb8>
 800dcd0:	2110      	movs	r1, #16
 800dcd2:	6061      	str	r1, [r4, #4]
 800dcd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800dcd8:	e7a2      	b.n	800dc20 <_scanf_i+0x88>
 800dcda:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800dcde:	6022      	str	r2, [r4, #0]
 800dce0:	780b      	ldrb	r3, [r1, #0]
 800dce2:	f805 3b01 	strb.w	r3, [r5], #1
 800dce6:	e7de      	b.n	800dca6 <_scanf_i+0x10e>
 800dce8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800dcec:	4631      	mov	r1, r6
 800dcee:	4650      	mov	r0, sl
 800dcf0:	4798      	blx	r3
 800dcf2:	2800      	cmp	r0, #0
 800dcf4:	d0df      	beq.n	800dcb6 <_scanf_i+0x11e>
 800dcf6:	6823      	ldr	r3, [r4, #0]
 800dcf8:	05d9      	lsls	r1, r3, #23
 800dcfa:	d50d      	bpl.n	800dd18 <_scanf_i+0x180>
 800dcfc:	42bd      	cmp	r5, r7
 800dcfe:	d909      	bls.n	800dd14 <_scanf_i+0x17c>
 800dd00:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800dd04:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800dd08:	4632      	mov	r2, r6
 800dd0a:	4650      	mov	r0, sl
 800dd0c:	4798      	blx	r3
 800dd0e:	f105 39ff 	add.w	r9, r5, #4294967295
 800dd12:	464d      	mov	r5, r9
 800dd14:	42bd      	cmp	r5, r7
 800dd16:	d028      	beq.n	800dd6a <_scanf_i+0x1d2>
 800dd18:	6822      	ldr	r2, [r4, #0]
 800dd1a:	f012 0210 	ands.w	r2, r2, #16
 800dd1e:	d113      	bne.n	800dd48 <_scanf_i+0x1b0>
 800dd20:	702a      	strb	r2, [r5, #0]
 800dd22:	6863      	ldr	r3, [r4, #4]
 800dd24:	9e01      	ldr	r6, [sp, #4]
 800dd26:	4639      	mov	r1, r7
 800dd28:	4650      	mov	r0, sl
 800dd2a:	47b0      	blx	r6
 800dd2c:	f8d8 3000 	ldr.w	r3, [r8]
 800dd30:	6821      	ldr	r1, [r4, #0]
 800dd32:	1d1a      	adds	r2, r3, #4
 800dd34:	f8c8 2000 	str.w	r2, [r8]
 800dd38:	f011 0f20 	tst.w	r1, #32
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	d00f      	beq.n	800dd60 <_scanf_i+0x1c8>
 800dd40:	6018      	str	r0, [r3, #0]
 800dd42:	68e3      	ldr	r3, [r4, #12]
 800dd44:	3301      	adds	r3, #1
 800dd46:	60e3      	str	r3, [r4, #12]
 800dd48:	6923      	ldr	r3, [r4, #16]
 800dd4a:	1bed      	subs	r5, r5, r7
 800dd4c:	445d      	add	r5, fp
 800dd4e:	442b      	add	r3, r5
 800dd50:	6123      	str	r3, [r4, #16]
 800dd52:	2000      	movs	r0, #0
 800dd54:	b007      	add	sp, #28
 800dd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd5a:	f04f 0b00 	mov.w	fp, #0
 800dd5e:	e7ca      	b.n	800dcf6 <_scanf_i+0x15e>
 800dd60:	07ca      	lsls	r2, r1, #31
 800dd62:	bf4c      	ite	mi
 800dd64:	8018      	strhmi	r0, [r3, #0]
 800dd66:	6018      	strpl	r0, [r3, #0]
 800dd68:	e7eb      	b.n	800dd42 <_scanf_i+0x1aa>
 800dd6a:	2001      	movs	r0, #1
 800dd6c:	e7f2      	b.n	800dd54 <_scanf_i+0x1bc>
 800dd6e:	bf00      	nop
 800dd70:	0800fdb0 	.word	0x0800fdb0
 800dd74:	0800d499 	.word	0x0800d499
 800dd78:	0800e875 	.word	0x0800e875
 800dd7c:	0801018a 	.word	0x0801018a

0800dd80 <__sflush_r>:
 800dd80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800dd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd88:	0716      	lsls	r6, r2, #28
 800dd8a:	4605      	mov	r5, r0
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	d454      	bmi.n	800de3a <__sflush_r+0xba>
 800dd90:	684b      	ldr	r3, [r1, #4]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	dc02      	bgt.n	800dd9c <__sflush_r+0x1c>
 800dd96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	dd48      	ble.n	800de2e <__sflush_r+0xae>
 800dd9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800dd9e:	2e00      	cmp	r6, #0
 800dda0:	d045      	beq.n	800de2e <__sflush_r+0xae>
 800dda2:	2300      	movs	r3, #0
 800dda4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800dda8:	682f      	ldr	r7, [r5, #0]
 800ddaa:	6a21      	ldr	r1, [r4, #32]
 800ddac:	602b      	str	r3, [r5, #0]
 800ddae:	d030      	beq.n	800de12 <__sflush_r+0x92>
 800ddb0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ddb2:	89a3      	ldrh	r3, [r4, #12]
 800ddb4:	0759      	lsls	r1, r3, #29
 800ddb6:	d505      	bpl.n	800ddc4 <__sflush_r+0x44>
 800ddb8:	6863      	ldr	r3, [r4, #4]
 800ddba:	1ad2      	subs	r2, r2, r3
 800ddbc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ddbe:	b10b      	cbz	r3, 800ddc4 <__sflush_r+0x44>
 800ddc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ddc2:	1ad2      	subs	r2, r2, r3
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ddc8:	6a21      	ldr	r1, [r4, #32]
 800ddca:	4628      	mov	r0, r5
 800ddcc:	47b0      	blx	r6
 800ddce:	1c43      	adds	r3, r0, #1
 800ddd0:	89a3      	ldrh	r3, [r4, #12]
 800ddd2:	d106      	bne.n	800dde2 <__sflush_r+0x62>
 800ddd4:	6829      	ldr	r1, [r5, #0]
 800ddd6:	291d      	cmp	r1, #29
 800ddd8:	d82b      	bhi.n	800de32 <__sflush_r+0xb2>
 800ddda:	4a2a      	ldr	r2, [pc, #168]	@ (800de84 <__sflush_r+0x104>)
 800dddc:	410a      	asrs	r2, r1
 800ddde:	07d6      	lsls	r6, r2, #31
 800dde0:	d427      	bmi.n	800de32 <__sflush_r+0xb2>
 800dde2:	2200      	movs	r2, #0
 800dde4:	6062      	str	r2, [r4, #4]
 800dde6:	04d9      	lsls	r1, r3, #19
 800dde8:	6922      	ldr	r2, [r4, #16]
 800ddea:	6022      	str	r2, [r4, #0]
 800ddec:	d504      	bpl.n	800ddf8 <__sflush_r+0x78>
 800ddee:	1c42      	adds	r2, r0, #1
 800ddf0:	d101      	bne.n	800ddf6 <__sflush_r+0x76>
 800ddf2:	682b      	ldr	r3, [r5, #0]
 800ddf4:	b903      	cbnz	r3, 800ddf8 <__sflush_r+0x78>
 800ddf6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ddf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ddfa:	602f      	str	r7, [r5, #0]
 800ddfc:	b1b9      	cbz	r1, 800de2e <__sflush_r+0xae>
 800ddfe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800de02:	4299      	cmp	r1, r3
 800de04:	d002      	beq.n	800de0c <__sflush_r+0x8c>
 800de06:	4628      	mov	r0, r5
 800de08:	f7fd ff12 	bl	800bc30 <_free_r>
 800de0c:	2300      	movs	r3, #0
 800de0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800de10:	e00d      	b.n	800de2e <__sflush_r+0xae>
 800de12:	2301      	movs	r3, #1
 800de14:	4628      	mov	r0, r5
 800de16:	47b0      	blx	r6
 800de18:	4602      	mov	r2, r0
 800de1a:	1c50      	adds	r0, r2, #1
 800de1c:	d1c9      	bne.n	800ddb2 <__sflush_r+0x32>
 800de1e:	682b      	ldr	r3, [r5, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d0c6      	beq.n	800ddb2 <__sflush_r+0x32>
 800de24:	2b1d      	cmp	r3, #29
 800de26:	d001      	beq.n	800de2c <__sflush_r+0xac>
 800de28:	2b16      	cmp	r3, #22
 800de2a:	d11e      	bne.n	800de6a <__sflush_r+0xea>
 800de2c:	602f      	str	r7, [r5, #0]
 800de2e:	2000      	movs	r0, #0
 800de30:	e022      	b.n	800de78 <__sflush_r+0xf8>
 800de32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de36:	b21b      	sxth	r3, r3
 800de38:	e01b      	b.n	800de72 <__sflush_r+0xf2>
 800de3a:	690f      	ldr	r7, [r1, #16]
 800de3c:	2f00      	cmp	r7, #0
 800de3e:	d0f6      	beq.n	800de2e <__sflush_r+0xae>
 800de40:	0793      	lsls	r3, r2, #30
 800de42:	680e      	ldr	r6, [r1, #0]
 800de44:	bf08      	it	eq
 800de46:	694b      	ldreq	r3, [r1, #20]
 800de48:	600f      	str	r7, [r1, #0]
 800de4a:	bf18      	it	ne
 800de4c:	2300      	movne	r3, #0
 800de4e:	eba6 0807 	sub.w	r8, r6, r7
 800de52:	608b      	str	r3, [r1, #8]
 800de54:	f1b8 0f00 	cmp.w	r8, #0
 800de58:	dde9      	ble.n	800de2e <__sflush_r+0xae>
 800de5a:	6a21      	ldr	r1, [r4, #32]
 800de5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800de5e:	4643      	mov	r3, r8
 800de60:	463a      	mov	r2, r7
 800de62:	4628      	mov	r0, r5
 800de64:	47b0      	blx	r6
 800de66:	2800      	cmp	r0, #0
 800de68:	dc08      	bgt.n	800de7c <__sflush_r+0xfc>
 800de6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800de72:	81a3      	strh	r3, [r4, #12]
 800de74:	f04f 30ff 	mov.w	r0, #4294967295
 800de78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de7c:	4407      	add	r7, r0
 800de7e:	eba8 0800 	sub.w	r8, r8, r0
 800de82:	e7e7      	b.n	800de54 <__sflush_r+0xd4>
 800de84:	dfbffffe 	.word	0xdfbffffe

0800de88 <_fflush_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	690b      	ldr	r3, [r1, #16]
 800de8c:	4605      	mov	r5, r0
 800de8e:	460c      	mov	r4, r1
 800de90:	b913      	cbnz	r3, 800de98 <_fflush_r+0x10>
 800de92:	2500      	movs	r5, #0
 800de94:	4628      	mov	r0, r5
 800de96:	bd38      	pop	{r3, r4, r5, pc}
 800de98:	b118      	cbz	r0, 800dea2 <_fflush_r+0x1a>
 800de9a:	6a03      	ldr	r3, [r0, #32]
 800de9c:	b90b      	cbnz	r3, 800dea2 <_fflush_r+0x1a>
 800de9e:	f7fc ff1b 	bl	800acd8 <__sinit>
 800dea2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d0f3      	beq.n	800de92 <_fflush_r+0xa>
 800deaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800deac:	07d0      	lsls	r0, r2, #31
 800deae:	d404      	bmi.n	800deba <_fflush_r+0x32>
 800deb0:	0599      	lsls	r1, r3, #22
 800deb2:	d402      	bmi.n	800deba <_fflush_r+0x32>
 800deb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800deb6:	f7fd f864 	bl	800af82 <__retarget_lock_acquire_recursive>
 800deba:	4628      	mov	r0, r5
 800debc:	4621      	mov	r1, r4
 800debe:	f7ff ff5f 	bl	800dd80 <__sflush_r>
 800dec2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800dec4:	07da      	lsls	r2, r3, #31
 800dec6:	4605      	mov	r5, r0
 800dec8:	d4e4      	bmi.n	800de94 <_fflush_r+0xc>
 800deca:	89a3      	ldrh	r3, [r4, #12]
 800decc:	059b      	lsls	r3, r3, #22
 800dece:	d4e1      	bmi.n	800de94 <_fflush_r+0xc>
 800ded0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ded2:	f7fd f857 	bl	800af84 <__retarget_lock_release_recursive>
 800ded6:	e7dd      	b.n	800de94 <_fflush_r+0xc>

0800ded8 <__sccl>:
 800ded8:	b570      	push	{r4, r5, r6, lr}
 800deda:	780b      	ldrb	r3, [r1, #0]
 800dedc:	4604      	mov	r4, r0
 800dede:	2b5e      	cmp	r3, #94	@ 0x5e
 800dee0:	bf0b      	itete	eq
 800dee2:	784b      	ldrbeq	r3, [r1, #1]
 800dee4:	1c4a      	addne	r2, r1, #1
 800dee6:	1c8a      	addeq	r2, r1, #2
 800dee8:	2100      	movne	r1, #0
 800deea:	bf08      	it	eq
 800deec:	2101      	moveq	r1, #1
 800deee:	3801      	subs	r0, #1
 800def0:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800def4:	f800 1f01 	strb.w	r1, [r0, #1]!
 800def8:	42a8      	cmp	r0, r5
 800defa:	d1fb      	bne.n	800def4 <__sccl+0x1c>
 800defc:	b90b      	cbnz	r3, 800df02 <__sccl+0x2a>
 800defe:	1e50      	subs	r0, r2, #1
 800df00:	bd70      	pop	{r4, r5, r6, pc}
 800df02:	f081 0101 	eor.w	r1, r1, #1
 800df06:	54e1      	strb	r1, [r4, r3]
 800df08:	4610      	mov	r0, r2
 800df0a:	4602      	mov	r2, r0
 800df0c:	f812 5b01 	ldrb.w	r5, [r2], #1
 800df10:	2d2d      	cmp	r5, #45	@ 0x2d
 800df12:	d005      	beq.n	800df20 <__sccl+0x48>
 800df14:	2d5d      	cmp	r5, #93	@ 0x5d
 800df16:	d016      	beq.n	800df46 <__sccl+0x6e>
 800df18:	2d00      	cmp	r5, #0
 800df1a:	d0f1      	beq.n	800df00 <__sccl+0x28>
 800df1c:	462b      	mov	r3, r5
 800df1e:	e7f2      	b.n	800df06 <__sccl+0x2e>
 800df20:	7846      	ldrb	r6, [r0, #1]
 800df22:	2e5d      	cmp	r6, #93	@ 0x5d
 800df24:	d0fa      	beq.n	800df1c <__sccl+0x44>
 800df26:	42b3      	cmp	r3, r6
 800df28:	dcf8      	bgt.n	800df1c <__sccl+0x44>
 800df2a:	3002      	adds	r0, #2
 800df2c:	461a      	mov	r2, r3
 800df2e:	3201      	adds	r2, #1
 800df30:	4296      	cmp	r6, r2
 800df32:	54a1      	strb	r1, [r4, r2]
 800df34:	dcfb      	bgt.n	800df2e <__sccl+0x56>
 800df36:	1af2      	subs	r2, r6, r3
 800df38:	3a01      	subs	r2, #1
 800df3a:	1c5d      	adds	r5, r3, #1
 800df3c:	42b3      	cmp	r3, r6
 800df3e:	bfa8      	it	ge
 800df40:	2200      	movge	r2, #0
 800df42:	18ab      	adds	r3, r5, r2
 800df44:	e7e1      	b.n	800df0a <__sccl+0x32>
 800df46:	4610      	mov	r0, r2
 800df48:	e7da      	b.n	800df00 <__sccl+0x28>

0800df4a <__submore>:
 800df4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df4e:	460c      	mov	r4, r1
 800df50:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800df52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800df56:	4299      	cmp	r1, r3
 800df58:	d11d      	bne.n	800df96 <__submore+0x4c>
 800df5a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800df5e:	f7fd fedb 	bl	800bd18 <_malloc_r>
 800df62:	b918      	cbnz	r0, 800df6c <__submore+0x22>
 800df64:	f04f 30ff 	mov.w	r0, #4294967295
 800df68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800df70:	63a3      	str	r3, [r4, #56]	@ 0x38
 800df72:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800df76:	6360      	str	r0, [r4, #52]	@ 0x34
 800df78:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800df7c:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800df80:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800df84:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800df88:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800df8c:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800df90:	6020      	str	r0, [r4, #0]
 800df92:	2000      	movs	r0, #0
 800df94:	e7e8      	b.n	800df68 <__submore+0x1e>
 800df96:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800df98:	0077      	lsls	r7, r6, #1
 800df9a:	463a      	mov	r2, r7
 800df9c:	f000 fbcd 	bl	800e73a <_realloc_r>
 800dfa0:	4605      	mov	r5, r0
 800dfa2:	2800      	cmp	r0, #0
 800dfa4:	d0de      	beq.n	800df64 <__submore+0x1a>
 800dfa6:	eb00 0806 	add.w	r8, r0, r6
 800dfaa:	4601      	mov	r1, r0
 800dfac:	4632      	mov	r2, r6
 800dfae:	4640      	mov	r0, r8
 800dfb0:	f000 f830 	bl	800e014 <memcpy>
 800dfb4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800dfb8:	f8c4 8000 	str.w	r8, [r4]
 800dfbc:	e7e9      	b.n	800df92 <__submore+0x48>

0800dfbe <memmove>:
 800dfbe:	4288      	cmp	r0, r1
 800dfc0:	b510      	push	{r4, lr}
 800dfc2:	eb01 0402 	add.w	r4, r1, r2
 800dfc6:	d902      	bls.n	800dfce <memmove+0x10>
 800dfc8:	4284      	cmp	r4, r0
 800dfca:	4623      	mov	r3, r4
 800dfcc:	d807      	bhi.n	800dfde <memmove+0x20>
 800dfce:	1e43      	subs	r3, r0, #1
 800dfd0:	42a1      	cmp	r1, r4
 800dfd2:	d008      	beq.n	800dfe6 <memmove+0x28>
 800dfd4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dfd8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dfdc:	e7f8      	b.n	800dfd0 <memmove+0x12>
 800dfde:	4402      	add	r2, r0
 800dfe0:	4601      	mov	r1, r0
 800dfe2:	428a      	cmp	r2, r1
 800dfe4:	d100      	bne.n	800dfe8 <memmove+0x2a>
 800dfe6:	bd10      	pop	{r4, pc}
 800dfe8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dfec:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dff0:	e7f7      	b.n	800dfe2 <memmove+0x24>
	...

0800dff4 <_sbrk_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4d06      	ldr	r5, [pc, #24]	@ (800e010 <_sbrk_r+0x1c>)
 800dff8:	2300      	movs	r3, #0
 800dffa:	4604      	mov	r4, r0
 800dffc:	4608      	mov	r0, r1
 800dffe:	602b      	str	r3, [r5, #0]
 800e000:	f7f4 fef6 	bl	8002df0 <_sbrk>
 800e004:	1c43      	adds	r3, r0, #1
 800e006:	d102      	bne.n	800e00e <_sbrk_r+0x1a>
 800e008:	682b      	ldr	r3, [r5, #0]
 800e00a:	b103      	cbz	r3, 800e00e <_sbrk_r+0x1a>
 800e00c:	6023      	str	r3, [r4, #0]
 800e00e:	bd38      	pop	{r3, r4, r5, pc}
 800e010:	20000890 	.word	0x20000890

0800e014 <memcpy>:
 800e014:	440a      	add	r2, r1
 800e016:	4291      	cmp	r1, r2
 800e018:	f100 33ff 	add.w	r3, r0, #4294967295
 800e01c:	d100      	bne.n	800e020 <memcpy+0xc>
 800e01e:	4770      	bx	lr
 800e020:	b510      	push	{r4, lr}
 800e022:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e026:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e02a:	4291      	cmp	r1, r2
 800e02c:	d1f9      	bne.n	800e022 <memcpy+0xe>
 800e02e:	bd10      	pop	{r4, pc}

0800e030 <nan>:
 800e030:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e038 <nan+0x8>
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	00000000 	.word	0x00000000
 800e03c:	7ff80000 	.word	0x7ff80000

0800e040 <__assert_func>:
 800e040:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e042:	4614      	mov	r4, r2
 800e044:	461a      	mov	r2, r3
 800e046:	4b09      	ldr	r3, [pc, #36]	@ (800e06c <__assert_func+0x2c>)
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	4605      	mov	r5, r0
 800e04c:	68d8      	ldr	r0, [r3, #12]
 800e04e:	b954      	cbnz	r4, 800e066 <__assert_func+0x26>
 800e050:	4b07      	ldr	r3, [pc, #28]	@ (800e070 <__assert_func+0x30>)
 800e052:	461c      	mov	r4, r3
 800e054:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e058:	9100      	str	r1, [sp, #0]
 800e05a:	462b      	mov	r3, r5
 800e05c:	4905      	ldr	r1, [pc, #20]	@ (800e074 <__assert_func+0x34>)
 800e05e:	f000 fc19 	bl	800e894 <fiprintf>
 800e062:	f000 fc29 	bl	800e8b8 <abort>
 800e066:	4b04      	ldr	r3, [pc, #16]	@ (800e078 <__assert_func+0x38>)
 800e068:	e7f4      	b.n	800e054 <__assert_func+0x14>
 800e06a:	bf00      	nop
 800e06c:	2000001c 	.word	0x2000001c
 800e070:	080101d8 	.word	0x080101d8
 800e074:	080101aa 	.word	0x080101aa
 800e078:	0801019d 	.word	0x0801019d

0800e07c <_calloc_r>:
 800e07c:	b570      	push	{r4, r5, r6, lr}
 800e07e:	fba1 5402 	umull	r5, r4, r1, r2
 800e082:	b93c      	cbnz	r4, 800e094 <_calloc_r+0x18>
 800e084:	4629      	mov	r1, r5
 800e086:	f7fd fe47 	bl	800bd18 <_malloc_r>
 800e08a:	4606      	mov	r6, r0
 800e08c:	b928      	cbnz	r0, 800e09a <_calloc_r+0x1e>
 800e08e:	2600      	movs	r6, #0
 800e090:	4630      	mov	r0, r6
 800e092:	bd70      	pop	{r4, r5, r6, pc}
 800e094:	220c      	movs	r2, #12
 800e096:	6002      	str	r2, [r0, #0]
 800e098:	e7f9      	b.n	800e08e <_calloc_r+0x12>
 800e09a:	462a      	mov	r2, r5
 800e09c:	4621      	mov	r1, r4
 800e09e:	f7fc fee0 	bl	800ae62 <memset>
 800e0a2:	e7f5      	b.n	800e090 <_calloc_r+0x14>

0800e0a4 <rshift>:
 800e0a4:	6903      	ldr	r3, [r0, #16]
 800e0a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e0aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e0ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e0b2:	f100 0414 	add.w	r4, r0, #20
 800e0b6:	dd45      	ble.n	800e144 <rshift+0xa0>
 800e0b8:	f011 011f 	ands.w	r1, r1, #31
 800e0bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e0c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e0c4:	d10c      	bne.n	800e0e0 <rshift+0x3c>
 800e0c6:	f100 0710 	add.w	r7, r0, #16
 800e0ca:	4629      	mov	r1, r5
 800e0cc:	42b1      	cmp	r1, r6
 800e0ce:	d334      	bcc.n	800e13a <rshift+0x96>
 800e0d0:	1a9b      	subs	r3, r3, r2
 800e0d2:	009b      	lsls	r3, r3, #2
 800e0d4:	1eea      	subs	r2, r5, #3
 800e0d6:	4296      	cmp	r6, r2
 800e0d8:	bf38      	it	cc
 800e0da:	2300      	movcc	r3, #0
 800e0dc:	4423      	add	r3, r4
 800e0de:	e015      	b.n	800e10c <rshift+0x68>
 800e0e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e0e4:	f1c1 0820 	rsb	r8, r1, #32
 800e0e8:	40cf      	lsrs	r7, r1
 800e0ea:	f105 0e04 	add.w	lr, r5, #4
 800e0ee:	46a1      	mov	r9, r4
 800e0f0:	4576      	cmp	r6, lr
 800e0f2:	46f4      	mov	ip, lr
 800e0f4:	d815      	bhi.n	800e122 <rshift+0x7e>
 800e0f6:	1a9a      	subs	r2, r3, r2
 800e0f8:	0092      	lsls	r2, r2, #2
 800e0fa:	3a04      	subs	r2, #4
 800e0fc:	3501      	adds	r5, #1
 800e0fe:	42ae      	cmp	r6, r5
 800e100:	bf38      	it	cc
 800e102:	2200      	movcc	r2, #0
 800e104:	18a3      	adds	r3, r4, r2
 800e106:	50a7      	str	r7, [r4, r2]
 800e108:	b107      	cbz	r7, 800e10c <rshift+0x68>
 800e10a:	3304      	adds	r3, #4
 800e10c:	1b1a      	subs	r2, r3, r4
 800e10e:	42a3      	cmp	r3, r4
 800e110:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e114:	bf08      	it	eq
 800e116:	2300      	moveq	r3, #0
 800e118:	6102      	str	r2, [r0, #16]
 800e11a:	bf08      	it	eq
 800e11c:	6143      	streq	r3, [r0, #20]
 800e11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e122:	f8dc c000 	ldr.w	ip, [ip]
 800e126:	fa0c fc08 	lsl.w	ip, ip, r8
 800e12a:	ea4c 0707 	orr.w	r7, ip, r7
 800e12e:	f849 7b04 	str.w	r7, [r9], #4
 800e132:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e136:	40cf      	lsrs	r7, r1
 800e138:	e7da      	b.n	800e0f0 <rshift+0x4c>
 800e13a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e13e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e142:	e7c3      	b.n	800e0cc <rshift+0x28>
 800e144:	4623      	mov	r3, r4
 800e146:	e7e1      	b.n	800e10c <rshift+0x68>

0800e148 <__hexdig_fun>:
 800e148:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800e14c:	2b09      	cmp	r3, #9
 800e14e:	d802      	bhi.n	800e156 <__hexdig_fun+0xe>
 800e150:	3820      	subs	r0, #32
 800e152:	b2c0      	uxtb	r0, r0
 800e154:	4770      	bx	lr
 800e156:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800e15a:	2b05      	cmp	r3, #5
 800e15c:	d801      	bhi.n	800e162 <__hexdig_fun+0x1a>
 800e15e:	3847      	subs	r0, #71	@ 0x47
 800e160:	e7f7      	b.n	800e152 <__hexdig_fun+0xa>
 800e162:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800e166:	2b05      	cmp	r3, #5
 800e168:	d801      	bhi.n	800e16e <__hexdig_fun+0x26>
 800e16a:	3827      	subs	r0, #39	@ 0x27
 800e16c:	e7f1      	b.n	800e152 <__hexdig_fun+0xa>
 800e16e:	2000      	movs	r0, #0
 800e170:	4770      	bx	lr
	...

0800e174 <__gethex>:
 800e174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	b085      	sub	sp, #20
 800e17a:	468a      	mov	sl, r1
 800e17c:	9302      	str	r3, [sp, #8]
 800e17e:	680b      	ldr	r3, [r1, #0]
 800e180:	9001      	str	r0, [sp, #4]
 800e182:	4690      	mov	r8, r2
 800e184:	1c9c      	adds	r4, r3, #2
 800e186:	46a1      	mov	r9, r4
 800e188:	f814 0b01 	ldrb.w	r0, [r4], #1
 800e18c:	2830      	cmp	r0, #48	@ 0x30
 800e18e:	d0fa      	beq.n	800e186 <__gethex+0x12>
 800e190:	eba9 0303 	sub.w	r3, r9, r3
 800e194:	f1a3 0b02 	sub.w	fp, r3, #2
 800e198:	f7ff ffd6 	bl	800e148 <__hexdig_fun>
 800e19c:	4605      	mov	r5, r0
 800e19e:	2800      	cmp	r0, #0
 800e1a0:	d168      	bne.n	800e274 <__gethex+0x100>
 800e1a2:	49a0      	ldr	r1, [pc, #640]	@ (800e424 <__gethex+0x2b0>)
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	4648      	mov	r0, r9
 800e1a8:	f7fc fe63 	bl	800ae72 <strncmp>
 800e1ac:	4607      	mov	r7, r0
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	d167      	bne.n	800e282 <__gethex+0x10e>
 800e1b2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800e1b6:	4626      	mov	r6, r4
 800e1b8:	f7ff ffc6 	bl	800e148 <__hexdig_fun>
 800e1bc:	2800      	cmp	r0, #0
 800e1be:	d062      	beq.n	800e286 <__gethex+0x112>
 800e1c0:	4623      	mov	r3, r4
 800e1c2:	7818      	ldrb	r0, [r3, #0]
 800e1c4:	2830      	cmp	r0, #48	@ 0x30
 800e1c6:	4699      	mov	r9, r3
 800e1c8:	f103 0301 	add.w	r3, r3, #1
 800e1cc:	d0f9      	beq.n	800e1c2 <__gethex+0x4e>
 800e1ce:	f7ff ffbb 	bl	800e148 <__hexdig_fun>
 800e1d2:	fab0 f580 	clz	r5, r0
 800e1d6:	096d      	lsrs	r5, r5, #5
 800e1d8:	f04f 0b01 	mov.w	fp, #1
 800e1dc:	464a      	mov	r2, r9
 800e1de:	4616      	mov	r6, r2
 800e1e0:	3201      	adds	r2, #1
 800e1e2:	7830      	ldrb	r0, [r6, #0]
 800e1e4:	f7ff ffb0 	bl	800e148 <__hexdig_fun>
 800e1e8:	2800      	cmp	r0, #0
 800e1ea:	d1f8      	bne.n	800e1de <__gethex+0x6a>
 800e1ec:	498d      	ldr	r1, [pc, #564]	@ (800e424 <__gethex+0x2b0>)
 800e1ee:	2201      	movs	r2, #1
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	f7fc fe3e 	bl	800ae72 <strncmp>
 800e1f6:	2800      	cmp	r0, #0
 800e1f8:	d13f      	bne.n	800e27a <__gethex+0x106>
 800e1fa:	b944      	cbnz	r4, 800e20e <__gethex+0x9a>
 800e1fc:	1c74      	adds	r4, r6, #1
 800e1fe:	4622      	mov	r2, r4
 800e200:	4616      	mov	r6, r2
 800e202:	3201      	adds	r2, #1
 800e204:	7830      	ldrb	r0, [r6, #0]
 800e206:	f7ff ff9f 	bl	800e148 <__hexdig_fun>
 800e20a:	2800      	cmp	r0, #0
 800e20c:	d1f8      	bne.n	800e200 <__gethex+0x8c>
 800e20e:	1ba4      	subs	r4, r4, r6
 800e210:	00a7      	lsls	r7, r4, #2
 800e212:	7833      	ldrb	r3, [r6, #0]
 800e214:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800e218:	2b50      	cmp	r3, #80	@ 0x50
 800e21a:	d13e      	bne.n	800e29a <__gethex+0x126>
 800e21c:	7873      	ldrb	r3, [r6, #1]
 800e21e:	2b2b      	cmp	r3, #43	@ 0x2b
 800e220:	d033      	beq.n	800e28a <__gethex+0x116>
 800e222:	2b2d      	cmp	r3, #45	@ 0x2d
 800e224:	d034      	beq.n	800e290 <__gethex+0x11c>
 800e226:	1c71      	adds	r1, r6, #1
 800e228:	2400      	movs	r4, #0
 800e22a:	7808      	ldrb	r0, [r1, #0]
 800e22c:	f7ff ff8c 	bl	800e148 <__hexdig_fun>
 800e230:	1e43      	subs	r3, r0, #1
 800e232:	b2db      	uxtb	r3, r3
 800e234:	2b18      	cmp	r3, #24
 800e236:	d830      	bhi.n	800e29a <__gethex+0x126>
 800e238:	f1a0 0210 	sub.w	r2, r0, #16
 800e23c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e240:	f7ff ff82 	bl	800e148 <__hexdig_fun>
 800e244:	f100 3cff 	add.w	ip, r0, #4294967295
 800e248:	fa5f fc8c 	uxtb.w	ip, ip
 800e24c:	f1bc 0f18 	cmp.w	ip, #24
 800e250:	f04f 030a 	mov.w	r3, #10
 800e254:	d91e      	bls.n	800e294 <__gethex+0x120>
 800e256:	b104      	cbz	r4, 800e25a <__gethex+0xe6>
 800e258:	4252      	negs	r2, r2
 800e25a:	4417      	add	r7, r2
 800e25c:	f8ca 1000 	str.w	r1, [sl]
 800e260:	b1ed      	cbz	r5, 800e29e <__gethex+0x12a>
 800e262:	f1bb 0f00 	cmp.w	fp, #0
 800e266:	bf0c      	ite	eq
 800e268:	2506      	moveq	r5, #6
 800e26a:	2500      	movne	r5, #0
 800e26c:	4628      	mov	r0, r5
 800e26e:	b005      	add	sp, #20
 800e270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e274:	2500      	movs	r5, #0
 800e276:	462c      	mov	r4, r5
 800e278:	e7b0      	b.n	800e1dc <__gethex+0x68>
 800e27a:	2c00      	cmp	r4, #0
 800e27c:	d1c7      	bne.n	800e20e <__gethex+0x9a>
 800e27e:	4627      	mov	r7, r4
 800e280:	e7c7      	b.n	800e212 <__gethex+0x9e>
 800e282:	464e      	mov	r6, r9
 800e284:	462f      	mov	r7, r5
 800e286:	2501      	movs	r5, #1
 800e288:	e7c3      	b.n	800e212 <__gethex+0x9e>
 800e28a:	2400      	movs	r4, #0
 800e28c:	1cb1      	adds	r1, r6, #2
 800e28e:	e7cc      	b.n	800e22a <__gethex+0xb6>
 800e290:	2401      	movs	r4, #1
 800e292:	e7fb      	b.n	800e28c <__gethex+0x118>
 800e294:	fb03 0002 	mla	r0, r3, r2, r0
 800e298:	e7ce      	b.n	800e238 <__gethex+0xc4>
 800e29a:	4631      	mov	r1, r6
 800e29c:	e7de      	b.n	800e25c <__gethex+0xe8>
 800e29e:	eba6 0309 	sub.w	r3, r6, r9
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	2b07      	cmp	r3, #7
 800e2a8:	dc0a      	bgt.n	800e2c0 <__gethex+0x14c>
 800e2aa:	9801      	ldr	r0, [sp, #4]
 800e2ac:	f7fd fdc0 	bl	800be30 <_Balloc>
 800e2b0:	4604      	mov	r4, r0
 800e2b2:	b940      	cbnz	r0, 800e2c6 <__gethex+0x152>
 800e2b4:	4b5c      	ldr	r3, [pc, #368]	@ (800e428 <__gethex+0x2b4>)
 800e2b6:	4602      	mov	r2, r0
 800e2b8:	21e4      	movs	r1, #228	@ 0xe4
 800e2ba:	485c      	ldr	r0, [pc, #368]	@ (800e42c <__gethex+0x2b8>)
 800e2bc:	f7ff fec0 	bl	800e040 <__assert_func>
 800e2c0:	3101      	adds	r1, #1
 800e2c2:	105b      	asrs	r3, r3, #1
 800e2c4:	e7ef      	b.n	800e2a6 <__gethex+0x132>
 800e2c6:	f100 0a14 	add.w	sl, r0, #20
 800e2ca:	2300      	movs	r3, #0
 800e2cc:	4655      	mov	r5, sl
 800e2ce:	469b      	mov	fp, r3
 800e2d0:	45b1      	cmp	r9, r6
 800e2d2:	d337      	bcc.n	800e344 <__gethex+0x1d0>
 800e2d4:	f845 bb04 	str.w	fp, [r5], #4
 800e2d8:	eba5 050a 	sub.w	r5, r5, sl
 800e2dc:	10ad      	asrs	r5, r5, #2
 800e2de:	6125      	str	r5, [r4, #16]
 800e2e0:	4658      	mov	r0, fp
 800e2e2:	f7fd fe97 	bl	800c014 <__hi0bits>
 800e2e6:	016d      	lsls	r5, r5, #5
 800e2e8:	f8d8 6000 	ldr.w	r6, [r8]
 800e2ec:	1a2d      	subs	r5, r5, r0
 800e2ee:	42b5      	cmp	r5, r6
 800e2f0:	dd54      	ble.n	800e39c <__gethex+0x228>
 800e2f2:	1bad      	subs	r5, r5, r6
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f7fe fa2b 	bl	800c752 <__any_on>
 800e2fc:	4681      	mov	r9, r0
 800e2fe:	b178      	cbz	r0, 800e320 <__gethex+0x1ac>
 800e300:	1e6b      	subs	r3, r5, #1
 800e302:	1159      	asrs	r1, r3, #5
 800e304:	f003 021f 	and.w	r2, r3, #31
 800e308:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800e30c:	f04f 0901 	mov.w	r9, #1
 800e310:	fa09 f202 	lsl.w	r2, r9, r2
 800e314:	420a      	tst	r2, r1
 800e316:	d003      	beq.n	800e320 <__gethex+0x1ac>
 800e318:	454b      	cmp	r3, r9
 800e31a:	dc36      	bgt.n	800e38a <__gethex+0x216>
 800e31c:	f04f 0902 	mov.w	r9, #2
 800e320:	4629      	mov	r1, r5
 800e322:	4620      	mov	r0, r4
 800e324:	f7ff febe 	bl	800e0a4 <rshift>
 800e328:	442f      	add	r7, r5
 800e32a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e32e:	42bb      	cmp	r3, r7
 800e330:	da42      	bge.n	800e3b8 <__gethex+0x244>
 800e332:	9801      	ldr	r0, [sp, #4]
 800e334:	4621      	mov	r1, r4
 800e336:	f7fd fdbb 	bl	800beb0 <_Bfree>
 800e33a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e33c:	2300      	movs	r3, #0
 800e33e:	6013      	str	r3, [r2, #0]
 800e340:	25a3      	movs	r5, #163	@ 0xa3
 800e342:	e793      	b.n	800e26c <__gethex+0xf8>
 800e344:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800e348:	2a2e      	cmp	r2, #46	@ 0x2e
 800e34a:	d012      	beq.n	800e372 <__gethex+0x1fe>
 800e34c:	2b20      	cmp	r3, #32
 800e34e:	d104      	bne.n	800e35a <__gethex+0x1e6>
 800e350:	f845 bb04 	str.w	fp, [r5], #4
 800e354:	f04f 0b00 	mov.w	fp, #0
 800e358:	465b      	mov	r3, fp
 800e35a:	7830      	ldrb	r0, [r6, #0]
 800e35c:	9303      	str	r3, [sp, #12]
 800e35e:	f7ff fef3 	bl	800e148 <__hexdig_fun>
 800e362:	9b03      	ldr	r3, [sp, #12]
 800e364:	f000 000f 	and.w	r0, r0, #15
 800e368:	4098      	lsls	r0, r3
 800e36a:	ea4b 0b00 	orr.w	fp, fp, r0
 800e36e:	3304      	adds	r3, #4
 800e370:	e7ae      	b.n	800e2d0 <__gethex+0x15c>
 800e372:	45b1      	cmp	r9, r6
 800e374:	d8ea      	bhi.n	800e34c <__gethex+0x1d8>
 800e376:	492b      	ldr	r1, [pc, #172]	@ (800e424 <__gethex+0x2b0>)
 800e378:	9303      	str	r3, [sp, #12]
 800e37a:	2201      	movs	r2, #1
 800e37c:	4630      	mov	r0, r6
 800e37e:	f7fc fd78 	bl	800ae72 <strncmp>
 800e382:	9b03      	ldr	r3, [sp, #12]
 800e384:	2800      	cmp	r0, #0
 800e386:	d1e1      	bne.n	800e34c <__gethex+0x1d8>
 800e388:	e7a2      	b.n	800e2d0 <__gethex+0x15c>
 800e38a:	1ea9      	subs	r1, r5, #2
 800e38c:	4620      	mov	r0, r4
 800e38e:	f7fe f9e0 	bl	800c752 <__any_on>
 800e392:	2800      	cmp	r0, #0
 800e394:	d0c2      	beq.n	800e31c <__gethex+0x1a8>
 800e396:	f04f 0903 	mov.w	r9, #3
 800e39a:	e7c1      	b.n	800e320 <__gethex+0x1ac>
 800e39c:	da09      	bge.n	800e3b2 <__gethex+0x23e>
 800e39e:	1b75      	subs	r5, r6, r5
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	9801      	ldr	r0, [sp, #4]
 800e3a4:	462a      	mov	r2, r5
 800e3a6:	f7fd ff9b 	bl	800c2e0 <__lshift>
 800e3aa:	1b7f      	subs	r7, r7, r5
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	f100 0a14 	add.w	sl, r0, #20
 800e3b2:	f04f 0900 	mov.w	r9, #0
 800e3b6:	e7b8      	b.n	800e32a <__gethex+0x1b6>
 800e3b8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e3bc:	42bd      	cmp	r5, r7
 800e3be:	dd6f      	ble.n	800e4a0 <__gethex+0x32c>
 800e3c0:	1bed      	subs	r5, r5, r7
 800e3c2:	42ae      	cmp	r6, r5
 800e3c4:	dc34      	bgt.n	800e430 <__gethex+0x2bc>
 800e3c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d022      	beq.n	800e414 <__gethex+0x2a0>
 800e3ce:	2b03      	cmp	r3, #3
 800e3d0:	d024      	beq.n	800e41c <__gethex+0x2a8>
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d115      	bne.n	800e402 <__gethex+0x28e>
 800e3d6:	42ae      	cmp	r6, r5
 800e3d8:	d113      	bne.n	800e402 <__gethex+0x28e>
 800e3da:	2e01      	cmp	r6, #1
 800e3dc:	d10b      	bne.n	800e3f6 <__gethex+0x282>
 800e3de:	9a02      	ldr	r2, [sp, #8]
 800e3e0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	2301      	movs	r3, #1
 800e3e8:	6123      	str	r3, [r4, #16]
 800e3ea:	f8ca 3000 	str.w	r3, [sl]
 800e3ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f0:	2562      	movs	r5, #98	@ 0x62
 800e3f2:	601c      	str	r4, [r3, #0]
 800e3f4:	e73a      	b.n	800e26c <__gethex+0xf8>
 800e3f6:	1e71      	subs	r1, r6, #1
 800e3f8:	4620      	mov	r0, r4
 800e3fa:	f7fe f9aa 	bl	800c752 <__any_on>
 800e3fe:	2800      	cmp	r0, #0
 800e400:	d1ed      	bne.n	800e3de <__gethex+0x26a>
 800e402:	9801      	ldr	r0, [sp, #4]
 800e404:	4621      	mov	r1, r4
 800e406:	f7fd fd53 	bl	800beb0 <_Bfree>
 800e40a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e40c:	2300      	movs	r3, #0
 800e40e:	6013      	str	r3, [r2, #0]
 800e410:	2550      	movs	r5, #80	@ 0x50
 800e412:	e72b      	b.n	800e26c <__gethex+0xf8>
 800e414:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e416:	2b00      	cmp	r3, #0
 800e418:	d1f3      	bne.n	800e402 <__gethex+0x28e>
 800e41a:	e7e0      	b.n	800e3de <__gethex+0x26a>
 800e41c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d1dd      	bne.n	800e3de <__gethex+0x26a>
 800e422:	e7ee      	b.n	800e402 <__gethex+0x28e>
 800e424:	08010010 	.word	0x08010010
 800e428:	0800fea3 	.word	0x0800fea3
 800e42c:	080101d9 	.word	0x080101d9
 800e430:	1e6f      	subs	r7, r5, #1
 800e432:	f1b9 0f00 	cmp.w	r9, #0
 800e436:	d130      	bne.n	800e49a <__gethex+0x326>
 800e438:	b127      	cbz	r7, 800e444 <__gethex+0x2d0>
 800e43a:	4639      	mov	r1, r7
 800e43c:	4620      	mov	r0, r4
 800e43e:	f7fe f988 	bl	800c752 <__any_on>
 800e442:	4681      	mov	r9, r0
 800e444:	117a      	asrs	r2, r7, #5
 800e446:	2301      	movs	r3, #1
 800e448:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800e44c:	f007 071f 	and.w	r7, r7, #31
 800e450:	40bb      	lsls	r3, r7
 800e452:	4213      	tst	r3, r2
 800e454:	4629      	mov	r1, r5
 800e456:	4620      	mov	r0, r4
 800e458:	bf18      	it	ne
 800e45a:	f049 0902 	orrne.w	r9, r9, #2
 800e45e:	f7ff fe21 	bl	800e0a4 <rshift>
 800e462:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800e466:	1b76      	subs	r6, r6, r5
 800e468:	2502      	movs	r5, #2
 800e46a:	f1b9 0f00 	cmp.w	r9, #0
 800e46e:	d047      	beq.n	800e500 <__gethex+0x38c>
 800e470:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e474:	2b02      	cmp	r3, #2
 800e476:	d015      	beq.n	800e4a4 <__gethex+0x330>
 800e478:	2b03      	cmp	r3, #3
 800e47a:	d017      	beq.n	800e4ac <__gethex+0x338>
 800e47c:	2b01      	cmp	r3, #1
 800e47e:	d109      	bne.n	800e494 <__gethex+0x320>
 800e480:	f019 0f02 	tst.w	r9, #2
 800e484:	d006      	beq.n	800e494 <__gethex+0x320>
 800e486:	f8da 3000 	ldr.w	r3, [sl]
 800e48a:	ea49 0903 	orr.w	r9, r9, r3
 800e48e:	f019 0f01 	tst.w	r9, #1
 800e492:	d10e      	bne.n	800e4b2 <__gethex+0x33e>
 800e494:	f045 0510 	orr.w	r5, r5, #16
 800e498:	e032      	b.n	800e500 <__gethex+0x38c>
 800e49a:	f04f 0901 	mov.w	r9, #1
 800e49e:	e7d1      	b.n	800e444 <__gethex+0x2d0>
 800e4a0:	2501      	movs	r5, #1
 800e4a2:	e7e2      	b.n	800e46a <__gethex+0x2f6>
 800e4a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4a6:	f1c3 0301 	rsb	r3, r3, #1
 800e4aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d0f0      	beq.n	800e494 <__gethex+0x320>
 800e4b2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e4b6:	f104 0314 	add.w	r3, r4, #20
 800e4ba:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e4be:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e4c2:	f04f 0c00 	mov.w	ip, #0
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4cc:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e4d0:	d01b      	beq.n	800e50a <__gethex+0x396>
 800e4d2:	3201      	adds	r2, #1
 800e4d4:	6002      	str	r2, [r0, #0]
 800e4d6:	2d02      	cmp	r5, #2
 800e4d8:	f104 0314 	add.w	r3, r4, #20
 800e4dc:	d13c      	bne.n	800e558 <__gethex+0x3e4>
 800e4de:	f8d8 2000 	ldr.w	r2, [r8]
 800e4e2:	3a01      	subs	r2, #1
 800e4e4:	42b2      	cmp	r2, r6
 800e4e6:	d109      	bne.n	800e4fc <__gethex+0x388>
 800e4e8:	1171      	asrs	r1, r6, #5
 800e4ea:	2201      	movs	r2, #1
 800e4ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e4f0:	f006 061f 	and.w	r6, r6, #31
 800e4f4:	fa02 f606 	lsl.w	r6, r2, r6
 800e4f8:	421e      	tst	r6, r3
 800e4fa:	d13a      	bne.n	800e572 <__gethex+0x3fe>
 800e4fc:	f045 0520 	orr.w	r5, r5, #32
 800e500:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e502:	601c      	str	r4, [r3, #0]
 800e504:	9b02      	ldr	r3, [sp, #8]
 800e506:	601f      	str	r7, [r3, #0]
 800e508:	e6b0      	b.n	800e26c <__gethex+0xf8>
 800e50a:	4299      	cmp	r1, r3
 800e50c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e510:	d8d9      	bhi.n	800e4c6 <__gethex+0x352>
 800e512:	68a3      	ldr	r3, [r4, #8]
 800e514:	459b      	cmp	fp, r3
 800e516:	db17      	blt.n	800e548 <__gethex+0x3d4>
 800e518:	6861      	ldr	r1, [r4, #4]
 800e51a:	9801      	ldr	r0, [sp, #4]
 800e51c:	3101      	adds	r1, #1
 800e51e:	f7fd fc87 	bl	800be30 <_Balloc>
 800e522:	4681      	mov	r9, r0
 800e524:	b918      	cbnz	r0, 800e52e <__gethex+0x3ba>
 800e526:	4b1a      	ldr	r3, [pc, #104]	@ (800e590 <__gethex+0x41c>)
 800e528:	4602      	mov	r2, r0
 800e52a:	2184      	movs	r1, #132	@ 0x84
 800e52c:	e6c5      	b.n	800e2ba <__gethex+0x146>
 800e52e:	6922      	ldr	r2, [r4, #16]
 800e530:	3202      	adds	r2, #2
 800e532:	f104 010c 	add.w	r1, r4, #12
 800e536:	0092      	lsls	r2, r2, #2
 800e538:	300c      	adds	r0, #12
 800e53a:	f7ff fd6b 	bl	800e014 <memcpy>
 800e53e:	4621      	mov	r1, r4
 800e540:	9801      	ldr	r0, [sp, #4]
 800e542:	f7fd fcb5 	bl	800beb0 <_Bfree>
 800e546:	464c      	mov	r4, r9
 800e548:	6923      	ldr	r3, [r4, #16]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e550:	6122      	str	r2, [r4, #16]
 800e552:	2201      	movs	r2, #1
 800e554:	615a      	str	r2, [r3, #20]
 800e556:	e7be      	b.n	800e4d6 <__gethex+0x362>
 800e558:	6922      	ldr	r2, [r4, #16]
 800e55a:	455a      	cmp	r2, fp
 800e55c:	dd0b      	ble.n	800e576 <__gethex+0x402>
 800e55e:	2101      	movs	r1, #1
 800e560:	4620      	mov	r0, r4
 800e562:	f7ff fd9f 	bl	800e0a4 <rshift>
 800e566:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e56a:	3701      	adds	r7, #1
 800e56c:	42bb      	cmp	r3, r7
 800e56e:	f6ff aee0 	blt.w	800e332 <__gethex+0x1be>
 800e572:	2501      	movs	r5, #1
 800e574:	e7c2      	b.n	800e4fc <__gethex+0x388>
 800e576:	f016 061f 	ands.w	r6, r6, #31
 800e57a:	d0fa      	beq.n	800e572 <__gethex+0x3fe>
 800e57c:	4453      	add	r3, sl
 800e57e:	f1c6 0620 	rsb	r6, r6, #32
 800e582:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e586:	f7fd fd45 	bl	800c014 <__hi0bits>
 800e58a:	42b0      	cmp	r0, r6
 800e58c:	dbe7      	blt.n	800e55e <__gethex+0x3ea>
 800e58e:	e7f0      	b.n	800e572 <__gethex+0x3fe>
 800e590:	0800fea3 	.word	0x0800fea3

0800e594 <L_shift>:
 800e594:	f1c2 0208 	rsb	r2, r2, #8
 800e598:	0092      	lsls	r2, r2, #2
 800e59a:	b570      	push	{r4, r5, r6, lr}
 800e59c:	f1c2 0620 	rsb	r6, r2, #32
 800e5a0:	6843      	ldr	r3, [r0, #4]
 800e5a2:	6804      	ldr	r4, [r0, #0]
 800e5a4:	fa03 f506 	lsl.w	r5, r3, r6
 800e5a8:	432c      	orrs	r4, r5
 800e5aa:	40d3      	lsrs	r3, r2
 800e5ac:	6004      	str	r4, [r0, #0]
 800e5ae:	f840 3f04 	str.w	r3, [r0, #4]!
 800e5b2:	4288      	cmp	r0, r1
 800e5b4:	d3f4      	bcc.n	800e5a0 <L_shift+0xc>
 800e5b6:	bd70      	pop	{r4, r5, r6, pc}

0800e5b8 <__match>:
 800e5b8:	b530      	push	{r4, r5, lr}
 800e5ba:	6803      	ldr	r3, [r0, #0]
 800e5bc:	3301      	adds	r3, #1
 800e5be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5c2:	b914      	cbnz	r4, 800e5ca <__match+0x12>
 800e5c4:	6003      	str	r3, [r0, #0]
 800e5c6:	2001      	movs	r0, #1
 800e5c8:	bd30      	pop	{r4, r5, pc}
 800e5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5ce:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800e5d2:	2d19      	cmp	r5, #25
 800e5d4:	bf98      	it	ls
 800e5d6:	3220      	addls	r2, #32
 800e5d8:	42a2      	cmp	r2, r4
 800e5da:	d0f0      	beq.n	800e5be <__match+0x6>
 800e5dc:	2000      	movs	r0, #0
 800e5de:	e7f3      	b.n	800e5c8 <__match+0x10>

0800e5e0 <__hexnan>:
 800e5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5e4:	680b      	ldr	r3, [r1, #0]
 800e5e6:	6801      	ldr	r1, [r0, #0]
 800e5e8:	115e      	asrs	r6, r3, #5
 800e5ea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e5ee:	f013 031f 	ands.w	r3, r3, #31
 800e5f2:	b087      	sub	sp, #28
 800e5f4:	bf18      	it	ne
 800e5f6:	3604      	addne	r6, #4
 800e5f8:	2500      	movs	r5, #0
 800e5fa:	1f37      	subs	r7, r6, #4
 800e5fc:	4682      	mov	sl, r0
 800e5fe:	4690      	mov	r8, r2
 800e600:	9301      	str	r3, [sp, #4]
 800e602:	f846 5c04 	str.w	r5, [r6, #-4]
 800e606:	46b9      	mov	r9, r7
 800e608:	463c      	mov	r4, r7
 800e60a:	9502      	str	r5, [sp, #8]
 800e60c:	46ab      	mov	fp, r5
 800e60e:	784a      	ldrb	r2, [r1, #1]
 800e610:	1c4b      	adds	r3, r1, #1
 800e612:	9303      	str	r3, [sp, #12]
 800e614:	b342      	cbz	r2, 800e668 <__hexnan+0x88>
 800e616:	4610      	mov	r0, r2
 800e618:	9105      	str	r1, [sp, #20]
 800e61a:	9204      	str	r2, [sp, #16]
 800e61c:	f7ff fd94 	bl	800e148 <__hexdig_fun>
 800e620:	2800      	cmp	r0, #0
 800e622:	d151      	bne.n	800e6c8 <__hexnan+0xe8>
 800e624:	9a04      	ldr	r2, [sp, #16]
 800e626:	9905      	ldr	r1, [sp, #20]
 800e628:	2a20      	cmp	r2, #32
 800e62a:	d818      	bhi.n	800e65e <__hexnan+0x7e>
 800e62c:	9b02      	ldr	r3, [sp, #8]
 800e62e:	459b      	cmp	fp, r3
 800e630:	dd13      	ble.n	800e65a <__hexnan+0x7a>
 800e632:	454c      	cmp	r4, r9
 800e634:	d206      	bcs.n	800e644 <__hexnan+0x64>
 800e636:	2d07      	cmp	r5, #7
 800e638:	dc04      	bgt.n	800e644 <__hexnan+0x64>
 800e63a:	462a      	mov	r2, r5
 800e63c:	4649      	mov	r1, r9
 800e63e:	4620      	mov	r0, r4
 800e640:	f7ff ffa8 	bl	800e594 <L_shift>
 800e644:	4544      	cmp	r4, r8
 800e646:	d952      	bls.n	800e6ee <__hexnan+0x10e>
 800e648:	2300      	movs	r3, #0
 800e64a:	f1a4 0904 	sub.w	r9, r4, #4
 800e64e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e652:	f8cd b008 	str.w	fp, [sp, #8]
 800e656:	464c      	mov	r4, r9
 800e658:	461d      	mov	r5, r3
 800e65a:	9903      	ldr	r1, [sp, #12]
 800e65c:	e7d7      	b.n	800e60e <__hexnan+0x2e>
 800e65e:	2a29      	cmp	r2, #41	@ 0x29
 800e660:	d157      	bne.n	800e712 <__hexnan+0x132>
 800e662:	3102      	adds	r1, #2
 800e664:	f8ca 1000 	str.w	r1, [sl]
 800e668:	f1bb 0f00 	cmp.w	fp, #0
 800e66c:	d051      	beq.n	800e712 <__hexnan+0x132>
 800e66e:	454c      	cmp	r4, r9
 800e670:	d206      	bcs.n	800e680 <__hexnan+0xa0>
 800e672:	2d07      	cmp	r5, #7
 800e674:	dc04      	bgt.n	800e680 <__hexnan+0xa0>
 800e676:	462a      	mov	r2, r5
 800e678:	4649      	mov	r1, r9
 800e67a:	4620      	mov	r0, r4
 800e67c:	f7ff ff8a 	bl	800e594 <L_shift>
 800e680:	4544      	cmp	r4, r8
 800e682:	d936      	bls.n	800e6f2 <__hexnan+0x112>
 800e684:	f1a8 0204 	sub.w	r2, r8, #4
 800e688:	4623      	mov	r3, r4
 800e68a:	f853 1b04 	ldr.w	r1, [r3], #4
 800e68e:	f842 1f04 	str.w	r1, [r2, #4]!
 800e692:	429f      	cmp	r7, r3
 800e694:	d2f9      	bcs.n	800e68a <__hexnan+0xaa>
 800e696:	1b3b      	subs	r3, r7, r4
 800e698:	f023 0303 	bic.w	r3, r3, #3
 800e69c:	3304      	adds	r3, #4
 800e69e:	3401      	adds	r4, #1
 800e6a0:	3e03      	subs	r6, #3
 800e6a2:	42b4      	cmp	r4, r6
 800e6a4:	bf88      	it	hi
 800e6a6:	2304      	movhi	r3, #4
 800e6a8:	4443      	add	r3, r8
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	f843 2b04 	str.w	r2, [r3], #4
 800e6b0:	429f      	cmp	r7, r3
 800e6b2:	d2fb      	bcs.n	800e6ac <__hexnan+0xcc>
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	b91b      	cbnz	r3, 800e6c0 <__hexnan+0xe0>
 800e6b8:	4547      	cmp	r7, r8
 800e6ba:	d128      	bne.n	800e70e <__hexnan+0x12e>
 800e6bc:	2301      	movs	r3, #1
 800e6be:	603b      	str	r3, [r7, #0]
 800e6c0:	2005      	movs	r0, #5
 800e6c2:	b007      	add	sp, #28
 800e6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6c8:	3501      	adds	r5, #1
 800e6ca:	2d08      	cmp	r5, #8
 800e6cc:	f10b 0b01 	add.w	fp, fp, #1
 800e6d0:	dd06      	ble.n	800e6e0 <__hexnan+0x100>
 800e6d2:	4544      	cmp	r4, r8
 800e6d4:	d9c1      	bls.n	800e65a <__hexnan+0x7a>
 800e6d6:	2300      	movs	r3, #0
 800e6d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e6dc:	2501      	movs	r5, #1
 800e6de:	3c04      	subs	r4, #4
 800e6e0:	6822      	ldr	r2, [r4, #0]
 800e6e2:	f000 000f 	and.w	r0, r0, #15
 800e6e6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800e6ea:	6020      	str	r0, [r4, #0]
 800e6ec:	e7b5      	b.n	800e65a <__hexnan+0x7a>
 800e6ee:	2508      	movs	r5, #8
 800e6f0:	e7b3      	b.n	800e65a <__hexnan+0x7a>
 800e6f2:	9b01      	ldr	r3, [sp, #4]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d0dd      	beq.n	800e6b4 <__hexnan+0xd4>
 800e6f8:	f1c3 0320 	rsb	r3, r3, #32
 800e6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800e700:	40da      	lsrs	r2, r3
 800e702:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800e706:	4013      	ands	r3, r2
 800e708:	f846 3c04 	str.w	r3, [r6, #-4]
 800e70c:	e7d2      	b.n	800e6b4 <__hexnan+0xd4>
 800e70e:	3f04      	subs	r7, #4
 800e710:	e7d0      	b.n	800e6b4 <__hexnan+0xd4>
 800e712:	2004      	movs	r0, #4
 800e714:	e7d5      	b.n	800e6c2 <__hexnan+0xe2>

0800e716 <__ascii_mbtowc>:
 800e716:	b082      	sub	sp, #8
 800e718:	b901      	cbnz	r1, 800e71c <__ascii_mbtowc+0x6>
 800e71a:	a901      	add	r1, sp, #4
 800e71c:	b142      	cbz	r2, 800e730 <__ascii_mbtowc+0x1a>
 800e71e:	b14b      	cbz	r3, 800e734 <__ascii_mbtowc+0x1e>
 800e720:	7813      	ldrb	r3, [r2, #0]
 800e722:	600b      	str	r3, [r1, #0]
 800e724:	7812      	ldrb	r2, [r2, #0]
 800e726:	1e10      	subs	r0, r2, #0
 800e728:	bf18      	it	ne
 800e72a:	2001      	movne	r0, #1
 800e72c:	b002      	add	sp, #8
 800e72e:	4770      	bx	lr
 800e730:	4610      	mov	r0, r2
 800e732:	e7fb      	b.n	800e72c <__ascii_mbtowc+0x16>
 800e734:	f06f 0001 	mvn.w	r0, #1
 800e738:	e7f8      	b.n	800e72c <__ascii_mbtowc+0x16>

0800e73a <_realloc_r>:
 800e73a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e73e:	4680      	mov	r8, r0
 800e740:	4615      	mov	r5, r2
 800e742:	460c      	mov	r4, r1
 800e744:	b921      	cbnz	r1, 800e750 <_realloc_r+0x16>
 800e746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e74a:	4611      	mov	r1, r2
 800e74c:	f7fd bae4 	b.w	800bd18 <_malloc_r>
 800e750:	b92a      	cbnz	r2, 800e75e <_realloc_r+0x24>
 800e752:	f7fd fa6d 	bl	800bc30 <_free_r>
 800e756:	2400      	movs	r4, #0
 800e758:	4620      	mov	r0, r4
 800e75a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e75e:	f000 f8b2 	bl	800e8c6 <_malloc_usable_size_r>
 800e762:	4285      	cmp	r5, r0
 800e764:	4606      	mov	r6, r0
 800e766:	d802      	bhi.n	800e76e <_realloc_r+0x34>
 800e768:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e76c:	d8f4      	bhi.n	800e758 <_realloc_r+0x1e>
 800e76e:	4629      	mov	r1, r5
 800e770:	4640      	mov	r0, r8
 800e772:	f7fd fad1 	bl	800bd18 <_malloc_r>
 800e776:	4607      	mov	r7, r0
 800e778:	2800      	cmp	r0, #0
 800e77a:	d0ec      	beq.n	800e756 <_realloc_r+0x1c>
 800e77c:	42b5      	cmp	r5, r6
 800e77e:	462a      	mov	r2, r5
 800e780:	4621      	mov	r1, r4
 800e782:	bf28      	it	cs
 800e784:	4632      	movcs	r2, r6
 800e786:	f7ff fc45 	bl	800e014 <memcpy>
 800e78a:	4621      	mov	r1, r4
 800e78c:	4640      	mov	r0, r8
 800e78e:	f7fd fa4f 	bl	800bc30 <_free_r>
 800e792:	463c      	mov	r4, r7
 800e794:	e7e0      	b.n	800e758 <_realloc_r+0x1e>
	...

0800e798 <_strtoul_l.constprop.0>:
 800e798:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e79c:	4e34      	ldr	r6, [pc, #208]	@ (800e870 <_strtoul_l.constprop.0+0xd8>)
 800e79e:	4686      	mov	lr, r0
 800e7a0:	460d      	mov	r5, r1
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e7a8:	5d37      	ldrb	r7, [r6, r4]
 800e7aa:	f017 0708 	ands.w	r7, r7, #8
 800e7ae:	d1f8      	bne.n	800e7a2 <_strtoul_l.constprop.0+0xa>
 800e7b0:	2c2d      	cmp	r4, #45	@ 0x2d
 800e7b2:	d12f      	bne.n	800e814 <_strtoul_l.constprop.0+0x7c>
 800e7b4:	782c      	ldrb	r4, [r5, #0]
 800e7b6:	2701      	movs	r7, #1
 800e7b8:	1c85      	adds	r5, r0, #2
 800e7ba:	f033 0010 	bics.w	r0, r3, #16
 800e7be:	d109      	bne.n	800e7d4 <_strtoul_l.constprop.0+0x3c>
 800e7c0:	2c30      	cmp	r4, #48	@ 0x30
 800e7c2:	d12c      	bne.n	800e81e <_strtoul_l.constprop.0+0x86>
 800e7c4:	7828      	ldrb	r0, [r5, #0]
 800e7c6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800e7ca:	2858      	cmp	r0, #88	@ 0x58
 800e7cc:	d127      	bne.n	800e81e <_strtoul_l.constprop.0+0x86>
 800e7ce:	786c      	ldrb	r4, [r5, #1]
 800e7d0:	2310      	movs	r3, #16
 800e7d2:	3502      	adds	r5, #2
 800e7d4:	f04f 38ff 	mov.w	r8, #4294967295
 800e7d8:	2600      	movs	r6, #0
 800e7da:	fbb8 f8f3 	udiv	r8, r8, r3
 800e7de:	fb03 f908 	mul.w	r9, r3, r8
 800e7e2:	ea6f 0909 	mvn.w	r9, r9
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800e7ec:	f1bc 0f09 	cmp.w	ip, #9
 800e7f0:	d81c      	bhi.n	800e82c <_strtoul_l.constprop.0+0x94>
 800e7f2:	4664      	mov	r4, ip
 800e7f4:	42a3      	cmp	r3, r4
 800e7f6:	dd2a      	ble.n	800e84e <_strtoul_l.constprop.0+0xb6>
 800e7f8:	f1b6 3fff 	cmp.w	r6, #4294967295
 800e7fc:	d007      	beq.n	800e80e <_strtoul_l.constprop.0+0x76>
 800e7fe:	4580      	cmp	r8, r0
 800e800:	d322      	bcc.n	800e848 <_strtoul_l.constprop.0+0xb0>
 800e802:	d101      	bne.n	800e808 <_strtoul_l.constprop.0+0x70>
 800e804:	45a1      	cmp	r9, r4
 800e806:	db1f      	blt.n	800e848 <_strtoul_l.constprop.0+0xb0>
 800e808:	fb00 4003 	mla	r0, r0, r3, r4
 800e80c:	2601      	movs	r6, #1
 800e80e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e812:	e7e9      	b.n	800e7e8 <_strtoul_l.constprop.0+0x50>
 800e814:	2c2b      	cmp	r4, #43	@ 0x2b
 800e816:	bf04      	itt	eq
 800e818:	782c      	ldrbeq	r4, [r5, #0]
 800e81a:	1c85      	addeq	r5, r0, #2
 800e81c:	e7cd      	b.n	800e7ba <_strtoul_l.constprop.0+0x22>
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d1d8      	bne.n	800e7d4 <_strtoul_l.constprop.0+0x3c>
 800e822:	2c30      	cmp	r4, #48	@ 0x30
 800e824:	bf0c      	ite	eq
 800e826:	2308      	moveq	r3, #8
 800e828:	230a      	movne	r3, #10
 800e82a:	e7d3      	b.n	800e7d4 <_strtoul_l.constprop.0+0x3c>
 800e82c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800e830:	f1bc 0f19 	cmp.w	ip, #25
 800e834:	d801      	bhi.n	800e83a <_strtoul_l.constprop.0+0xa2>
 800e836:	3c37      	subs	r4, #55	@ 0x37
 800e838:	e7dc      	b.n	800e7f4 <_strtoul_l.constprop.0+0x5c>
 800e83a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800e83e:	f1bc 0f19 	cmp.w	ip, #25
 800e842:	d804      	bhi.n	800e84e <_strtoul_l.constprop.0+0xb6>
 800e844:	3c57      	subs	r4, #87	@ 0x57
 800e846:	e7d5      	b.n	800e7f4 <_strtoul_l.constprop.0+0x5c>
 800e848:	f04f 36ff 	mov.w	r6, #4294967295
 800e84c:	e7df      	b.n	800e80e <_strtoul_l.constprop.0+0x76>
 800e84e:	1c73      	adds	r3, r6, #1
 800e850:	d106      	bne.n	800e860 <_strtoul_l.constprop.0+0xc8>
 800e852:	2322      	movs	r3, #34	@ 0x22
 800e854:	f8ce 3000 	str.w	r3, [lr]
 800e858:	4630      	mov	r0, r6
 800e85a:	b932      	cbnz	r2, 800e86a <_strtoul_l.constprop.0+0xd2>
 800e85c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e860:	b107      	cbz	r7, 800e864 <_strtoul_l.constprop.0+0xcc>
 800e862:	4240      	negs	r0, r0
 800e864:	2a00      	cmp	r2, #0
 800e866:	d0f9      	beq.n	800e85c <_strtoul_l.constprop.0+0xc4>
 800e868:	b106      	cbz	r6, 800e86c <_strtoul_l.constprop.0+0xd4>
 800e86a:	1e69      	subs	r1, r5, #1
 800e86c:	6011      	str	r1, [r2, #0]
 800e86e:	e7f5      	b.n	800e85c <_strtoul_l.constprop.0+0xc4>
 800e870:	08010069 	.word	0x08010069

0800e874 <_strtoul_r>:
 800e874:	f7ff bf90 	b.w	800e798 <_strtoul_l.constprop.0>

0800e878 <__ascii_wctomb>:
 800e878:	4603      	mov	r3, r0
 800e87a:	4608      	mov	r0, r1
 800e87c:	b141      	cbz	r1, 800e890 <__ascii_wctomb+0x18>
 800e87e:	2aff      	cmp	r2, #255	@ 0xff
 800e880:	d904      	bls.n	800e88c <__ascii_wctomb+0x14>
 800e882:	228a      	movs	r2, #138	@ 0x8a
 800e884:	601a      	str	r2, [r3, #0]
 800e886:	f04f 30ff 	mov.w	r0, #4294967295
 800e88a:	4770      	bx	lr
 800e88c:	700a      	strb	r2, [r1, #0]
 800e88e:	2001      	movs	r0, #1
 800e890:	4770      	bx	lr
	...

0800e894 <fiprintf>:
 800e894:	b40e      	push	{r1, r2, r3}
 800e896:	b503      	push	{r0, r1, lr}
 800e898:	4601      	mov	r1, r0
 800e89a:	ab03      	add	r3, sp, #12
 800e89c:	4805      	ldr	r0, [pc, #20]	@ (800e8b4 <fiprintf+0x20>)
 800e89e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8a2:	6800      	ldr	r0, [r0, #0]
 800e8a4:	9301      	str	r3, [sp, #4]
 800e8a6:	f000 f83f 	bl	800e928 <_vfiprintf_r>
 800e8aa:	b002      	add	sp, #8
 800e8ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8b0:	b003      	add	sp, #12
 800e8b2:	4770      	bx	lr
 800e8b4:	2000001c 	.word	0x2000001c

0800e8b8 <abort>:
 800e8b8:	b508      	push	{r3, lr}
 800e8ba:	2006      	movs	r0, #6
 800e8bc:	f000 fa08 	bl	800ecd0 <raise>
 800e8c0:	2001      	movs	r0, #1
 800e8c2:	f7f4 fa1d 	bl	8002d00 <_exit>

0800e8c6 <_malloc_usable_size_r>:
 800e8c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8ca:	1f18      	subs	r0, r3, #4
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	bfbc      	itt	lt
 800e8d0:	580b      	ldrlt	r3, [r1, r0]
 800e8d2:	18c0      	addlt	r0, r0, r3
 800e8d4:	4770      	bx	lr

0800e8d6 <__sfputc_r>:
 800e8d6:	6893      	ldr	r3, [r2, #8]
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	b410      	push	{r4}
 800e8de:	6093      	str	r3, [r2, #8]
 800e8e0:	da08      	bge.n	800e8f4 <__sfputc_r+0x1e>
 800e8e2:	6994      	ldr	r4, [r2, #24]
 800e8e4:	42a3      	cmp	r3, r4
 800e8e6:	db01      	blt.n	800e8ec <__sfputc_r+0x16>
 800e8e8:	290a      	cmp	r1, #10
 800e8ea:	d103      	bne.n	800e8f4 <__sfputc_r+0x1e>
 800e8ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e8f0:	f000 b932 	b.w	800eb58 <__swbuf_r>
 800e8f4:	6813      	ldr	r3, [r2, #0]
 800e8f6:	1c58      	adds	r0, r3, #1
 800e8f8:	6010      	str	r0, [r2, #0]
 800e8fa:	7019      	strb	r1, [r3, #0]
 800e8fc:	4608      	mov	r0, r1
 800e8fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <__sfputs_r>:
 800e904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e906:	4606      	mov	r6, r0
 800e908:	460f      	mov	r7, r1
 800e90a:	4614      	mov	r4, r2
 800e90c:	18d5      	adds	r5, r2, r3
 800e90e:	42ac      	cmp	r4, r5
 800e910:	d101      	bne.n	800e916 <__sfputs_r+0x12>
 800e912:	2000      	movs	r0, #0
 800e914:	e007      	b.n	800e926 <__sfputs_r+0x22>
 800e916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e91a:	463a      	mov	r2, r7
 800e91c:	4630      	mov	r0, r6
 800e91e:	f7ff ffda 	bl	800e8d6 <__sfputc_r>
 800e922:	1c43      	adds	r3, r0, #1
 800e924:	d1f3      	bne.n	800e90e <__sfputs_r+0xa>
 800e926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e928 <_vfiprintf_r>:
 800e928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e92c:	460d      	mov	r5, r1
 800e92e:	b09d      	sub	sp, #116	@ 0x74
 800e930:	4614      	mov	r4, r2
 800e932:	4698      	mov	r8, r3
 800e934:	4606      	mov	r6, r0
 800e936:	b118      	cbz	r0, 800e940 <_vfiprintf_r+0x18>
 800e938:	6a03      	ldr	r3, [r0, #32]
 800e93a:	b90b      	cbnz	r3, 800e940 <_vfiprintf_r+0x18>
 800e93c:	f7fc f9cc 	bl	800acd8 <__sinit>
 800e940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e942:	07d9      	lsls	r1, r3, #31
 800e944:	d405      	bmi.n	800e952 <_vfiprintf_r+0x2a>
 800e946:	89ab      	ldrh	r3, [r5, #12]
 800e948:	059a      	lsls	r2, r3, #22
 800e94a:	d402      	bmi.n	800e952 <_vfiprintf_r+0x2a>
 800e94c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e94e:	f7fc fb18 	bl	800af82 <__retarget_lock_acquire_recursive>
 800e952:	89ab      	ldrh	r3, [r5, #12]
 800e954:	071b      	lsls	r3, r3, #28
 800e956:	d501      	bpl.n	800e95c <_vfiprintf_r+0x34>
 800e958:	692b      	ldr	r3, [r5, #16]
 800e95a:	b99b      	cbnz	r3, 800e984 <_vfiprintf_r+0x5c>
 800e95c:	4629      	mov	r1, r5
 800e95e:	4630      	mov	r0, r6
 800e960:	f000 f938 	bl	800ebd4 <__swsetup_r>
 800e964:	b170      	cbz	r0, 800e984 <_vfiprintf_r+0x5c>
 800e966:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e968:	07dc      	lsls	r4, r3, #31
 800e96a:	d504      	bpl.n	800e976 <_vfiprintf_r+0x4e>
 800e96c:	f04f 30ff 	mov.w	r0, #4294967295
 800e970:	b01d      	add	sp, #116	@ 0x74
 800e972:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e976:	89ab      	ldrh	r3, [r5, #12]
 800e978:	0598      	lsls	r0, r3, #22
 800e97a:	d4f7      	bmi.n	800e96c <_vfiprintf_r+0x44>
 800e97c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e97e:	f7fc fb01 	bl	800af84 <__retarget_lock_release_recursive>
 800e982:	e7f3      	b.n	800e96c <_vfiprintf_r+0x44>
 800e984:	2300      	movs	r3, #0
 800e986:	9309      	str	r3, [sp, #36]	@ 0x24
 800e988:	2320      	movs	r3, #32
 800e98a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e98e:	f8cd 800c 	str.w	r8, [sp, #12]
 800e992:	2330      	movs	r3, #48	@ 0x30
 800e994:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eb44 <_vfiprintf_r+0x21c>
 800e998:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e99c:	f04f 0901 	mov.w	r9, #1
 800e9a0:	4623      	mov	r3, r4
 800e9a2:	469a      	mov	sl, r3
 800e9a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9a8:	b10a      	cbz	r2, 800e9ae <_vfiprintf_r+0x86>
 800e9aa:	2a25      	cmp	r2, #37	@ 0x25
 800e9ac:	d1f9      	bne.n	800e9a2 <_vfiprintf_r+0x7a>
 800e9ae:	ebba 0b04 	subs.w	fp, sl, r4
 800e9b2:	d00b      	beq.n	800e9cc <_vfiprintf_r+0xa4>
 800e9b4:	465b      	mov	r3, fp
 800e9b6:	4622      	mov	r2, r4
 800e9b8:	4629      	mov	r1, r5
 800e9ba:	4630      	mov	r0, r6
 800e9bc:	f7ff ffa2 	bl	800e904 <__sfputs_r>
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	f000 80a7 	beq.w	800eb14 <_vfiprintf_r+0x1ec>
 800e9c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9c8:	445a      	add	r2, fp
 800e9ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800e9cc:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 809f 	beq.w	800eb14 <_vfiprintf_r+0x1ec>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9e0:	f10a 0a01 	add.w	sl, sl, #1
 800e9e4:	9304      	str	r3, [sp, #16]
 800e9e6:	9307      	str	r3, [sp, #28]
 800e9e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e9ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800e9ee:	4654      	mov	r4, sl
 800e9f0:	2205      	movs	r2, #5
 800e9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9f6:	4853      	ldr	r0, [pc, #332]	@ (800eb44 <_vfiprintf_r+0x21c>)
 800e9f8:	f7f1 fbf2 	bl	80001e0 <memchr>
 800e9fc:	9a04      	ldr	r2, [sp, #16]
 800e9fe:	b9d8      	cbnz	r0, 800ea38 <_vfiprintf_r+0x110>
 800ea00:	06d1      	lsls	r1, r2, #27
 800ea02:	bf44      	itt	mi
 800ea04:	2320      	movmi	r3, #32
 800ea06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea0a:	0713      	lsls	r3, r2, #28
 800ea0c:	bf44      	itt	mi
 800ea0e:	232b      	movmi	r3, #43	@ 0x2b
 800ea10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ea14:	f89a 3000 	ldrb.w	r3, [sl]
 800ea18:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea1a:	d015      	beq.n	800ea48 <_vfiprintf_r+0x120>
 800ea1c:	9a07      	ldr	r2, [sp, #28]
 800ea1e:	4654      	mov	r4, sl
 800ea20:	2000      	movs	r0, #0
 800ea22:	f04f 0c0a 	mov.w	ip, #10
 800ea26:	4621      	mov	r1, r4
 800ea28:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea2c:	3b30      	subs	r3, #48	@ 0x30
 800ea2e:	2b09      	cmp	r3, #9
 800ea30:	d94b      	bls.n	800eaca <_vfiprintf_r+0x1a2>
 800ea32:	b1b0      	cbz	r0, 800ea62 <_vfiprintf_r+0x13a>
 800ea34:	9207      	str	r2, [sp, #28]
 800ea36:	e014      	b.n	800ea62 <_vfiprintf_r+0x13a>
 800ea38:	eba0 0308 	sub.w	r3, r0, r8
 800ea3c:	fa09 f303 	lsl.w	r3, r9, r3
 800ea40:	4313      	orrs	r3, r2
 800ea42:	9304      	str	r3, [sp, #16]
 800ea44:	46a2      	mov	sl, r4
 800ea46:	e7d2      	b.n	800e9ee <_vfiprintf_r+0xc6>
 800ea48:	9b03      	ldr	r3, [sp, #12]
 800ea4a:	1d19      	adds	r1, r3, #4
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	9103      	str	r1, [sp, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	bfbb      	ittet	lt
 800ea54:	425b      	neglt	r3, r3
 800ea56:	f042 0202 	orrlt.w	r2, r2, #2
 800ea5a:	9307      	strge	r3, [sp, #28]
 800ea5c:	9307      	strlt	r3, [sp, #28]
 800ea5e:	bfb8      	it	lt
 800ea60:	9204      	strlt	r2, [sp, #16]
 800ea62:	7823      	ldrb	r3, [r4, #0]
 800ea64:	2b2e      	cmp	r3, #46	@ 0x2e
 800ea66:	d10a      	bne.n	800ea7e <_vfiprintf_r+0x156>
 800ea68:	7863      	ldrb	r3, [r4, #1]
 800ea6a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ea6c:	d132      	bne.n	800ead4 <_vfiprintf_r+0x1ac>
 800ea6e:	9b03      	ldr	r3, [sp, #12]
 800ea70:	1d1a      	adds	r2, r3, #4
 800ea72:	681b      	ldr	r3, [r3, #0]
 800ea74:	9203      	str	r2, [sp, #12]
 800ea76:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ea7a:	3402      	adds	r4, #2
 800ea7c:	9305      	str	r3, [sp, #20]
 800ea7e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eb54 <_vfiprintf_r+0x22c>
 800ea82:	7821      	ldrb	r1, [r4, #0]
 800ea84:	2203      	movs	r2, #3
 800ea86:	4650      	mov	r0, sl
 800ea88:	f7f1 fbaa 	bl	80001e0 <memchr>
 800ea8c:	b138      	cbz	r0, 800ea9e <_vfiprintf_r+0x176>
 800ea8e:	9b04      	ldr	r3, [sp, #16]
 800ea90:	eba0 000a 	sub.w	r0, r0, sl
 800ea94:	2240      	movs	r2, #64	@ 0x40
 800ea96:	4082      	lsls	r2, r0
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	3401      	adds	r4, #1
 800ea9c:	9304      	str	r3, [sp, #16]
 800ea9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaa2:	4829      	ldr	r0, [pc, #164]	@ (800eb48 <_vfiprintf_r+0x220>)
 800eaa4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eaa8:	2206      	movs	r2, #6
 800eaaa:	f7f1 fb99 	bl	80001e0 <memchr>
 800eaae:	2800      	cmp	r0, #0
 800eab0:	d03f      	beq.n	800eb32 <_vfiprintf_r+0x20a>
 800eab2:	4b26      	ldr	r3, [pc, #152]	@ (800eb4c <_vfiprintf_r+0x224>)
 800eab4:	bb1b      	cbnz	r3, 800eafe <_vfiprintf_r+0x1d6>
 800eab6:	9b03      	ldr	r3, [sp, #12]
 800eab8:	3307      	adds	r3, #7
 800eaba:	f023 0307 	bic.w	r3, r3, #7
 800eabe:	3308      	adds	r3, #8
 800eac0:	9303      	str	r3, [sp, #12]
 800eac2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eac4:	443b      	add	r3, r7
 800eac6:	9309      	str	r3, [sp, #36]	@ 0x24
 800eac8:	e76a      	b.n	800e9a0 <_vfiprintf_r+0x78>
 800eaca:	fb0c 3202 	mla	r2, ip, r2, r3
 800eace:	460c      	mov	r4, r1
 800ead0:	2001      	movs	r0, #1
 800ead2:	e7a8      	b.n	800ea26 <_vfiprintf_r+0xfe>
 800ead4:	2300      	movs	r3, #0
 800ead6:	3401      	adds	r4, #1
 800ead8:	9305      	str	r3, [sp, #20]
 800eada:	4619      	mov	r1, r3
 800eadc:	f04f 0c0a 	mov.w	ip, #10
 800eae0:	4620      	mov	r0, r4
 800eae2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eae6:	3a30      	subs	r2, #48	@ 0x30
 800eae8:	2a09      	cmp	r2, #9
 800eaea:	d903      	bls.n	800eaf4 <_vfiprintf_r+0x1cc>
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d0c6      	beq.n	800ea7e <_vfiprintf_r+0x156>
 800eaf0:	9105      	str	r1, [sp, #20]
 800eaf2:	e7c4      	b.n	800ea7e <_vfiprintf_r+0x156>
 800eaf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800eaf8:	4604      	mov	r4, r0
 800eafa:	2301      	movs	r3, #1
 800eafc:	e7f0      	b.n	800eae0 <_vfiprintf_r+0x1b8>
 800eafe:	ab03      	add	r3, sp, #12
 800eb00:	9300      	str	r3, [sp, #0]
 800eb02:	462a      	mov	r2, r5
 800eb04:	4b12      	ldr	r3, [pc, #72]	@ (800eb50 <_vfiprintf_r+0x228>)
 800eb06:	a904      	add	r1, sp, #16
 800eb08:	4630      	mov	r0, r6
 800eb0a:	f7fb fa8d 	bl	800a028 <_printf_float>
 800eb0e:	4607      	mov	r7, r0
 800eb10:	1c78      	adds	r0, r7, #1
 800eb12:	d1d6      	bne.n	800eac2 <_vfiprintf_r+0x19a>
 800eb14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eb16:	07d9      	lsls	r1, r3, #31
 800eb18:	d405      	bmi.n	800eb26 <_vfiprintf_r+0x1fe>
 800eb1a:	89ab      	ldrh	r3, [r5, #12]
 800eb1c:	059a      	lsls	r2, r3, #22
 800eb1e:	d402      	bmi.n	800eb26 <_vfiprintf_r+0x1fe>
 800eb20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eb22:	f7fc fa2f 	bl	800af84 <__retarget_lock_release_recursive>
 800eb26:	89ab      	ldrh	r3, [r5, #12]
 800eb28:	065b      	lsls	r3, r3, #25
 800eb2a:	f53f af1f 	bmi.w	800e96c <_vfiprintf_r+0x44>
 800eb2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb30:	e71e      	b.n	800e970 <_vfiprintf_r+0x48>
 800eb32:	ab03      	add	r3, sp, #12
 800eb34:	9300      	str	r3, [sp, #0]
 800eb36:	462a      	mov	r2, r5
 800eb38:	4b05      	ldr	r3, [pc, #20]	@ (800eb50 <_vfiprintf_r+0x228>)
 800eb3a:	a904      	add	r1, sp, #16
 800eb3c:	4630      	mov	r0, r6
 800eb3e:	f7fb fd0b 	bl	800a558 <_printf_i>
 800eb42:	e7e4      	b.n	800eb0e <_vfiprintf_r+0x1e6>
 800eb44:	08010169 	.word	0x08010169
 800eb48:	08010173 	.word	0x08010173
 800eb4c:	0800a029 	.word	0x0800a029
 800eb50:	0800e905 	.word	0x0800e905
 800eb54:	0801016f 	.word	0x0801016f

0800eb58 <__swbuf_r>:
 800eb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb5a:	460e      	mov	r6, r1
 800eb5c:	4614      	mov	r4, r2
 800eb5e:	4605      	mov	r5, r0
 800eb60:	b118      	cbz	r0, 800eb6a <__swbuf_r+0x12>
 800eb62:	6a03      	ldr	r3, [r0, #32]
 800eb64:	b90b      	cbnz	r3, 800eb6a <__swbuf_r+0x12>
 800eb66:	f7fc f8b7 	bl	800acd8 <__sinit>
 800eb6a:	69a3      	ldr	r3, [r4, #24]
 800eb6c:	60a3      	str	r3, [r4, #8]
 800eb6e:	89a3      	ldrh	r3, [r4, #12]
 800eb70:	071a      	lsls	r2, r3, #28
 800eb72:	d501      	bpl.n	800eb78 <__swbuf_r+0x20>
 800eb74:	6923      	ldr	r3, [r4, #16]
 800eb76:	b943      	cbnz	r3, 800eb8a <__swbuf_r+0x32>
 800eb78:	4621      	mov	r1, r4
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f000 f82a 	bl	800ebd4 <__swsetup_r>
 800eb80:	b118      	cbz	r0, 800eb8a <__swbuf_r+0x32>
 800eb82:	f04f 37ff 	mov.w	r7, #4294967295
 800eb86:	4638      	mov	r0, r7
 800eb88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb8a:	6823      	ldr	r3, [r4, #0]
 800eb8c:	6922      	ldr	r2, [r4, #16]
 800eb8e:	1a98      	subs	r0, r3, r2
 800eb90:	6963      	ldr	r3, [r4, #20]
 800eb92:	b2f6      	uxtb	r6, r6
 800eb94:	4283      	cmp	r3, r0
 800eb96:	4637      	mov	r7, r6
 800eb98:	dc05      	bgt.n	800eba6 <__swbuf_r+0x4e>
 800eb9a:	4621      	mov	r1, r4
 800eb9c:	4628      	mov	r0, r5
 800eb9e:	f7ff f973 	bl	800de88 <_fflush_r>
 800eba2:	2800      	cmp	r0, #0
 800eba4:	d1ed      	bne.n	800eb82 <__swbuf_r+0x2a>
 800eba6:	68a3      	ldr	r3, [r4, #8]
 800eba8:	3b01      	subs	r3, #1
 800ebaa:	60a3      	str	r3, [r4, #8]
 800ebac:	6823      	ldr	r3, [r4, #0]
 800ebae:	1c5a      	adds	r2, r3, #1
 800ebb0:	6022      	str	r2, [r4, #0]
 800ebb2:	701e      	strb	r6, [r3, #0]
 800ebb4:	6962      	ldr	r2, [r4, #20]
 800ebb6:	1c43      	adds	r3, r0, #1
 800ebb8:	429a      	cmp	r2, r3
 800ebba:	d004      	beq.n	800ebc6 <__swbuf_r+0x6e>
 800ebbc:	89a3      	ldrh	r3, [r4, #12]
 800ebbe:	07db      	lsls	r3, r3, #31
 800ebc0:	d5e1      	bpl.n	800eb86 <__swbuf_r+0x2e>
 800ebc2:	2e0a      	cmp	r6, #10
 800ebc4:	d1df      	bne.n	800eb86 <__swbuf_r+0x2e>
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4628      	mov	r0, r5
 800ebca:	f7ff f95d 	bl	800de88 <_fflush_r>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	d0d9      	beq.n	800eb86 <__swbuf_r+0x2e>
 800ebd2:	e7d6      	b.n	800eb82 <__swbuf_r+0x2a>

0800ebd4 <__swsetup_r>:
 800ebd4:	b538      	push	{r3, r4, r5, lr}
 800ebd6:	4b29      	ldr	r3, [pc, #164]	@ (800ec7c <__swsetup_r+0xa8>)
 800ebd8:	4605      	mov	r5, r0
 800ebda:	6818      	ldr	r0, [r3, #0]
 800ebdc:	460c      	mov	r4, r1
 800ebde:	b118      	cbz	r0, 800ebe8 <__swsetup_r+0x14>
 800ebe0:	6a03      	ldr	r3, [r0, #32]
 800ebe2:	b90b      	cbnz	r3, 800ebe8 <__swsetup_r+0x14>
 800ebe4:	f7fc f878 	bl	800acd8 <__sinit>
 800ebe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebec:	0719      	lsls	r1, r3, #28
 800ebee:	d422      	bmi.n	800ec36 <__swsetup_r+0x62>
 800ebf0:	06da      	lsls	r2, r3, #27
 800ebf2:	d407      	bmi.n	800ec04 <__swsetup_r+0x30>
 800ebf4:	2209      	movs	r2, #9
 800ebf6:	602a      	str	r2, [r5, #0]
 800ebf8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebfc:	81a3      	strh	r3, [r4, #12]
 800ebfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ec02:	e033      	b.n	800ec6c <__swsetup_r+0x98>
 800ec04:	0758      	lsls	r0, r3, #29
 800ec06:	d512      	bpl.n	800ec2e <__swsetup_r+0x5a>
 800ec08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ec0a:	b141      	cbz	r1, 800ec1e <__swsetup_r+0x4a>
 800ec0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ec10:	4299      	cmp	r1, r3
 800ec12:	d002      	beq.n	800ec1a <__swsetup_r+0x46>
 800ec14:	4628      	mov	r0, r5
 800ec16:	f7fd f80b 	bl	800bc30 <_free_r>
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ec1e:	89a3      	ldrh	r3, [r4, #12]
 800ec20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ec24:	81a3      	strh	r3, [r4, #12]
 800ec26:	2300      	movs	r3, #0
 800ec28:	6063      	str	r3, [r4, #4]
 800ec2a:	6923      	ldr	r3, [r4, #16]
 800ec2c:	6023      	str	r3, [r4, #0]
 800ec2e:	89a3      	ldrh	r3, [r4, #12]
 800ec30:	f043 0308 	orr.w	r3, r3, #8
 800ec34:	81a3      	strh	r3, [r4, #12]
 800ec36:	6923      	ldr	r3, [r4, #16]
 800ec38:	b94b      	cbnz	r3, 800ec4e <__swsetup_r+0x7a>
 800ec3a:	89a3      	ldrh	r3, [r4, #12]
 800ec3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ec40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ec44:	d003      	beq.n	800ec4e <__swsetup_r+0x7a>
 800ec46:	4621      	mov	r1, r4
 800ec48:	4628      	mov	r0, r5
 800ec4a:	f000 f883 	bl	800ed54 <__smakebuf_r>
 800ec4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec52:	f013 0201 	ands.w	r2, r3, #1
 800ec56:	d00a      	beq.n	800ec6e <__swsetup_r+0x9a>
 800ec58:	2200      	movs	r2, #0
 800ec5a:	60a2      	str	r2, [r4, #8]
 800ec5c:	6962      	ldr	r2, [r4, #20]
 800ec5e:	4252      	negs	r2, r2
 800ec60:	61a2      	str	r2, [r4, #24]
 800ec62:	6922      	ldr	r2, [r4, #16]
 800ec64:	b942      	cbnz	r2, 800ec78 <__swsetup_r+0xa4>
 800ec66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ec6a:	d1c5      	bne.n	800ebf8 <__swsetup_r+0x24>
 800ec6c:	bd38      	pop	{r3, r4, r5, pc}
 800ec6e:	0799      	lsls	r1, r3, #30
 800ec70:	bf58      	it	pl
 800ec72:	6962      	ldrpl	r2, [r4, #20]
 800ec74:	60a2      	str	r2, [r4, #8]
 800ec76:	e7f4      	b.n	800ec62 <__swsetup_r+0x8e>
 800ec78:	2000      	movs	r0, #0
 800ec7a:	e7f7      	b.n	800ec6c <__swsetup_r+0x98>
 800ec7c:	2000001c 	.word	0x2000001c

0800ec80 <_raise_r>:
 800ec80:	291f      	cmp	r1, #31
 800ec82:	b538      	push	{r3, r4, r5, lr}
 800ec84:	4605      	mov	r5, r0
 800ec86:	460c      	mov	r4, r1
 800ec88:	d904      	bls.n	800ec94 <_raise_r+0x14>
 800ec8a:	2316      	movs	r3, #22
 800ec8c:	6003      	str	r3, [r0, #0]
 800ec8e:	f04f 30ff 	mov.w	r0, #4294967295
 800ec92:	bd38      	pop	{r3, r4, r5, pc}
 800ec94:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ec96:	b112      	cbz	r2, 800ec9e <_raise_r+0x1e>
 800ec98:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec9c:	b94b      	cbnz	r3, 800ecb2 <_raise_r+0x32>
 800ec9e:	4628      	mov	r0, r5
 800eca0:	f000 f830 	bl	800ed04 <_getpid_r>
 800eca4:	4622      	mov	r2, r4
 800eca6:	4601      	mov	r1, r0
 800eca8:	4628      	mov	r0, r5
 800ecaa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ecae:	f000 b817 	b.w	800ece0 <_kill_r>
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d00a      	beq.n	800eccc <_raise_r+0x4c>
 800ecb6:	1c59      	adds	r1, r3, #1
 800ecb8:	d103      	bne.n	800ecc2 <_raise_r+0x42>
 800ecba:	2316      	movs	r3, #22
 800ecbc:	6003      	str	r3, [r0, #0]
 800ecbe:	2001      	movs	r0, #1
 800ecc0:	e7e7      	b.n	800ec92 <_raise_r+0x12>
 800ecc2:	2100      	movs	r1, #0
 800ecc4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ecc8:	4620      	mov	r0, r4
 800ecca:	4798      	blx	r3
 800eccc:	2000      	movs	r0, #0
 800ecce:	e7e0      	b.n	800ec92 <_raise_r+0x12>

0800ecd0 <raise>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	@ (800ecdc <raise+0xc>)
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	6818      	ldr	r0, [r3, #0]
 800ecd6:	f7ff bfd3 	b.w	800ec80 <_raise_r>
 800ecda:	bf00      	nop
 800ecdc:	2000001c 	.word	0x2000001c

0800ece0 <_kill_r>:
 800ece0:	b538      	push	{r3, r4, r5, lr}
 800ece2:	4d07      	ldr	r5, [pc, #28]	@ (800ed00 <_kill_r+0x20>)
 800ece4:	2300      	movs	r3, #0
 800ece6:	4604      	mov	r4, r0
 800ece8:	4608      	mov	r0, r1
 800ecea:	4611      	mov	r1, r2
 800ecec:	602b      	str	r3, [r5, #0]
 800ecee:	f7f3 fff7 	bl	8002ce0 <_kill>
 800ecf2:	1c43      	adds	r3, r0, #1
 800ecf4:	d102      	bne.n	800ecfc <_kill_r+0x1c>
 800ecf6:	682b      	ldr	r3, [r5, #0]
 800ecf8:	b103      	cbz	r3, 800ecfc <_kill_r+0x1c>
 800ecfa:	6023      	str	r3, [r4, #0]
 800ecfc:	bd38      	pop	{r3, r4, r5, pc}
 800ecfe:	bf00      	nop
 800ed00:	20000890 	.word	0x20000890

0800ed04 <_getpid_r>:
 800ed04:	f7f3 bfe4 	b.w	8002cd0 <_getpid>

0800ed08 <__swhatbuf_r>:
 800ed08:	b570      	push	{r4, r5, r6, lr}
 800ed0a:	460c      	mov	r4, r1
 800ed0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ed10:	2900      	cmp	r1, #0
 800ed12:	b096      	sub	sp, #88	@ 0x58
 800ed14:	4615      	mov	r5, r2
 800ed16:	461e      	mov	r6, r3
 800ed18:	da0d      	bge.n	800ed36 <__swhatbuf_r+0x2e>
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ed20:	f04f 0100 	mov.w	r1, #0
 800ed24:	bf14      	ite	ne
 800ed26:	2340      	movne	r3, #64	@ 0x40
 800ed28:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	6031      	str	r1, [r6, #0]
 800ed30:	602b      	str	r3, [r5, #0]
 800ed32:	b016      	add	sp, #88	@ 0x58
 800ed34:	bd70      	pop	{r4, r5, r6, pc}
 800ed36:	466a      	mov	r2, sp
 800ed38:	f000 f848 	bl	800edcc <_fstat_r>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	dbec      	blt.n	800ed1a <__swhatbuf_r+0x12>
 800ed40:	9901      	ldr	r1, [sp, #4]
 800ed42:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ed46:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ed4a:	4259      	negs	r1, r3
 800ed4c:	4159      	adcs	r1, r3
 800ed4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ed52:	e7eb      	b.n	800ed2c <__swhatbuf_r+0x24>

0800ed54 <__smakebuf_r>:
 800ed54:	898b      	ldrh	r3, [r1, #12]
 800ed56:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed58:	079d      	lsls	r5, r3, #30
 800ed5a:	4606      	mov	r6, r0
 800ed5c:	460c      	mov	r4, r1
 800ed5e:	d507      	bpl.n	800ed70 <__smakebuf_r+0x1c>
 800ed60:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ed64:	6023      	str	r3, [r4, #0]
 800ed66:	6123      	str	r3, [r4, #16]
 800ed68:	2301      	movs	r3, #1
 800ed6a:	6163      	str	r3, [r4, #20]
 800ed6c:	b003      	add	sp, #12
 800ed6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed70:	ab01      	add	r3, sp, #4
 800ed72:	466a      	mov	r2, sp
 800ed74:	f7ff ffc8 	bl	800ed08 <__swhatbuf_r>
 800ed78:	9f00      	ldr	r7, [sp, #0]
 800ed7a:	4605      	mov	r5, r0
 800ed7c:	4639      	mov	r1, r7
 800ed7e:	4630      	mov	r0, r6
 800ed80:	f7fc ffca 	bl	800bd18 <_malloc_r>
 800ed84:	b948      	cbnz	r0, 800ed9a <__smakebuf_r+0x46>
 800ed86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed8a:	059a      	lsls	r2, r3, #22
 800ed8c:	d4ee      	bmi.n	800ed6c <__smakebuf_r+0x18>
 800ed8e:	f023 0303 	bic.w	r3, r3, #3
 800ed92:	f043 0302 	orr.w	r3, r3, #2
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	e7e2      	b.n	800ed60 <__smakebuf_r+0xc>
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	6020      	str	r0, [r4, #0]
 800ed9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eda2:	81a3      	strh	r3, [r4, #12]
 800eda4:	9b01      	ldr	r3, [sp, #4]
 800eda6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800edaa:	b15b      	cbz	r3, 800edc4 <__smakebuf_r+0x70>
 800edac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800edb0:	4630      	mov	r0, r6
 800edb2:	f000 f81d 	bl	800edf0 <_isatty_r>
 800edb6:	b128      	cbz	r0, 800edc4 <__smakebuf_r+0x70>
 800edb8:	89a3      	ldrh	r3, [r4, #12]
 800edba:	f023 0303 	bic.w	r3, r3, #3
 800edbe:	f043 0301 	orr.w	r3, r3, #1
 800edc2:	81a3      	strh	r3, [r4, #12]
 800edc4:	89a3      	ldrh	r3, [r4, #12]
 800edc6:	431d      	orrs	r5, r3
 800edc8:	81a5      	strh	r5, [r4, #12]
 800edca:	e7cf      	b.n	800ed6c <__smakebuf_r+0x18>

0800edcc <_fstat_r>:
 800edcc:	b538      	push	{r3, r4, r5, lr}
 800edce:	4d07      	ldr	r5, [pc, #28]	@ (800edec <_fstat_r+0x20>)
 800edd0:	2300      	movs	r3, #0
 800edd2:	4604      	mov	r4, r0
 800edd4:	4608      	mov	r0, r1
 800edd6:	4611      	mov	r1, r2
 800edd8:	602b      	str	r3, [r5, #0]
 800edda:	f7f3 ffe1 	bl	8002da0 <_fstat>
 800edde:	1c43      	adds	r3, r0, #1
 800ede0:	d102      	bne.n	800ede8 <_fstat_r+0x1c>
 800ede2:	682b      	ldr	r3, [r5, #0]
 800ede4:	b103      	cbz	r3, 800ede8 <_fstat_r+0x1c>
 800ede6:	6023      	str	r3, [r4, #0]
 800ede8:	bd38      	pop	{r3, r4, r5, pc}
 800edea:	bf00      	nop
 800edec:	20000890 	.word	0x20000890

0800edf0 <_isatty_r>:
 800edf0:	b538      	push	{r3, r4, r5, lr}
 800edf2:	4d06      	ldr	r5, [pc, #24]	@ (800ee0c <_isatty_r+0x1c>)
 800edf4:	2300      	movs	r3, #0
 800edf6:	4604      	mov	r4, r0
 800edf8:	4608      	mov	r0, r1
 800edfa:	602b      	str	r3, [r5, #0]
 800edfc:	f7f3 ffe0 	bl	8002dc0 <_isatty>
 800ee00:	1c43      	adds	r3, r0, #1
 800ee02:	d102      	bne.n	800ee0a <_isatty_r+0x1a>
 800ee04:	682b      	ldr	r3, [r5, #0]
 800ee06:	b103      	cbz	r3, 800ee0a <_isatty_r+0x1a>
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	bd38      	pop	{r3, r4, r5, pc}
 800ee0c:	20000890 	.word	0x20000890

0800ee10 <pow>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	ed2d 8b02 	vpush	{d8}
 800ee16:	eeb0 8a40 	vmov.f32	s16, s0
 800ee1a:	eef0 8a60 	vmov.f32	s17, s1
 800ee1e:	ec55 4b11 	vmov	r4, r5, d1
 800ee22:	f000 f871 	bl	800ef08 <__ieee754_pow>
 800ee26:	4622      	mov	r2, r4
 800ee28:	462b      	mov	r3, r5
 800ee2a:	4620      	mov	r0, r4
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	ec57 6b10 	vmov	r6, r7, d0
 800ee32:	f7f1 fe83 	bl	8000b3c <__aeabi_dcmpun>
 800ee36:	2800      	cmp	r0, #0
 800ee38:	d13b      	bne.n	800eeb2 <pow+0xa2>
 800ee3a:	ec51 0b18 	vmov	r0, r1, d8
 800ee3e:	2200      	movs	r2, #0
 800ee40:	2300      	movs	r3, #0
 800ee42:	f7f1 fe49 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee46:	b1b8      	cbz	r0, 800ee78 <pow+0x68>
 800ee48:	2200      	movs	r2, #0
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	4629      	mov	r1, r5
 800ee50:	f7f1 fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee54:	2800      	cmp	r0, #0
 800ee56:	d146      	bne.n	800eee6 <pow+0xd6>
 800ee58:	ec45 4b10 	vmov	d0, r4, r5
 800ee5c:	f000 f848 	bl	800eef0 <finite>
 800ee60:	b338      	cbz	r0, 800eeb2 <pow+0xa2>
 800ee62:	2200      	movs	r2, #0
 800ee64:	2300      	movs	r3, #0
 800ee66:	4620      	mov	r0, r4
 800ee68:	4629      	mov	r1, r5
 800ee6a:	f7f1 fe3f 	bl	8000aec <__aeabi_dcmplt>
 800ee6e:	b300      	cbz	r0, 800eeb2 <pow+0xa2>
 800ee70:	f7fc f85c 	bl	800af2c <__errno>
 800ee74:	2322      	movs	r3, #34	@ 0x22
 800ee76:	e01b      	b.n	800eeb0 <pow+0xa0>
 800ee78:	ec47 6b10 	vmov	d0, r6, r7
 800ee7c:	f000 f838 	bl	800eef0 <finite>
 800ee80:	b9e0      	cbnz	r0, 800eebc <pow+0xac>
 800ee82:	eeb0 0a48 	vmov.f32	s0, s16
 800ee86:	eef0 0a68 	vmov.f32	s1, s17
 800ee8a:	f000 f831 	bl	800eef0 <finite>
 800ee8e:	b1a8      	cbz	r0, 800eebc <pow+0xac>
 800ee90:	ec45 4b10 	vmov	d0, r4, r5
 800ee94:	f000 f82c 	bl	800eef0 <finite>
 800ee98:	b180      	cbz	r0, 800eebc <pow+0xac>
 800ee9a:	4632      	mov	r2, r6
 800ee9c:	463b      	mov	r3, r7
 800ee9e:	4630      	mov	r0, r6
 800eea0:	4639      	mov	r1, r7
 800eea2:	f7f1 fe4b 	bl	8000b3c <__aeabi_dcmpun>
 800eea6:	2800      	cmp	r0, #0
 800eea8:	d0e2      	beq.n	800ee70 <pow+0x60>
 800eeaa:	f7fc f83f 	bl	800af2c <__errno>
 800eeae:	2321      	movs	r3, #33	@ 0x21
 800eeb0:	6003      	str	r3, [r0, #0]
 800eeb2:	ecbd 8b02 	vpop	{d8}
 800eeb6:	ec47 6b10 	vmov	d0, r6, r7
 800eeba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eebc:	2200      	movs	r2, #0
 800eebe:	2300      	movs	r3, #0
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	f7f1 fe08 	bl	8000ad8 <__aeabi_dcmpeq>
 800eec8:	2800      	cmp	r0, #0
 800eeca:	d0f2      	beq.n	800eeb2 <pow+0xa2>
 800eecc:	eeb0 0a48 	vmov.f32	s0, s16
 800eed0:	eef0 0a68 	vmov.f32	s1, s17
 800eed4:	f000 f80c 	bl	800eef0 <finite>
 800eed8:	2800      	cmp	r0, #0
 800eeda:	d0ea      	beq.n	800eeb2 <pow+0xa2>
 800eedc:	ec45 4b10 	vmov	d0, r4, r5
 800eee0:	f000 f806 	bl	800eef0 <finite>
 800eee4:	e7c3      	b.n	800ee6e <pow+0x5e>
 800eee6:	4f01      	ldr	r7, [pc, #4]	@ (800eeec <pow+0xdc>)
 800eee8:	2600      	movs	r6, #0
 800eeea:	e7e2      	b.n	800eeb2 <pow+0xa2>
 800eeec:	3ff00000 	.word	0x3ff00000

0800eef0 <finite>:
 800eef0:	b082      	sub	sp, #8
 800eef2:	ed8d 0b00 	vstr	d0, [sp]
 800eef6:	9801      	ldr	r0, [sp, #4]
 800eef8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800eefc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ef00:	0fc0      	lsrs	r0, r0, #31
 800ef02:	b002      	add	sp, #8
 800ef04:	4770      	bx	lr
	...

0800ef08 <__ieee754_pow>:
 800ef08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef0c:	b091      	sub	sp, #68	@ 0x44
 800ef0e:	ed8d 1b00 	vstr	d1, [sp]
 800ef12:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ef16:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ef1a:	ea5a 0001 	orrs.w	r0, sl, r1
 800ef1e:	ec57 6b10 	vmov	r6, r7, d0
 800ef22:	d113      	bne.n	800ef4c <__ieee754_pow+0x44>
 800ef24:	19b3      	adds	r3, r6, r6
 800ef26:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ef2a:	4152      	adcs	r2, r2
 800ef2c:	4298      	cmp	r0, r3
 800ef2e:	4b98      	ldr	r3, [pc, #608]	@ (800f190 <__ieee754_pow+0x288>)
 800ef30:	4193      	sbcs	r3, r2
 800ef32:	f080 84ea 	bcs.w	800f90a <__ieee754_pow+0xa02>
 800ef36:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef3a:	4630      	mov	r0, r6
 800ef3c:	4639      	mov	r1, r7
 800ef3e:	f7f1 f9ad 	bl	800029c <__adddf3>
 800ef42:	ec41 0b10 	vmov	d0, r0, r1
 800ef46:	b011      	add	sp, #68	@ 0x44
 800ef48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef4c:	4a91      	ldr	r2, [pc, #580]	@ (800f194 <__ieee754_pow+0x28c>)
 800ef4e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ef52:	4590      	cmp	r8, r2
 800ef54:	463d      	mov	r5, r7
 800ef56:	4633      	mov	r3, r6
 800ef58:	d806      	bhi.n	800ef68 <__ieee754_pow+0x60>
 800ef5a:	d101      	bne.n	800ef60 <__ieee754_pow+0x58>
 800ef5c:	2e00      	cmp	r6, #0
 800ef5e:	d1ea      	bne.n	800ef36 <__ieee754_pow+0x2e>
 800ef60:	4592      	cmp	sl, r2
 800ef62:	d801      	bhi.n	800ef68 <__ieee754_pow+0x60>
 800ef64:	d10e      	bne.n	800ef84 <__ieee754_pow+0x7c>
 800ef66:	b169      	cbz	r1, 800ef84 <__ieee754_pow+0x7c>
 800ef68:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ef6c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ef70:	431d      	orrs	r5, r3
 800ef72:	d1e0      	bne.n	800ef36 <__ieee754_pow+0x2e>
 800ef74:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ef78:	18db      	adds	r3, r3, r3
 800ef7a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ef7e:	4152      	adcs	r2, r2
 800ef80:	429d      	cmp	r5, r3
 800ef82:	e7d4      	b.n	800ef2e <__ieee754_pow+0x26>
 800ef84:	2d00      	cmp	r5, #0
 800ef86:	46c3      	mov	fp, r8
 800ef88:	da3a      	bge.n	800f000 <__ieee754_pow+0xf8>
 800ef8a:	4a83      	ldr	r2, [pc, #524]	@ (800f198 <__ieee754_pow+0x290>)
 800ef8c:	4592      	cmp	sl, r2
 800ef8e:	d84d      	bhi.n	800f02c <__ieee754_pow+0x124>
 800ef90:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ef94:	4592      	cmp	sl, r2
 800ef96:	f240 84c7 	bls.w	800f928 <__ieee754_pow+0xa20>
 800ef9a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ef9e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800efa2:	2a14      	cmp	r2, #20
 800efa4:	dd0f      	ble.n	800efc6 <__ieee754_pow+0xbe>
 800efa6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800efaa:	fa21 f402 	lsr.w	r4, r1, r2
 800efae:	fa04 f202 	lsl.w	r2, r4, r2
 800efb2:	428a      	cmp	r2, r1
 800efb4:	f040 84b8 	bne.w	800f928 <__ieee754_pow+0xa20>
 800efb8:	f004 0401 	and.w	r4, r4, #1
 800efbc:	f1c4 0402 	rsb	r4, r4, #2
 800efc0:	2900      	cmp	r1, #0
 800efc2:	d158      	bne.n	800f076 <__ieee754_pow+0x16e>
 800efc4:	e00e      	b.n	800efe4 <__ieee754_pow+0xdc>
 800efc6:	2900      	cmp	r1, #0
 800efc8:	d154      	bne.n	800f074 <__ieee754_pow+0x16c>
 800efca:	f1c2 0214 	rsb	r2, r2, #20
 800efce:	fa4a f402 	asr.w	r4, sl, r2
 800efd2:	fa04 f202 	lsl.w	r2, r4, r2
 800efd6:	4552      	cmp	r2, sl
 800efd8:	f040 84a3 	bne.w	800f922 <__ieee754_pow+0xa1a>
 800efdc:	f004 0401 	and.w	r4, r4, #1
 800efe0:	f1c4 0402 	rsb	r4, r4, #2
 800efe4:	4a6d      	ldr	r2, [pc, #436]	@ (800f19c <__ieee754_pow+0x294>)
 800efe6:	4592      	cmp	sl, r2
 800efe8:	d12e      	bne.n	800f048 <__ieee754_pow+0x140>
 800efea:	f1b9 0f00 	cmp.w	r9, #0
 800efee:	f280 8494 	bge.w	800f91a <__ieee754_pow+0xa12>
 800eff2:	496a      	ldr	r1, [pc, #424]	@ (800f19c <__ieee754_pow+0x294>)
 800eff4:	4632      	mov	r2, r6
 800eff6:	463b      	mov	r3, r7
 800eff8:	2000      	movs	r0, #0
 800effa:	f7f1 fc2f 	bl	800085c <__aeabi_ddiv>
 800effe:	e7a0      	b.n	800ef42 <__ieee754_pow+0x3a>
 800f000:	2400      	movs	r4, #0
 800f002:	bbc1      	cbnz	r1, 800f076 <__ieee754_pow+0x16e>
 800f004:	4a63      	ldr	r2, [pc, #396]	@ (800f194 <__ieee754_pow+0x28c>)
 800f006:	4592      	cmp	sl, r2
 800f008:	d1ec      	bne.n	800efe4 <__ieee754_pow+0xdc>
 800f00a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800f00e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800f012:	431a      	orrs	r2, r3
 800f014:	f000 8479 	beq.w	800f90a <__ieee754_pow+0xa02>
 800f018:	4b61      	ldr	r3, [pc, #388]	@ (800f1a0 <__ieee754_pow+0x298>)
 800f01a:	4598      	cmp	r8, r3
 800f01c:	d908      	bls.n	800f030 <__ieee754_pow+0x128>
 800f01e:	f1b9 0f00 	cmp.w	r9, #0
 800f022:	f2c0 8476 	blt.w	800f912 <__ieee754_pow+0xa0a>
 800f026:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f02a:	e78a      	b.n	800ef42 <__ieee754_pow+0x3a>
 800f02c:	2402      	movs	r4, #2
 800f02e:	e7e8      	b.n	800f002 <__ieee754_pow+0xfa>
 800f030:	f1b9 0f00 	cmp.w	r9, #0
 800f034:	f04f 0000 	mov.w	r0, #0
 800f038:	f04f 0100 	mov.w	r1, #0
 800f03c:	da81      	bge.n	800ef42 <__ieee754_pow+0x3a>
 800f03e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800f042:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800f046:	e77c      	b.n	800ef42 <__ieee754_pow+0x3a>
 800f048:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800f04c:	d106      	bne.n	800f05c <__ieee754_pow+0x154>
 800f04e:	4632      	mov	r2, r6
 800f050:	463b      	mov	r3, r7
 800f052:	4630      	mov	r0, r6
 800f054:	4639      	mov	r1, r7
 800f056:	f7f1 fad7 	bl	8000608 <__aeabi_dmul>
 800f05a:	e772      	b.n	800ef42 <__ieee754_pow+0x3a>
 800f05c:	4a51      	ldr	r2, [pc, #324]	@ (800f1a4 <__ieee754_pow+0x29c>)
 800f05e:	4591      	cmp	r9, r2
 800f060:	d109      	bne.n	800f076 <__ieee754_pow+0x16e>
 800f062:	2d00      	cmp	r5, #0
 800f064:	db07      	blt.n	800f076 <__ieee754_pow+0x16e>
 800f066:	ec47 6b10 	vmov	d0, r6, r7
 800f06a:	b011      	add	sp, #68	@ 0x44
 800f06c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f070:	f000 bd52 	b.w	800fb18 <__ieee754_sqrt>
 800f074:	2400      	movs	r4, #0
 800f076:	ec47 6b10 	vmov	d0, r6, r7
 800f07a:	9302      	str	r3, [sp, #8]
 800f07c:	f000 fc88 	bl	800f990 <fabs>
 800f080:	9b02      	ldr	r3, [sp, #8]
 800f082:	ec51 0b10 	vmov	r0, r1, d0
 800f086:	bb53      	cbnz	r3, 800f0de <__ieee754_pow+0x1d6>
 800f088:	4b44      	ldr	r3, [pc, #272]	@ (800f19c <__ieee754_pow+0x294>)
 800f08a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800f08e:	429a      	cmp	r2, r3
 800f090:	d002      	beq.n	800f098 <__ieee754_pow+0x190>
 800f092:	f1b8 0f00 	cmp.w	r8, #0
 800f096:	d122      	bne.n	800f0de <__ieee754_pow+0x1d6>
 800f098:	f1b9 0f00 	cmp.w	r9, #0
 800f09c:	da05      	bge.n	800f0aa <__ieee754_pow+0x1a2>
 800f09e:	4602      	mov	r2, r0
 800f0a0:	460b      	mov	r3, r1
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	493d      	ldr	r1, [pc, #244]	@ (800f19c <__ieee754_pow+0x294>)
 800f0a6:	f7f1 fbd9 	bl	800085c <__aeabi_ddiv>
 800f0aa:	2d00      	cmp	r5, #0
 800f0ac:	f6bf af49 	bge.w	800ef42 <__ieee754_pow+0x3a>
 800f0b0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800f0b4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800f0b8:	ea58 0804 	orrs.w	r8, r8, r4
 800f0bc:	d108      	bne.n	800f0d0 <__ieee754_pow+0x1c8>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	460b      	mov	r3, r1
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	f7f1 f8e7 	bl	8000298 <__aeabi_dsub>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	e794      	b.n	800effa <__ieee754_pow+0xf2>
 800f0d0:	2c01      	cmp	r4, #1
 800f0d2:	f47f af36 	bne.w	800ef42 <__ieee754_pow+0x3a>
 800f0d6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f0da:	4619      	mov	r1, r3
 800f0dc:	e731      	b.n	800ef42 <__ieee754_pow+0x3a>
 800f0de:	0feb      	lsrs	r3, r5, #31
 800f0e0:	3b01      	subs	r3, #1
 800f0e2:	ea53 0204 	orrs.w	r2, r3, r4
 800f0e6:	d102      	bne.n	800f0ee <__ieee754_pow+0x1e6>
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	463b      	mov	r3, r7
 800f0ec:	e7e9      	b.n	800f0c2 <__ieee754_pow+0x1ba>
 800f0ee:	3c01      	subs	r4, #1
 800f0f0:	431c      	orrs	r4, r3
 800f0f2:	d016      	beq.n	800f122 <__ieee754_pow+0x21a>
 800f0f4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800f180 <__ieee754_pow+0x278>
 800f0f8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800f0fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f100:	f240 8112 	bls.w	800f328 <__ieee754_pow+0x420>
 800f104:	4b28      	ldr	r3, [pc, #160]	@ (800f1a8 <__ieee754_pow+0x2a0>)
 800f106:	459a      	cmp	sl, r3
 800f108:	4b25      	ldr	r3, [pc, #148]	@ (800f1a0 <__ieee754_pow+0x298>)
 800f10a:	d916      	bls.n	800f13a <__ieee754_pow+0x232>
 800f10c:	4598      	cmp	r8, r3
 800f10e:	d80b      	bhi.n	800f128 <__ieee754_pow+0x220>
 800f110:	f1b9 0f00 	cmp.w	r9, #0
 800f114:	da0b      	bge.n	800f12e <__ieee754_pow+0x226>
 800f116:	2000      	movs	r0, #0
 800f118:	b011      	add	sp, #68	@ 0x44
 800f11a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f11e:	f000 bcf3 	b.w	800fb08 <__math_oflow>
 800f122:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800f188 <__ieee754_pow+0x280>
 800f126:	e7e7      	b.n	800f0f8 <__ieee754_pow+0x1f0>
 800f128:	f1b9 0f00 	cmp.w	r9, #0
 800f12c:	dcf3      	bgt.n	800f116 <__ieee754_pow+0x20e>
 800f12e:	2000      	movs	r0, #0
 800f130:	b011      	add	sp, #68	@ 0x44
 800f132:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f136:	f000 bcdf 	b.w	800faf8 <__math_uflow>
 800f13a:	4598      	cmp	r8, r3
 800f13c:	d20c      	bcs.n	800f158 <__ieee754_pow+0x250>
 800f13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f142:	2200      	movs	r2, #0
 800f144:	2300      	movs	r3, #0
 800f146:	f7f1 fcd1 	bl	8000aec <__aeabi_dcmplt>
 800f14a:	3800      	subs	r0, #0
 800f14c:	bf18      	it	ne
 800f14e:	2001      	movne	r0, #1
 800f150:	f1b9 0f00 	cmp.w	r9, #0
 800f154:	daec      	bge.n	800f130 <__ieee754_pow+0x228>
 800f156:	e7df      	b.n	800f118 <__ieee754_pow+0x210>
 800f158:	4b10      	ldr	r3, [pc, #64]	@ (800f19c <__ieee754_pow+0x294>)
 800f15a:	4598      	cmp	r8, r3
 800f15c:	f04f 0200 	mov.w	r2, #0
 800f160:	d924      	bls.n	800f1ac <__ieee754_pow+0x2a4>
 800f162:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f166:	2300      	movs	r3, #0
 800f168:	f7f1 fcc0 	bl	8000aec <__aeabi_dcmplt>
 800f16c:	3800      	subs	r0, #0
 800f16e:	bf18      	it	ne
 800f170:	2001      	movne	r0, #1
 800f172:	f1b9 0f00 	cmp.w	r9, #0
 800f176:	dccf      	bgt.n	800f118 <__ieee754_pow+0x210>
 800f178:	e7da      	b.n	800f130 <__ieee754_pow+0x228>
 800f17a:	bf00      	nop
 800f17c:	f3af 8000 	nop.w
 800f180:	00000000 	.word	0x00000000
 800f184:	3ff00000 	.word	0x3ff00000
 800f188:	00000000 	.word	0x00000000
 800f18c:	bff00000 	.word	0xbff00000
 800f190:	fff00000 	.word	0xfff00000
 800f194:	7ff00000 	.word	0x7ff00000
 800f198:	433fffff 	.word	0x433fffff
 800f19c:	3ff00000 	.word	0x3ff00000
 800f1a0:	3fefffff 	.word	0x3fefffff
 800f1a4:	3fe00000 	.word	0x3fe00000
 800f1a8:	43f00000 	.word	0x43f00000
 800f1ac:	4b5a      	ldr	r3, [pc, #360]	@ (800f318 <__ieee754_pow+0x410>)
 800f1ae:	f7f1 f873 	bl	8000298 <__aeabi_dsub>
 800f1b2:	a351      	add	r3, pc, #324	@ (adr r3, 800f2f8 <__ieee754_pow+0x3f0>)
 800f1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1b8:	4604      	mov	r4, r0
 800f1ba:	460d      	mov	r5, r1
 800f1bc:	f7f1 fa24 	bl	8000608 <__aeabi_dmul>
 800f1c0:	a34f      	add	r3, pc, #316	@ (adr r3, 800f300 <__ieee754_pow+0x3f8>)
 800f1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1c6:	4606      	mov	r6, r0
 800f1c8:	460f      	mov	r7, r1
 800f1ca:	4620      	mov	r0, r4
 800f1cc:	4629      	mov	r1, r5
 800f1ce:	f7f1 fa1b 	bl	8000608 <__aeabi_dmul>
 800f1d2:	4b52      	ldr	r3, [pc, #328]	@ (800f31c <__ieee754_pow+0x414>)
 800f1d4:	4682      	mov	sl, r0
 800f1d6:	468b      	mov	fp, r1
 800f1d8:	2200      	movs	r2, #0
 800f1da:	4620      	mov	r0, r4
 800f1dc:	4629      	mov	r1, r5
 800f1de:	f7f1 fa13 	bl	8000608 <__aeabi_dmul>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	460b      	mov	r3, r1
 800f1e6:	a148      	add	r1, pc, #288	@ (adr r1, 800f308 <__ieee754_pow+0x400>)
 800f1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1ec:	f7f1 f854 	bl	8000298 <__aeabi_dsub>
 800f1f0:	4622      	mov	r2, r4
 800f1f2:	462b      	mov	r3, r5
 800f1f4:	f7f1 fa08 	bl	8000608 <__aeabi_dmul>
 800f1f8:	4602      	mov	r2, r0
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	4948      	ldr	r1, [pc, #288]	@ (800f320 <__ieee754_pow+0x418>)
 800f200:	f7f1 f84a 	bl	8000298 <__aeabi_dsub>
 800f204:	4622      	mov	r2, r4
 800f206:	4680      	mov	r8, r0
 800f208:	4689      	mov	r9, r1
 800f20a:	462b      	mov	r3, r5
 800f20c:	4620      	mov	r0, r4
 800f20e:	4629      	mov	r1, r5
 800f210:	f7f1 f9fa 	bl	8000608 <__aeabi_dmul>
 800f214:	4602      	mov	r2, r0
 800f216:	460b      	mov	r3, r1
 800f218:	4640      	mov	r0, r8
 800f21a:	4649      	mov	r1, r9
 800f21c:	f7f1 f9f4 	bl	8000608 <__aeabi_dmul>
 800f220:	a33b      	add	r3, pc, #236	@ (adr r3, 800f310 <__ieee754_pow+0x408>)
 800f222:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f226:	f7f1 f9ef 	bl	8000608 <__aeabi_dmul>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4650      	mov	r0, sl
 800f230:	4659      	mov	r1, fp
 800f232:	f7f1 f831 	bl	8000298 <__aeabi_dsub>
 800f236:	4602      	mov	r2, r0
 800f238:	460b      	mov	r3, r1
 800f23a:	4680      	mov	r8, r0
 800f23c:	4689      	mov	r9, r1
 800f23e:	4630      	mov	r0, r6
 800f240:	4639      	mov	r1, r7
 800f242:	f7f1 f82b 	bl	800029c <__adddf3>
 800f246:	2400      	movs	r4, #0
 800f248:	4632      	mov	r2, r6
 800f24a:	463b      	mov	r3, r7
 800f24c:	4620      	mov	r0, r4
 800f24e:	460d      	mov	r5, r1
 800f250:	f7f1 f822 	bl	8000298 <__aeabi_dsub>
 800f254:	4602      	mov	r2, r0
 800f256:	460b      	mov	r3, r1
 800f258:	4640      	mov	r0, r8
 800f25a:	4649      	mov	r1, r9
 800f25c:	f7f1 f81c 	bl	8000298 <__aeabi_dsub>
 800f260:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f264:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f268:	2300      	movs	r3, #0
 800f26a:	9304      	str	r3, [sp, #16]
 800f26c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800f270:	4606      	mov	r6, r0
 800f272:	460f      	mov	r7, r1
 800f274:	4652      	mov	r2, sl
 800f276:	465b      	mov	r3, fp
 800f278:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f27c:	f7f1 f80c 	bl	8000298 <__aeabi_dsub>
 800f280:	4622      	mov	r2, r4
 800f282:	462b      	mov	r3, r5
 800f284:	f7f1 f9c0 	bl	8000608 <__aeabi_dmul>
 800f288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f28c:	4680      	mov	r8, r0
 800f28e:	4689      	mov	r9, r1
 800f290:	4630      	mov	r0, r6
 800f292:	4639      	mov	r1, r7
 800f294:	f7f1 f9b8 	bl	8000608 <__aeabi_dmul>
 800f298:	4602      	mov	r2, r0
 800f29a:	460b      	mov	r3, r1
 800f29c:	4640      	mov	r0, r8
 800f29e:	4649      	mov	r1, r9
 800f2a0:	f7f0 fffc 	bl	800029c <__adddf3>
 800f2a4:	4652      	mov	r2, sl
 800f2a6:	465b      	mov	r3, fp
 800f2a8:	4606      	mov	r6, r0
 800f2aa:	460f      	mov	r7, r1
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	4629      	mov	r1, r5
 800f2b0:	f7f1 f9aa 	bl	8000608 <__aeabi_dmul>
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	4602      	mov	r2, r0
 800f2b8:	4680      	mov	r8, r0
 800f2ba:	4689      	mov	r9, r1
 800f2bc:	4630      	mov	r0, r6
 800f2be:	4639      	mov	r1, r7
 800f2c0:	f7f0 ffec 	bl	800029c <__adddf3>
 800f2c4:	4b17      	ldr	r3, [pc, #92]	@ (800f324 <__ieee754_pow+0x41c>)
 800f2c6:	4299      	cmp	r1, r3
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	460d      	mov	r5, r1
 800f2cc:	468a      	mov	sl, r1
 800f2ce:	468b      	mov	fp, r1
 800f2d0:	f340 82ef 	ble.w	800f8b2 <__ieee754_pow+0x9aa>
 800f2d4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800f2d8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800f2dc:	4303      	orrs	r3, r0
 800f2de:	f000 81e8 	beq.w	800f6b2 <__ieee754_pow+0x7aa>
 800f2e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	f7f1 fbff 	bl	8000aec <__aeabi_dcmplt>
 800f2ee:	3800      	subs	r0, #0
 800f2f0:	bf18      	it	ne
 800f2f2:	2001      	movne	r0, #1
 800f2f4:	e710      	b.n	800f118 <__ieee754_pow+0x210>
 800f2f6:	bf00      	nop
 800f2f8:	60000000 	.word	0x60000000
 800f2fc:	3ff71547 	.word	0x3ff71547
 800f300:	f85ddf44 	.word	0xf85ddf44
 800f304:	3e54ae0b 	.word	0x3e54ae0b
 800f308:	55555555 	.word	0x55555555
 800f30c:	3fd55555 	.word	0x3fd55555
 800f310:	652b82fe 	.word	0x652b82fe
 800f314:	3ff71547 	.word	0x3ff71547
 800f318:	3ff00000 	.word	0x3ff00000
 800f31c:	3fd00000 	.word	0x3fd00000
 800f320:	3fe00000 	.word	0x3fe00000
 800f324:	408fffff 	.word	0x408fffff
 800f328:	4bd5      	ldr	r3, [pc, #852]	@ (800f680 <__ieee754_pow+0x778>)
 800f32a:	402b      	ands	r3, r5
 800f32c:	2200      	movs	r2, #0
 800f32e:	b92b      	cbnz	r3, 800f33c <__ieee754_pow+0x434>
 800f330:	4bd4      	ldr	r3, [pc, #848]	@ (800f684 <__ieee754_pow+0x77c>)
 800f332:	f7f1 f969 	bl	8000608 <__aeabi_dmul>
 800f336:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f33a:	468b      	mov	fp, r1
 800f33c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f340:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f344:	4413      	add	r3, r2
 800f346:	930a      	str	r3, [sp, #40]	@ 0x28
 800f348:	4bcf      	ldr	r3, [pc, #828]	@ (800f688 <__ieee754_pow+0x780>)
 800f34a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f34e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f352:	459b      	cmp	fp, r3
 800f354:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f358:	dd08      	ble.n	800f36c <__ieee754_pow+0x464>
 800f35a:	4bcc      	ldr	r3, [pc, #816]	@ (800f68c <__ieee754_pow+0x784>)
 800f35c:	459b      	cmp	fp, r3
 800f35e:	f340 81a5 	ble.w	800f6ac <__ieee754_pow+0x7a4>
 800f362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f364:	3301      	adds	r3, #1
 800f366:	930a      	str	r3, [sp, #40]	@ 0x28
 800f368:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f36c:	f04f 0a00 	mov.w	sl, #0
 800f370:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f374:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f376:	4bc6      	ldr	r3, [pc, #792]	@ (800f690 <__ieee754_pow+0x788>)
 800f378:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f37c:	ed93 7b00 	vldr	d7, [r3]
 800f380:	4629      	mov	r1, r5
 800f382:	ec53 2b17 	vmov	r2, r3, d7
 800f386:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f38a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f38e:	f7f0 ff83 	bl	8000298 <__aeabi_dsub>
 800f392:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f396:	4606      	mov	r6, r0
 800f398:	460f      	mov	r7, r1
 800f39a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f39e:	f7f0 ff7d 	bl	800029c <__adddf3>
 800f3a2:	4602      	mov	r2, r0
 800f3a4:	460b      	mov	r3, r1
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	49ba      	ldr	r1, [pc, #744]	@ (800f694 <__ieee754_pow+0x78c>)
 800f3aa:	f7f1 fa57 	bl	800085c <__aeabi_ddiv>
 800f3ae:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f3b2:	4602      	mov	r2, r0
 800f3b4:	460b      	mov	r3, r1
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	4639      	mov	r1, r7
 800f3ba:	f7f1 f925 	bl	8000608 <__aeabi_dmul>
 800f3be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f3c2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f3c6:	106d      	asrs	r5, r5, #1
 800f3c8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f3cc:	f04f 0b00 	mov.w	fp, #0
 800f3d0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f3d4:	4661      	mov	r1, ip
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f3dc:	4658      	mov	r0, fp
 800f3de:	46e1      	mov	r9, ip
 800f3e0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f3e4:	4614      	mov	r4, r2
 800f3e6:	461d      	mov	r5, r3
 800f3e8:	f7f1 f90e 	bl	8000608 <__aeabi_dmul>
 800f3ec:	4602      	mov	r2, r0
 800f3ee:	460b      	mov	r3, r1
 800f3f0:	4630      	mov	r0, r6
 800f3f2:	4639      	mov	r1, r7
 800f3f4:	f7f0 ff50 	bl	8000298 <__aeabi_dsub>
 800f3f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f3fc:	4606      	mov	r6, r0
 800f3fe:	460f      	mov	r7, r1
 800f400:	4620      	mov	r0, r4
 800f402:	4629      	mov	r1, r5
 800f404:	f7f0 ff48 	bl	8000298 <__aeabi_dsub>
 800f408:	4602      	mov	r2, r0
 800f40a:	460b      	mov	r3, r1
 800f40c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f410:	f7f0 ff42 	bl	8000298 <__aeabi_dsub>
 800f414:	465a      	mov	r2, fp
 800f416:	464b      	mov	r3, r9
 800f418:	f7f1 f8f6 	bl	8000608 <__aeabi_dmul>
 800f41c:	4602      	mov	r2, r0
 800f41e:	460b      	mov	r3, r1
 800f420:	4630      	mov	r0, r6
 800f422:	4639      	mov	r1, r7
 800f424:	f7f0 ff38 	bl	8000298 <__aeabi_dsub>
 800f428:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f42c:	f7f1 f8ec 	bl	8000608 <__aeabi_dmul>
 800f430:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f434:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f438:	4610      	mov	r0, r2
 800f43a:	4619      	mov	r1, r3
 800f43c:	f7f1 f8e4 	bl	8000608 <__aeabi_dmul>
 800f440:	a37d      	add	r3, pc, #500	@ (adr r3, 800f638 <__ieee754_pow+0x730>)
 800f442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f446:	4604      	mov	r4, r0
 800f448:	460d      	mov	r5, r1
 800f44a:	f7f1 f8dd 	bl	8000608 <__aeabi_dmul>
 800f44e:	a37c      	add	r3, pc, #496	@ (adr r3, 800f640 <__ieee754_pow+0x738>)
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	f7f0 ff22 	bl	800029c <__adddf3>
 800f458:	4622      	mov	r2, r4
 800f45a:	462b      	mov	r3, r5
 800f45c:	f7f1 f8d4 	bl	8000608 <__aeabi_dmul>
 800f460:	a379      	add	r3, pc, #484	@ (adr r3, 800f648 <__ieee754_pow+0x740>)
 800f462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f466:	f7f0 ff19 	bl	800029c <__adddf3>
 800f46a:	4622      	mov	r2, r4
 800f46c:	462b      	mov	r3, r5
 800f46e:	f7f1 f8cb 	bl	8000608 <__aeabi_dmul>
 800f472:	a377      	add	r3, pc, #476	@ (adr r3, 800f650 <__ieee754_pow+0x748>)
 800f474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f478:	f7f0 ff10 	bl	800029c <__adddf3>
 800f47c:	4622      	mov	r2, r4
 800f47e:	462b      	mov	r3, r5
 800f480:	f7f1 f8c2 	bl	8000608 <__aeabi_dmul>
 800f484:	a374      	add	r3, pc, #464	@ (adr r3, 800f658 <__ieee754_pow+0x750>)
 800f486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48a:	f7f0 ff07 	bl	800029c <__adddf3>
 800f48e:	4622      	mov	r2, r4
 800f490:	462b      	mov	r3, r5
 800f492:	f7f1 f8b9 	bl	8000608 <__aeabi_dmul>
 800f496:	a372      	add	r3, pc, #456	@ (adr r3, 800f660 <__ieee754_pow+0x758>)
 800f498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49c:	f7f0 fefe 	bl	800029c <__adddf3>
 800f4a0:	4622      	mov	r2, r4
 800f4a2:	4606      	mov	r6, r0
 800f4a4:	460f      	mov	r7, r1
 800f4a6:	462b      	mov	r3, r5
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	f7f1 f8ac 	bl	8000608 <__aeabi_dmul>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	4639      	mov	r1, r7
 800f4b8:	f7f1 f8a6 	bl	8000608 <__aeabi_dmul>
 800f4bc:	465a      	mov	r2, fp
 800f4be:	4604      	mov	r4, r0
 800f4c0:	460d      	mov	r5, r1
 800f4c2:	464b      	mov	r3, r9
 800f4c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f4c8:	f7f0 fee8 	bl	800029c <__adddf3>
 800f4cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f4d0:	f7f1 f89a 	bl	8000608 <__aeabi_dmul>
 800f4d4:	4622      	mov	r2, r4
 800f4d6:	462b      	mov	r3, r5
 800f4d8:	f7f0 fee0 	bl	800029c <__adddf3>
 800f4dc:	465a      	mov	r2, fp
 800f4de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f4e2:	464b      	mov	r3, r9
 800f4e4:	4658      	mov	r0, fp
 800f4e6:	4649      	mov	r1, r9
 800f4e8:	f7f1 f88e 	bl	8000608 <__aeabi_dmul>
 800f4ec:	4b6a      	ldr	r3, [pc, #424]	@ (800f698 <__ieee754_pow+0x790>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	4606      	mov	r6, r0
 800f4f2:	460f      	mov	r7, r1
 800f4f4:	f7f0 fed2 	bl	800029c <__adddf3>
 800f4f8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f4fc:	f7f0 fece 	bl	800029c <__adddf3>
 800f500:	46d8      	mov	r8, fp
 800f502:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f506:	460d      	mov	r5, r1
 800f508:	465a      	mov	r2, fp
 800f50a:	460b      	mov	r3, r1
 800f50c:	4640      	mov	r0, r8
 800f50e:	4649      	mov	r1, r9
 800f510:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f514:	f7f1 f878 	bl	8000608 <__aeabi_dmul>
 800f518:	465c      	mov	r4, fp
 800f51a:	4680      	mov	r8, r0
 800f51c:	4689      	mov	r9, r1
 800f51e:	4b5e      	ldr	r3, [pc, #376]	@ (800f698 <__ieee754_pow+0x790>)
 800f520:	2200      	movs	r2, #0
 800f522:	4620      	mov	r0, r4
 800f524:	4629      	mov	r1, r5
 800f526:	f7f0 feb7 	bl	8000298 <__aeabi_dsub>
 800f52a:	4632      	mov	r2, r6
 800f52c:	463b      	mov	r3, r7
 800f52e:	f7f0 feb3 	bl	8000298 <__aeabi_dsub>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f53a:	f7f0 fead 	bl	8000298 <__aeabi_dsub>
 800f53e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f542:	f7f1 f861 	bl	8000608 <__aeabi_dmul>
 800f546:	4622      	mov	r2, r4
 800f548:	4606      	mov	r6, r0
 800f54a:	460f      	mov	r7, r1
 800f54c:	462b      	mov	r3, r5
 800f54e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f552:	f7f1 f859 	bl	8000608 <__aeabi_dmul>
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4630      	mov	r0, r6
 800f55c:	4639      	mov	r1, r7
 800f55e:	f7f0 fe9d 	bl	800029c <__adddf3>
 800f562:	4606      	mov	r6, r0
 800f564:	460f      	mov	r7, r1
 800f566:	4602      	mov	r2, r0
 800f568:	460b      	mov	r3, r1
 800f56a:	4640      	mov	r0, r8
 800f56c:	4649      	mov	r1, r9
 800f56e:	f7f0 fe95 	bl	800029c <__adddf3>
 800f572:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f576:	a33c      	add	r3, pc, #240	@ (adr r3, 800f668 <__ieee754_pow+0x760>)
 800f578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57c:	4658      	mov	r0, fp
 800f57e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f582:	460d      	mov	r5, r1
 800f584:	f7f1 f840 	bl	8000608 <__aeabi_dmul>
 800f588:	465c      	mov	r4, fp
 800f58a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f58e:	4642      	mov	r2, r8
 800f590:	464b      	mov	r3, r9
 800f592:	4620      	mov	r0, r4
 800f594:	4629      	mov	r1, r5
 800f596:	f7f0 fe7f 	bl	8000298 <__aeabi_dsub>
 800f59a:	4602      	mov	r2, r0
 800f59c:	460b      	mov	r3, r1
 800f59e:	4630      	mov	r0, r6
 800f5a0:	4639      	mov	r1, r7
 800f5a2:	f7f0 fe79 	bl	8000298 <__aeabi_dsub>
 800f5a6:	a332      	add	r3, pc, #200	@ (adr r3, 800f670 <__ieee754_pow+0x768>)
 800f5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ac:	f7f1 f82c 	bl	8000608 <__aeabi_dmul>
 800f5b0:	a331      	add	r3, pc, #196	@ (adr r3, 800f678 <__ieee754_pow+0x770>)
 800f5b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b6:	4606      	mov	r6, r0
 800f5b8:	460f      	mov	r7, r1
 800f5ba:	4620      	mov	r0, r4
 800f5bc:	4629      	mov	r1, r5
 800f5be:	f7f1 f823 	bl	8000608 <__aeabi_dmul>
 800f5c2:	4602      	mov	r2, r0
 800f5c4:	460b      	mov	r3, r1
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	f7f0 fe67 	bl	800029c <__adddf3>
 800f5ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f5d0:	4b32      	ldr	r3, [pc, #200]	@ (800f69c <__ieee754_pow+0x794>)
 800f5d2:	4413      	add	r3, r2
 800f5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5d8:	f7f0 fe60 	bl	800029c <__adddf3>
 800f5dc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f5e0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f5e2:	f7f0 ffa7 	bl	8000534 <__aeabi_i2d>
 800f5e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f5e8:	4b2d      	ldr	r3, [pc, #180]	@ (800f6a0 <__ieee754_pow+0x798>)
 800f5ea:	4413      	add	r3, r2
 800f5ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5f0:	4606      	mov	r6, r0
 800f5f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f5f6:	460f      	mov	r7, r1
 800f5f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f5fc:	f7f0 fe4e 	bl	800029c <__adddf3>
 800f600:	4642      	mov	r2, r8
 800f602:	464b      	mov	r3, r9
 800f604:	f7f0 fe4a 	bl	800029c <__adddf3>
 800f608:	4632      	mov	r2, r6
 800f60a:	463b      	mov	r3, r7
 800f60c:	f7f0 fe46 	bl	800029c <__adddf3>
 800f610:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f614:	4632      	mov	r2, r6
 800f616:	463b      	mov	r3, r7
 800f618:	4658      	mov	r0, fp
 800f61a:	460d      	mov	r5, r1
 800f61c:	f7f0 fe3c 	bl	8000298 <__aeabi_dsub>
 800f620:	4642      	mov	r2, r8
 800f622:	464b      	mov	r3, r9
 800f624:	f7f0 fe38 	bl	8000298 <__aeabi_dsub>
 800f628:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f62c:	f7f0 fe34 	bl	8000298 <__aeabi_dsub>
 800f630:	465c      	mov	r4, fp
 800f632:	4602      	mov	r2, r0
 800f634:	e036      	b.n	800f6a4 <__ieee754_pow+0x79c>
 800f636:	bf00      	nop
 800f638:	4a454eef 	.word	0x4a454eef
 800f63c:	3fca7e28 	.word	0x3fca7e28
 800f640:	93c9db65 	.word	0x93c9db65
 800f644:	3fcd864a 	.word	0x3fcd864a
 800f648:	a91d4101 	.word	0xa91d4101
 800f64c:	3fd17460 	.word	0x3fd17460
 800f650:	518f264d 	.word	0x518f264d
 800f654:	3fd55555 	.word	0x3fd55555
 800f658:	db6fabff 	.word	0xdb6fabff
 800f65c:	3fdb6db6 	.word	0x3fdb6db6
 800f660:	33333303 	.word	0x33333303
 800f664:	3fe33333 	.word	0x3fe33333
 800f668:	e0000000 	.word	0xe0000000
 800f66c:	3feec709 	.word	0x3feec709
 800f670:	dc3a03fd 	.word	0xdc3a03fd
 800f674:	3feec709 	.word	0x3feec709
 800f678:	145b01f5 	.word	0x145b01f5
 800f67c:	be3e2fe0 	.word	0xbe3e2fe0
 800f680:	7ff00000 	.word	0x7ff00000
 800f684:	43400000 	.word	0x43400000
 800f688:	0003988e 	.word	0x0003988e
 800f68c:	000bb679 	.word	0x000bb679
 800f690:	08010260 	.word	0x08010260
 800f694:	3ff00000 	.word	0x3ff00000
 800f698:	40080000 	.word	0x40080000
 800f69c:	08010240 	.word	0x08010240
 800f6a0:	08010250 	.word	0x08010250
 800f6a4:	460b      	mov	r3, r1
 800f6a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f6aa:	e5d7      	b.n	800f25c <__ieee754_pow+0x354>
 800f6ac:	f04f 0a01 	mov.w	sl, #1
 800f6b0:	e65e      	b.n	800f370 <__ieee754_pow+0x468>
 800f6b2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f984 <__ieee754_pow+0xa7c>)
 800f6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b8:	4630      	mov	r0, r6
 800f6ba:	4639      	mov	r1, r7
 800f6bc:	f7f0 fdee 	bl	800029c <__adddf3>
 800f6c0:	4642      	mov	r2, r8
 800f6c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f6c6:	464b      	mov	r3, r9
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	f7f0 fde4 	bl	8000298 <__aeabi_dsub>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	460b      	mov	r3, r1
 800f6d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f6d8:	f7f1 fa26 	bl	8000b28 <__aeabi_dcmpgt>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	f47f ae00 	bne.w	800f2e2 <__ieee754_pow+0x3da>
 800f6e2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f6e6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f6ea:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f6ee:	fa43 fa0a 	asr.w	sl, r3, sl
 800f6f2:	44da      	add	sl, fp
 800f6f4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f6f8:	489d      	ldr	r0, [pc, #628]	@ (800f970 <__ieee754_pow+0xa68>)
 800f6fa:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f6fe:	4108      	asrs	r0, r1
 800f700:	ea00 030a 	and.w	r3, r0, sl
 800f704:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f708:	f1c1 0114 	rsb	r1, r1, #20
 800f70c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f710:	fa4a fa01 	asr.w	sl, sl, r1
 800f714:	f1bb 0f00 	cmp.w	fp, #0
 800f718:	4640      	mov	r0, r8
 800f71a:	4649      	mov	r1, r9
 800f71c:	f04f 0200 	mov.w	r2, #0
 800f720:	bfb8      	it	lt
 800f722:	f1ca 0a00 	rsblt	sl, sl, #0
 800f726:	f7f0 fdb7 	bl	8000298 <__aeabi_dsub>
 800f72a:	4680      	mov	r8, r0
 800f72c:	4689      	mov	r9, r1
 800f72e:	4632      	mov	r2, r6
 800f730:	463b      	mov	r3, r7
 800f732:	4640      	mov	r0, r8
 800f734:	4649      	mov	r1, r9
 800f736:	f7f0 fdb1 	bl	800029c <__adddf3>
 800f73a:	2400      	movs	r4, #0
 800f73c:	a37c      	add	r3, pc, #496	@ (adr r3, 800f930 <__ieee754_pow+0xa28>)
 800f73e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f742:	4620      	mov	r0, r4
 800f744:	460d      	mov	r5, r1
 800f746:	f7f0 ff5f 	bl	8000608 <__aeabi_dmul>
 800f74a:	4642      	mov	r2, r8
 800f74c:	e9cd 0100 	strd	r0, r1, [sp]
 800f750:	464b      	mov	r3, r9
 800f752:	4620      	mov	r0, r4
 800f754:	4629      	mov	r1, r5
 800f756:	f7f0 fd9f 	bl	8000298 <__aeabi_dsub>
 800f75a:	4602      	mov	r2, r0
 800f75c:	460b      	mov	r3, r1
 800f75e:	4630      	mov	r0, r6
 800f760:	4639      	mov	r1, r7
 800f762:	f7f0 fd99 	bl	8000298 <__aeabi_dsub>
 800f766:	a374      	add	r3, pc, #464	@ (adr r3, 800f938 <__ieee754_pow+0xa30>)
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	f7f0 ff4c 	bl	8000608 <__aeabi_dmul>
 800f770:	a373      	add	r3, pc, #460	@ (adr r3, 800f940 <__ieee754_pow+0xa38>)
 800f772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f776:	4680      	mov	r8, r0
 800f778:	4689      	mov	r9, r1
 800f77a:	4620      	mov	r0, r4
 800f77c:	4629      	mov	r1, r5
 800f77e:	f7f0 ff43 	bl	8000608 <__aeabi_dmul>
 800f782:	4602      	mov	r2, r0
 800f784:	460b      	mov	r3, r1
 800f786:	4640      	mov	r0, r8
 800f788:	4649      	mov	r1, r9
 800f78a:	f7f0 fd87 	bl	800029c <__adddf3>
 800f78e:	4604      	mov	r4, r0
 800f790:	460d      	mov	r5, r1
 800f792:	4602      	mov	r2, r0
 800f794:	460b      	mov	r3, r1
 800f796:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f79a:	f7f0 fd7f 	bl	800029c <__adddf3>
 800f79e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7a2:	4680      	mov	r8, r0
 800f7a4:	4689      	mov	r9, r1
 800f7a6:	f7f0 fd77 	bl	8000298 <__aeabi_dsub>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	4620      	mov	r0, r4
 800f7b0:	4629      	mov	r1, r5
 800f7b2:	f7f0 fd71 	bl	8000298 <__aeabi_dsub>
 800f7b6:	4642      	mov	r2, r8
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	460f      	mov	r7, r1
 800f7bc:	464b      	mov	r3, r9
 800f7be:	4640      	mov	r0, r8
 800f7c0:	4649      	mov	r1, r9
 800f7c2:	f7f0 ff21 	bl	8000608 <__aeabi_dmul>
 800f7c6:	a360      	add	r3, pc, #384	@ (adr r3, 800f948 <__ieee754_pow+0xa40>)
 800f7c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7cc:	4604      	mov	r4, r0
 800f7ce:	460d      	mov	r5, r1
 800f7d0:	f7f0 ff1a 	bl	8000608 <__aeabi_dmul>
 800f7d4:	a35e      	add	r3, pc, #376	@ (adr r3, 800f950 <__ieee754_pow+0xa48>)
 800f7d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7da:	f7f0 fd5d 	bl	8000298 <__aeabi_dsub>
 800f7de:	4622      	mov	r2, r4
 800f7e0:	462b      	mov	r3, r5
 800f7e2:	f7f0 ff11 	bl	8000608 <__aeabi_dmul>
 800f7e6:	a35c      	add	r3, pc, #368	@ (adr r3, 800f958 <__ieee754_pow+0xa50>)
 800f7e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7ec:	f7f0 fd56 	bl	800029c <__adddf3>
 800f7f0:	4622      	mov	r2, r4
 800f7f2:	462b      	mov	r3, r5
 800f7f4:	f7f0 ff08 	bl	8000608 <__aeabi_dmul>
 800f7f8:	a359      	add	r3, pc, #356	@ (adr r3, 800f960 <__ieee754_pow+0xa58>)
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	f7f0 fd4b 	bl	8000298 <__aeabi_dsub>
 800f802:	4622      	mov	r2, r4
 800f804:	462b      	mov	r3, r5
 800f806:	f7f0 feff 	bl	8000608 <__aeabi_dmul>
 800f80a:	a357      	add	r3, pc, #348	@ (adr r3, 800f968 <__ieee754_pow+0xa60>)
 800f80c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f810:	f7f0 fd44 	bl	800029c <__adddf3>
 800f814:	4622      	mov	r2, r4
 800f816:	462b      	mov	r3, r5
 800f818:	f7f0 fef6 	bl	8000608 <__aeabi_dmul>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	4640      	mov	r0, r8
 800f822:	4649      	mov	r1, r9
 800f824:	f7f0 fd38 	bl	8000298 <__aeabi_dsub>
 800f828:	4604      	mov	r4, r0
 800f82a:	460d      	mov	r5, r1
 800f82c:	4602      	mov	r2, r0
 800f82e:	460b      	mov	r3, r1
 800f830:	4640      	mov	r0, r8
 800f832:	4649      	mov	r1, r9
 800f834:	f7f0 fee8 	bl	8000608 <__aeabi_dmul>
 800f838:	2200      	movs	r2, #0
 800f83a:	e9cd 0100 	strd	r0, r1, [sp]
 800f83e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f842:	4620      	mov	r0, r4
 800f844:	4629      	mov	r1, r5
 800f846:	f7f0 fd27 	bl	8000298 <__aeabi_dsub>
 800f84a:	4602      	mov	r2, r0
 800f84c:	460b      	mov	r3, r1
 800f84e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f852:	f7f1 f803 	bl	800085c <__aeabi_ddiv>
 800f856:	4632      	mov	r2, r6
 800f858:	4604      	mov	r4, r0
 800f85a:	460d      	mov	r5, r1
 800f85c:	463b      	mov	r3, r7
 800f85e:	4640      	mov	r0, r8
 800f860:	4649      	mov	r1, r9
 800f862:	f7f0 fed1 	bl	8000608 <__aeabi_dmul>
 800f866:	4632      	mov	r2, r6
 800f868:	463b      	mov	r3, r7
 800f86a:	f7f0 fd17 	bl	800029c <__adddf3>
 800f86e:	4602      	mov	r2, r0
 800f870:	460b      	mov	r3, r1
 800f872:	4620      	mov	r0, r4
 800f874:	4629      	mov	r1, r5
 800f876:	f7f0 fd0f 	bl	8000298 <__aeabi_dsub>
 800f87a:	4642      	mov	r2, r8
 800f87c:	464b      	mov	r3, r9
 800f87e:	f7f0 fd0b 	bl	8000298 <__aeabi_dsub>
 800f882:	460b      	mov	r3, r1
 800f884:	4602      	mov	r2, r0
 800f886:	493b      	ldr	r1, [pc, #236]	@ (800f974 <__ieee754_pow+0xa6c>)
 800f888:	2000      	movs	r0, #0
 800f88a:	f7f0 fd05 	bl	8000298 <__aeabi_dsub>
 800f88e:	ec41 0b10 	vmov	d0, r0, r1
 800f892:	ee10 3a90 	vmov	r3, s1
 800f896:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f89a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f89e:	da30      	bge.n	800f902 <__ieee754_pow+0x9fa>
 800f8a0:	4650      	mov	r0, sl
 800f8a2:	f000 f87d 	bl	800f9a0 <scalbn>
 800f8a6:	ec51 0b10 	vmov	r0, r1, d0
 800f8aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f8ae:	f7ff bbd2 	b.w	800f056 <__ieee754_pow+0x14e>
 800f8b2:	4c31      	ldr	r4, [pc, #196]	@ (800f978 <__ieee754_pow+0xa70>)
 800f8b4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f8b8:	42a3      	cmp	r3, r4
 800f8ba:	d91a      	bls.n	800f8f2 <__ieee754_pow+0x9ea>
 800f8bc:	4b2f      	ldr	r3, [pc, #188]	@ (800f97c <__ieee754_pow+0xa74>)
 800f8be:	440b      	add	r3, r1
 800f8c0:	4303      	orrs	r3, r0
 800f8c2:	d009      	beq.n	800f8d8 <__ieee754_pow+0x9d0>
 800f8c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	f7f1 f90e 	bl	8000aec <__aeabi_dcmplt>
 800f8d0:	3800      	subs	r0, #0
 800f8d2:	bf18      	it	ne
 800f8d4:	2001      	movne	r0, #1
 800f8d6:	e42b      	b.n	800f130 <__ieee754_pow+0x228>
 800f8d8:	4642      	mov	r2, r8
 800f8da:	464b      	mov	r3, r9
 800f8dc:	f7f0 fcdc 	bl	8000298 <__aeabi_dsub>
 800f8e0:	4632      	mov	r2, r6
 800f8e2:	463b      	mov	r3, r7
 800f8e4:	f7f1 f916 	bl	8000b14 <__aeabi_dcmpge>
 800f8e8:	2800      	cmp	r0, #0
 800f8ea:	d1eb      	bne.n	800f8c4 <__ieee754_pow+0x9bc>
 800f8ec:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f98c <__ieee754_pow+0xa84>
 800f8f0:	e6f7      	b.n	800f6e2 <__ieee754_pow+0x7da>
 800f8f2:	469a      	mov	sl, r3
 800f8f4:	4b22      	ldr	r3, [pc, #136]	@ (800f980 <__ieee754_pow+0xa78>)
 800f8f6:	459a      	cmp	sl, r3
 800f8f8:	f63f aef3 	bhi.w	800f6e2 <__ieee754_pow+0x7da>
 800f8fc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f900:	e715      	b.n	800f72e <__ieee754_pow+0x826>
 800f902:	ec51 0b10 	vmov	r0, r1, d0
 800f906:	4619      	mov	r1, r3
 800f908:	e7cf      	b.n	800f8aa <__ieee754_pow+0x9a2>
 800f90a:	491a      	ldr	r1, [pc, #104]	@ (800f974 <__ieee754_pow+0xa6c>)
 800f90c:	2000      	movs	r0, #0
 800f90e:	f7ff bb18 	b.w	800ef42 <__ieee754_pow+0x3a>
 800f912:	2000      	movs	r0, #0
 800f914:	2100      	movs	r1, #0
 800f916:	f7ff bb14 	b.w	800ef42 <__ieee754_pow+0x3a>
 800f91a:	4630      	mov	r0, r6
 800f91c:	4639      	mov	r1, r7
 800f91e:	f7ff bb10 	b.w	800ef42 <__ieee754_pow+0x3a>
 800f922:	460c      	mov	r4, r1
 800f924:	f7ff bb5e 	b.w	800efe4 <__ieee754_pow+0xdc>
 800f928:	2400      	movs	r4, #0
 800f92a:	f7ff bb49 	b.w	800efc0 <__ieee754_pow+0xb8>
 800f92e:	bf00      	nop
 800f930:	00000000 	.word	0x00000000
 800f934:	3fe62e43 	.word	0x3fe62e43
 800f938:	fefa39ef 	.word	0xfefa39ef
 800f93c:	3fe62e42 	.word	0x3fe62e42
 800f940:	0ca86c39 	.word	0x0ca86c39
 800f944:	be205c61 	.word	0xbe205c61
 800f948:	72bea4d0 	.word	0x72bea4d0
 800f94c:	3e663769 	.word	0x3e663769
 800f950:	c5d26bf1 	.word	0xc5d26bf1
 800f954:	3ebbbd41 	.word	0x3ebbbd41
 800f958:	af25de2c 	.word	0xaf25de2c
 800f95c:	3f11566a 	.word	0x3f11566a
 800f960:	16bebd93 	.word	0x16bebd93
 800f964:	3f66c16c 	.word	0x3f66c16c
 800f968:	5555553e 	.word	0x5555553e
 800f96c:	3fc55555 	.word	0x3fc55555
 800f970:	fff00000 	.word	0xfff00000
 800f974:	3ff00000 	.word	0x3ff00000
 800f978:	4090cbff 	.word	0x4090cbff
 800f97c:	3f6f3400 	.word	0x3f6f3400
 800f980:	3fe00000 	.word	0x3fe00000
 800f984:	652b82fe 	.word	0x652b82fe
 800f988:	3c971547 	.word	0x3c971547
 800f98c:	4090cc00 	.word	0x4090cc00

0800f990 <fabs>:
 800f990:	ec51 0b10 	vmov	r0, r1, d0
 800f994:	4602      	mov	r2, r0
 800f996:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f99a:	ec43 2b10 	vmov	d0, r2, r3
 800f99e:	4770      	bx	lr

0800f9a0 <scalbn>:
 800f9a0:	b570      	push	{r4, r5, r6, lr}
 800f9a2:	ec55 4b10 	vmov	r4, r5, d0
 800f9a6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f9aa:	4606      	mov	r6, r0
 800f9ac:	462b      	mov	r3, r5
 800f9ae:	b991      	cbnz	r1, 800f9d6 <scalbn+0x36>
 800f9b0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f9b4:	4323      	orrs	r3, r4
 800f9b6:	d03d      	beq.n	800fa34 <scalbn+0x94>
 800f9b8:	4b35      	ldr	r3, [pc, #212]	@ (800fa90 <scalbn+0xf0>)
 800f9ba:	4620      	mov	r0, r4
 800f9bc:	4629      	mov	r1, r5
 800f9be:	2200      	movs	r2, #0
 800f9c0:	f7f0 fe22 	bl	8000608 <__aeabi_dmul>
 800f9c4:	4b33      	ldr	r3, [pc, #204]	@ (800fa94 <scalbn+0xf4>)
 800f9c6:	429e      	cmp	r6, r3
 800f9c8:	4604      	mov	r4, r0
 800f9ca:	460d      	mov	r5, r1
 800f9cc:	da0f      	bge.n	800f9ee <scalbn+0x4e>
 800f9ce:	a328      	add	r3, pc, #160	@ (adr r3, 800fa70 <scalbn+0xd0>)
 800f9d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d4:	e01e      	b.n	800fa14 <scalbn+0x74>
 800f9d6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f9da:	4291      	cmp	r1, r2
 800f9dc:	d10b      	bne.n	800f9f6 <scalbn+0x56>
 800f9de:	4622      	mov	r2, r4
 800f9e0:	4620      	mov	r0, r4
 800f9e2:	4629      	mov	r1, r5
 800f9e4:	f7f0 fc5a 	bl	800029c <__adddf3>
 800f9e8:	4604      	mov	r4, r0
 800f9ea:	460d      	mov	r5, r1
 800f9ec:	e022      	b.n	800fa34 <scalbn+0x94>
 800f9ee:	460b      	mov	r3, r1
 800f9f0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f9f4:	3936      	subs	r1, #54	@ 0x36
 800f9f6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f9fa:	4296      	cmp	r6, r2
 800f9fc:	dd0d      	ble.n	800fa1a <scalbn+0x7a>
 800f9fe:	2d00      	cmp	r5, #0
 800fa00:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa78 <scalbn+0xd8>)
 800fa02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa06:	da02      	bge.n	800fa0e <scalbn+0x6e>
 800fa08:	a11d      	add	r1, pc, #116	@ (adr r1, 800fa80 <scalbn+0xe0>)
 800fa0a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa0e:	a31a      	add	r3, pc, #104	@ (adr r3, 800fa78 <scalbn+0xd8>)
 800fa10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa14:	f7f0 fdf8 	bl	8000608 <__aeabi_dmul>
 800fa18:	e7e6      	b.n	800f9e8 <scalbn+0x48>
 800fa1a:	1872      	adds	r2, r6, r1
 800fa1c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800fa20:	428a      	cmp	r2, r1
 800fa22:	dcec      	bgt.n	800f9fe <scalbn+0x5e>
 800fa24:	2a00      	cmp	r2, #0
 800fa26:	dd08      	ble.n	800fa3a <scalbn+0x9a>
 800fa28:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fa2c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fa30:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fa34:	ec45 4b10 	vmov	d0, r4, r5
 800fa38:	bd70      	pop	{r4, r5, r6, pc}
 800fa3a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800fa3e:	da08      	bge.n	800fa52 <scalbn+0xb2>
 800fa40:	2d00      	cmp	r5, #0
 800fa42:	a10b      	add	r1, pc, #44	@ (adr r1, 800fa70 <scalbn+0xd0>)
 800fa44:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa48:	dac1      	bge.n	800f9ce <scalbn+0x2e>
 800fa4a:	a10f      	add	r1, pc, #60	@ (adr r1, 800fa88 <scalbn+0xe8>)
 800fa4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa50:	e7bd      	b.n	800f9ce <scalbn+0x2e>
 800fa52:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fa56:	3236      	adds	r2, #54	@ 0x36
 800fa58:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800fa5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fa60:	4620      	mov	r0, r4
 800fa62:	4b0d      	ldr	r3, [pc, #52]	@ (800fa98 <scalbn+0xf8>)
 800fa64:	4629      	mov	r1, r5
 800fa66:	2200      	movs	r2, #0
 800fa68:	e7d4      	b.n	800fa14 <scalbn+0x74>
 800fa6a:	bf00      	nop
 800fa6c:	f3af 8000 	nop.w
 800fa70:	c2f8f359 	.word	0xc2f8f359
 800fa74:	01a56e1f 	.word	0x01a56e1f
 800fa78:	8800759c 	.word	0x8800759c
 800fa7c:	7e37e43c 	.word	0x7e37e43c
 800fa80:	8800759c 	.word	0x8800759c
 800fa84:	fe37e43c 	.word	0xfe37e43c
 800fa88:	c2f8f359 	.word	0xc2f8f359
 800fa8c:	81a56e1f 	.word	0x81a56e1f
 800fa90:	43500000 	.word	0x43500000
 800fa94:	ffff3cb0 	.word	0xffff3cb0
 800fa98:	3c900000 	.word	0x3c900000

0800fa9c <with_errno>:
 800fa9c:	b510      	push	{r4, lr}
 800fa9e:	ed2d 8b02 	vpush	{d8}
 800faa2:	eeb0 8a40 	vmov.f32	s16, s0
 800faa6:	eef0 8a60 	vmov.f32	s17, s1
 800faaa:	4604      	mov	r4, r0
 800faac:	f7fb fa3e 	bl	800af2c <__errno>
 800fab0:	eeb0 0a48 	vmov.f32	s0, s16
 800fab4:	eef0 0a68 	vmov.f32	s1, s17
 800fab8:	ecbd 8b02 	vpop	{d8}
 800fabc:	6004      	str	r4, [r0, #0]
 800fabe:	bd10      	pop	{r4, pc}

0800fac0 <xflow>:
 800fac0:	4603      	mov	r3, r0
 800fac2:	b507      	push	{r0, r1, r2, lr}
 800fac4:	ec51 0b10 	vmov	r0, r1, d0
 800fac8:	b183      	cbz	r3, 800faec <xflow+0x2c>
 800faca:	4602      	mov	r2, r0
 800facc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fad0:	e9cd 2300 	strd	r2, r3, [sp]
 800fad4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fad8:	f7f0 fd96 	bl	8000608 <__aeabi_dmul>
 800fadc:	ec41 0b10 	vmov	d0, r0, r1
 800fae0:	2022      	movs	r0, #34	@ 0x22
 800fae2:	b003      	add	sp, #12
 800fae4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fae8:	f7ff bfd8 	b.w	800fa9c <with_errno>
 800faec:	4602      	mov	r2, r0
 800faee:	460b      	mov	r3, r1
 800faf0:	e7ee      	b.n	800fad0 <xflow+0x10>
 800faf2:	0000      	movs	r0, r0
 800faf4:	0000      	movs	r0, r0
	...

0800faf8 <__math_uflow>:
 800faf8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb00 <__math_uflow+0x8>
 800fafc:	f7ff bfe0 	b.w	800fac0 <xflow>
 800fb00:	00000000 	.word	0x00000000
 800fb04:	10000000 	.word	0x10000000

0800fb08 <__math_oflow>:
 800fb08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800fb10 <__math_oflow+0x8>
 800fb0c:	f7ff bfd8 	b.w	800fac0 <xflow>
 800fb10:	00000000 	.word	0x00000000
 800fb14:	70000000 	.word	0x70000000

0800fb18 <__ieee754_sqrt>:
 800fb18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb1c:	4a68      	ldr	r2, [pc, #416]	@ (800fcc0 <__ieee754_sqrt+0x1a8>)
 800fb1e:	ec55 4b10 	vmov	r4, r5, d0
 800fb22:	43aa      	bics	r2, r5
 800fb24:	462b      	mov	r3, r5
 800fb26:	4621      	mov	r1, r4
 800fb28:	d110      	bne.n	800fb4c <__ieee754_sqrt+0x34>
 800fb2a:	4622      	mov	r2, r4
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	4629      	mov	r1, r5
 800fb30:	f7f0 fd6a 	bl	8000608 <__aeabi_dmul>
 800fb34:	4602      	mov	r2, r0
 800fb36:	460b      	mov	r3, r1
 800fb38:	4620      	mov	r0, r4
 800fb3a:	4629      	mov	r1, r5
 800fb3c:	f7f0 fbae 	bl	800029c <__adddf3>
 800fb40:	4604      	mov	r4, r0
 800fb42:	460d      	mov	r5, r1
 800fb44:	ec45 4b10 	vmov	d0, r4, r5
 800fb48:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb4c:	2d00      	cmp	r5, #0
 800fb4e:	dc0e      	bgt.n	800fb6e <__ieee754_sqrt+0x56>
 800fb50:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fb54:	4322      	orrs	r2, r4
 800fb56:	d0f5      	beq.n	800fb44 <__ieee754_sqrt+0x2c>
 800fb58:	b19d      	cbz	r5, 800fb82 <__ieee754_sqrt+0x6a>
 800fb5a:	4622      	mov	r2, r4
 800fb5c:	4620      	mov	r0, r4
 800fb5e:	4629      	mov	r1, r5
 800fb60:	f7f0 fb9a 	bl	8000298 <__aeabi_dsub>
 800fb64:	4602      	mov	r2, r0
 800fb66:	460b      	mov	r3, r1
 800fb68:	f7f0 fe78 	bl	800085c <__aeabi_ddiv>
 800fb6c:	e7e8      	b.n	800fb40 <__ieee754_sqrt+0x28>
 800fb6e:	152a      	asrs	r2, r5, #20
 800fb70:	d115      	bne.n	800fb9e <__ieee754_sqrt+0x86>
 800fb72:	2000      	movs	r0, #0
 800fb74:	e009      	b.n	800fb8a <__ieee754_sqrt+0x72>
 800fb76:	0acb      	lsrs	r3, r1, #11
 800fb78:	3a15      	subs	r2, #21
 800fb7a:	0549      	lsls	r1, r1, #21
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d0fa      	beq.n	800fb76 <__ieee754_sqrt+0x5e>
 800fb80:	e7f7      	b.n	800fb72 <__ieee754_sqrt+0x5a>
 800fb82:	462a      	mov	r2, r5
 800fb84:	e7fa      	b.n	800fb7c <__ieee754_sqrt+0x64>
 800fb86:	005b      	lsls	r3, r3, #1
 800fb88:	3001      	adds	r0, #1
 800fb8a:	02dc      	lsls	r4, r3, #11
 800fb8c:	d5fb      	bpl.n	800fb86 <__ieee754_sqrt+0x6e>
 800fb8e:	1e44      	subs	r4, r0, #1
 800fb90:	1b12      	subs	r2, r2, r4
 800fb92:	f1c0 0420 	rsb	r4, r0, #32
 800fb96:	fa21 f404 	lsr.w	r4, r1, r4
 800fb9a:	4323      	orrs	r3, r4
 800fb9c:	4081      	lsls	r1, r0
 800fb9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fba2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fba6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fbaa:	07d2      	lsls	r2, r2, #31
 800fbac:	bf5c      	itt	pl
 800fbae:	005b      	lslpl	r3, r3, #1
 800fbb0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fbb4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fbb8:	bf58      	it	pl
 800fbba:	0049      	lslpl	r1, r1, #1
 800fbbc:	2600      	movs	r6, #0
 800fbbe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fbc2:	106d      	asrs	r5, r5, #1
 800fbc4:	0049      	lsls	r1, r1, #1
 800fbc6:	2016      	movs	r0, #22
 800fbc8:	4632      	mov	r2, r6
 800fbca:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fbce:	1917      	adds	r7, r2, r4
 800fbd0:	429f      	cmp	r7, r3
 800fbd2:	bfde      	ittt	le
 800fbd4:	193a      	addle	r2, r7, r4
 800fbd6:	1bdb      	suble	r3, r3, r7
 800fbd8:	1936      	addle	r6, r6, r4
 800fbda:	0fcf      	lsrs	r7, r1, #31
 800fbdc:	3801      	subs	r0, #1
 800fbde:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fbe2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fbe6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fbea:	d1f0      	bne.n	800fbce <__ieee754_sqrt+0xb6>
 800fbec:	4604      	mov	r4, r0
 800fbee:	2720      	movs	r7, #32
 800fbf0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	eb00 0e0c 	add.w	lr, r0, ip
 800fbfa:	db02      	blt.n	800fc02 <__ieee754_sqrt+0xea>
 800fbfc:	d113      	bne.n	800fc26 <__ieee754_sqrt+0x10e>
 800fbfe:	458e      	cmp	lr, r1
 800fc00:	d811      	bhi.n	800fc26 <__ieee754_sqrt+0x10e>
 800fc02:	f1be 0f00 	cmp.w	lr, #0
 800fc06:	eb0e 000c 	add.w	r0, lr, ip
 800fc0a:	da42      	bge.n	800fc92 <__ieee754_sqrt+0x17a>
 800fc0c:	2800      	cmp	r0, #0
 800fc0e:	db40      	blt.n	800fc92 <__ieee754_sqrt+0x17a>
 800fc10:	f102 0801 	add.w	r8, r2, #1
 800fc14:	1a9b      	subs	r3, r3, r2
 800fc16:	458e      	cmp	lr, r1
 800fc18:	bf88      	it	hi
 800fc1a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fc1e:	eba1 010e 	sub.w	r1, r1, lr
 800fc22:	4464      	add	r4, ip
 800fc24:	4642      	mov	r2, r8
 800fc26:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fc2a:	3f01      	subs	r7, #1
 800fc2c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fc30:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fc34:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fc38:	d1dc      	bne.n	800fbf4 <__ieee754_sqrt+0xdc>
 800fc3a:	4319      	orrs	r1, r3
 800fc3c:	d01b      	beq.n	800fc76 <__ieee754_sqrt+0x15e>
 800fc3e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fcc4 <__ieee754_sqrt+0x1ac>
 800fc42:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fcc8 <__ieee754_sqrt+0x1b0>
 800fc46:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc4a:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc4e:	f7f0 fb23 	bl	8000298 <__aeabi_dsub>
 800fc52:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc56:	4602      	mov	r2, r0
 800fc58:	460b      	mov	r3, r1
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	4649      	mov	r1, r9
 800fc5e:	f7f0 ff4f 	bl	8000b00 <__aeabi_dcmple>
 800fc62:	b140      	cbz	r0, 800fc76 <__ieee754_sqrt+0x15e>
 800fc64:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fc68:	e9da 0100 	ldrd	r0, r1, [sl]
 800fc6c:	e9db 2300 	ldrd	r2, r3, [fp]
 800fc70:	d111      	bne.n	800fc96 <__ieee754_sqrt+0x17e>
 800fc72:	3601      	adds	r6, #1
 800fc74:	463c      	mov	r4, r7
 800fc76:	1072      	asrs	r2, r6, #1
 800fc78:	0863      	lsrs	r3, r4, #1
 800fc7a:	07f1      	lsls	r1, r6, #31
 800fc7c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fc80:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fc84:	bf48      	it	mi
 800fc86:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fc8a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fc8e:	4618      	mov	r0, r3
 800fc90:	e756      	b.n	800fb40 <__ieee754_sqrt+0x28>
 800fc92:	4690      	mov	r8, r2
 800fc94:	e7be      	b.n	800fc14 <__ieee754_sqrt+0xfc>
 800fc96:	f7f0 fb01 	bl	800029c <__adddf3>
 800fc9a:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	4640      	mov	r0, r8
 800fca4:	4649      	mov	r1, r9
 800fca6:	f7f0 ff21 	bl	8000aec <__aeabi_dcmplt>
 800fcaa:	b120      	cbz	r0, 800fcb6 <__ieee754_sqrt+0x19e>
 800fcac:	1ca0      	adds	r0, r4, #2
 800fcae:	bf08      	it	eq
 800fcb0:	3601      	addeq	r6, #1
 800fcb2:	3402      	adds	r4, #2
 800fcb4:	e7df      	b.n	800fc76 <__ieee754_sqrt+0x15e>
 800fcb6:	1c63      	adds	r3, r4, #1
 800fcb8:	f023 0401 	bic.w	r4, r3, #1
 800fcbc:	e7db      	b.n	800fc76 <__ieee754_sqrt+0x15e>
 800fcbe:	bf00      	nop
 800fcc0:	7ff00000 	.word	0x7ff00000
 800fcc4:	200001e0 	.word	0x200001e0
 800fcc8:	200001d8 	.word	0x200001d8

0800fccc <_init>:
 800fccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcce:	bf00      	nop
 800fcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcd2:	bc08      	pop	{r3}
 800fcd4:	469e      	mov	lr, r3
 800fcd6:	4770      	bx	lr

0800fcd8 <_fini>:
 800fcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcda:	bf00      	nop
 800fcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcde:	bc08      	pop	{r3}
 800fce0:	469e      	mov	lr, r3
 800fce2:	4770      	bx	lr
